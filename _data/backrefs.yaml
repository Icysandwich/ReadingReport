notes:
  notes/abstract-interpretation:
  - - notes/seahorn-verifier
    - - SeaHorn verifier
      - null
  - - notes/separation-logic
    - - Separation logic
      - null
  notes/acl2-theorem-prover: []
  notes/activation-function:
  - - notes/relu
    - - Rectified linear unit (RELU)
      - null
  - - notes/softmax
    - - Soft max
      - null
  notes/afl-fuzzer:
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  notes/alias-analysis:
  - - notes/separation-logic
    - - Separation logic
      - null
  notes/alloy-verifier: []
  notes/angr-verifier:
  - - notes/driller-verifier
    - - Driller verifier
      - null
  - - notes/symbolic-memory
    - - Symbolic memory
      - null
  - - notes/valgrind
    - - Valgrind
      - null
  notes/annotation-burden:
  - - notes/ghost-code
    - - Ghost code
      - null
  notes/aorte:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  - - notes/extended-static-checking
    - - Extended static checking (ESC)
      - null
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  notes/arm-architecture:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  - - notes/l3
    - - L3 specification language
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  notes/asl:
  - - notes/arm-architecture
    - - Arm architecture
      - null
  - - notes/dependent-type
    - - Dependent type
      - null
  - - notes/isa-specification
    - - ISA specification
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  notes/aspect-oriented-programming: []
  notes/attention-function:
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  notes/auto-active-verification:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/dafny-verifier
    - - Dafny verifier
      - null
  - - notes/vcc-verifier
    - - VCC verifier
      - null
  notes/auto-encoder-model:
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  notes/automatic-exploit-generation:
  - - notes/mayhem
    - - Mayhem
      - null
  notes/bap-tool:
  - - notes/valgrind-tool
    - - Valgrind binary instrumentation tool
      - null
  notes/bdd:
  - - notes/symbolic-model-checking
    - - Symbolic model checking
      - null
  notes/benes-network: []
  notes/biabduction: []
  notes/binary-analysis:
  - - notes/angr-verifier
    - - angr verifier
      - null
  - - notes/bap-tool
    - - Binary Analysis Platform (BAP)
      - null
  - - notes/mayhem
    - - Mayhem
      - null
  - - notes/serval-tool
    - - Serval solver-based verifier
      - null
  notes/binary-instrumentation:
  - - notes/dynamic-binary-translation
    - - Dynamic binary translation (DBT)
      - null
  - - notes/dynamorio-tool
    - - DynamoRIO binary instrumentation tool
      - null
  - - notes/pin-tool
    - - PIN binary instrumentation tool
      - null
  - - notes/valgrind-tool
    - - Valgrind binary instrumentation tool
      - null
  - - notes/valgrind
    - - Valgrind
      - null
  notes/binary-lifter:
  - - notes/mcsema-tool
    - - McSema binary lifter
      - null
  - - notes/remill-library
    - - Remill binary lifting library
      - null
  notes/blast-verifier:
  - - notes/cpachecker-verifier
    - - CPAchecker verifier
      - null
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  notes/bleu: []
  notes/boogie-verifier:
  - - notes/auto-active-verification
    - - Auto active verification
      - null
  - - notes/civl-verifier
    - - CIVL verifier
      - null
  - - notes/corral-verifier
    - - Corral verifier
      - null
  - - notes/intermediate-verification-language
    - - Intermediate verification language
      - null
  - - notes/smack-verifier
    - - SMACK verifier
      - null
  - - notes/spec-sharp-project
    - - Spec# project
      - null
  - - notes/vcc-verifier
    - - VCC verifier
      - null
  - - notes/verification-condition-generator
    - - Verification condition generator
      - null
  notes/bounded-model-checking:
  - - notes/bounded-verification
    - - Bounded verification
      - null
  - - notes/cbmc-verifier
    - - CBMC verifier
      - null
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/symbolic-evaluation
    - - Symbolic evaluation
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/bounded-verification:
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  notes/buchi-automaton:
  - - notes/model-checking
    - - Model checking
      - null
  notes/bug-localization: []
  notes/cactus-plot: []
  notes/cakeml-compiler:
  - - notes/verified-compilers
    - - Verified compilers
      - null
  notes/capabilities:
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  notes/case-splitting:
  - - notes/state-merging
    - - State merging
      - null
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/cbmc-verifier: []
  notes/cegar:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  notes/chalice-verifier:
  - - notes/permission-logic
    - - Permission logic
      - null
  notes/cheri-architecture:
  - - notes/capabilities
    - - Capabilities
      - null
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  notes/cil-tool: []
  notes/civl-verifier: []
  notes/cnn: []
  notes/compcert-compiler:
  - - notes/translation-validation
    - - Translation validation
      - null
  - - notes/verified-compilers
    - - Verified compilers
      - null
  notes/compiler-verification: []
  notes/concolic-execution:
  - - notes/angr-verifier
    - - angr verifier
      - null
  - - notes/cute-verifier
    - - CUTE verifier
      - null
  - - notes/dart-verifier
    - - DART verifier
      - null
  - - notes/driller-verifier
    - - Driller verifier
      - null
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  - - notes/qsym
    - - QSYM verifier
      - null
  - - notes/sage-verifier
    - - SAGE verifier
      - null
  - - notes/symcc
    - - SymCC
      - null
  notes/concurrent-separation-logic: []
  notes/continuations:
  - - notes/events
    - - Events
      - null
  - - notes/threads
    - - Threads
      - null
  notes/contract-driven-development:
  - - notes/modular-verification
    - - Modular verification
      - null
  - - notes/spec-sharp-project
    - - Spec# project
      - null
  notes/coq-theorem-prover:
  - - notes/compcert-compiler
    - - CompCert compiler
      - null
  - - notes/dependent-type
    - - Dependent type
      - null
  - - notes/nova-hypervisor
    - - NOVA hypervisor
      - null
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  notes/corral-verifier: []
  notes/cpachecker-verifier:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  notes/cpu-verification:
  - - notes/isa-specification
    - - ISA specification
      - null
  - - notes/symbolic-trajectory-evaluation
    - - Symbolic trajectory evaluation
      - null
  notes/cray-architecture:
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  notes/crest-verifier: []
  notes/cute-verifier:
  - - notes/concolic-execution
    - - Concolic execution
      - null
  notes/cvc4-solver:
  - - notes/smt-solver
    - - SMT solver
      - null
  notes/cyclone-language: []
  notes/dafny-verifier:
  - - notes/auto-active-verification
    - - Auto active verification
      - null
  notes/darpa-cgc: []
  notes/dart-verifier:
  - - notes/concolic-execution
    - - Concolic execution
      - null
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  notes/data-parallelism:
  - - notes/mimd
    - - Multiple Instruction Multiple Data (MIMD)
      - null
  - - notes/parallelism
    - - Parallelism
      - null
  - - notes/simd
    - - Single Instruction Multiple Data (SIMD)
      - null
  - - notes/vector-architecture
    - - Vector architecture
      - null
  notes/decidability-ceiling: []
  notes/decoupled-access-execute: []
  notes/decoupling:
  - - notes/parallelism
    - - Parallelism
      - null
  - - notes/stream-processing
    - - Stream Processing
      - null
  notes/deep-neural-networks: []
  notes/dependency-injection: []
  notes/dependent-type:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  - - notes/coq-theorem-prover
    - - Coq theorem prover
      - null
  - - notes/liquid-type
    - - Liquid type
      - null
  - - notes/phantom-types
    - - Phantom types
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  notes/differential-power-analysis: []
  notes/differential-testing: []
  notes/digfuzz-fuzzer:
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  notes/distributed-shared-memory: []
  notes/domain-specific-language: []
  notes/driller-verifier:
  - - notes/concolic-execution
    - - Concolic execution
      - null
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  notes/dynamic-binary-translation:
  - - notes/dynamorio-tool
    - - DynamoRIO binary instrumentation tool
      - null
  - - notes/pin-tool
    - - PIN binary instrumentation tool
      - null
  - - notes/valgrind-tool
    - - Valgrind binary instrumentation tool
      - null
  notes/dynamorio-tool:
  - - notes/binary-instrumentation
    - - Binary instrumentation
      - null
  - - notes/dynamic-binary-translation
    - - Dynamic binary translation (DBT)
      - null
  - - notes/valgrind-tool
    - - Valgrind binary instrumentation tool
      - null
  notes/embedding: []
  notes/entropy: []
  notes/equality-saturation: []
  notes/events: []
  notes/exe-verifier: []
  notes/extended-static-checking:
  - - notes/aorte
    - - Absence of RunTime Errors (AoRTE)
      - null
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  notes/foreign-function-interface:
  - - notes/phantom-types
    - - Phantom types
      - null
  - - notes/smt-lib-format
    - - SMT-LIB format
      - null
  notes/formal-specification:
  - - notes/l3
    - - L3 specification language
      - null
  notes/fql:
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  - - notes/test-competition
    - - Software Testing Competition (Test-Comp)
      - null
  notes/fractional-permissions:
  - - notes/permission-accounting
    - - Permission accounting
      - null
  - - notes/verifast-verifier
    - - VeriFast verifier
      - null
  notes/frama-c-verifier:
  - - notes/undefined-behaviour
    - - Undefined behaviour
      - null
  notes/frame-rule:
  - - notes/concurrent-separation-logic
    - - Concurrent separation logic
      - null
  notes/friction-diagram:
  - - notes/usability
    - - Usability research
      - null
  notes/functional-reactive-programming: []
  notes/fuzz-testing:
  - - notes/afl-fuzzer
    - - AFL fuzzer
      - null
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  - - notes/property-based-testing
    - - Property-based testing
      - null
  - - notes/sage-verifier
    - - SAGE verifier
      - null
  - - notes/search-based-test-generation
    - - Search based test generation
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/test-case-reduction
    - - Test-case reduction
      - null
  - - notes/test-generation
    - - Test generation
      - null
  notes/gan: []
  notes/garbage-collection:
  - - notes/memory-management
    - - Memory management
      - null
  notes/gating-network:
  - - notes/mixture-of-experts
    - - Mixture of experts
      - null
  notes/genetic-algorithm: []
  notes/ghost-code:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  notes/google: []
  notes/hardware:
  - - notes/hardware-faults
    - - Hardware Faults
      - null
  notes/hardware-faults: []
  notes/haskell-language: []
  notes/hol-theorem-prover: []
  notes/horn-clause: []
  notes/human-factors: []
  notes/hybrid-testing:
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  - - notes/mayhem
    - - Mayhem
      - null
  notes/hyperproperty:
  - - notes/non-interference
    - - Non-interference
      - null
  notes/implicit-dynamic-frames:
  - - notes/permission-logic
    - - Permission logic
      - null
  notes/information-flow:
  - - notes/non-interference
    - - Non-interference
      - null
  - - notes/self-composition
    - - Self composition
      - null
  notes/instruction-set-architecture:
  - - notes/arm-architecture
    - - Arm architecture
      - null
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  - - notes/cray-architecture
    - - Cray architecture
      - null
  - - notes/isa-specification
    - - ISA specification
      - null
  - - notes/isps
    - - Instruction Set Processor (ISP)
      - null
  - - notes/mips-architecture
    - - MIPS architecture
      - null
  - - notes/pdp11-architecture
    - - PDP11 architecture
      - null
  - - notes/powerpc-architecture
    - - Power-PC architecture
      - null
  - - notes/risc-architecture
    - - RISC architecture
      - null
  - - notes/riscv-architecture
    - - RISC-V architecture
      - null
  - - notes/vector-architecture
    - - Vector architecture
      - null
  - - notes/x86-architecture
    - - x86 architecture
      - null
  notes/interactive-theorem-prover:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/coq-theorem-prover
    - - Coq theorem prover
      - null
  - - notes/hol-theorem-prover
    - - HOL theorem prover
      - null
  - - notes/lean-theorem-prover
    - - Lean theorem prover
      - null
  - - notes/pvs-theorem-prover
    - - PVS theorem prover
      - null
  notes/intermediate-verification-language:
  - - notes/boogie-verifier
    - - Boogie verifier
      - null
  - - notes/civl-verifier
    - - CIVL verifier
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  - - notes/smack-verifier
    - - SMACK verifier
      - null
  - - notes/viper-verifier
    - - Viper verifier
      - null
  notes/interpolation: []
  notes/isa-specification:
  - - notes/arm-architecture
    - - Arm architecture
      - null
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  - - notes/binary-analysis
    - - Binary analysis
      - null
  - - notes/cpu-verification
    - - CPU verification
      - null
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  - - notes/isps
    - - Instruction Set Processor (ISP)
      - null
  - - notes/l3
    - - L3 specification language
      - null
  - - notes/lisa
    - - LISA
      - null
  - - notes/mcsema-tool
    - - McSema binary lifter
      - null
  - - notes/remill-library
    - - Remill binary lifting library
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  - - notes/sled
    - - Specification language for encoding and decoding (SLED)
      - null
  notes/isabelle-theorem-prover: []
  notes/isps:
  - - notes/isa-specification
    - - ISA specification
      - null
  notes/ivy-verifier: []
  notes/java-pathfinder:
  - - notes/lazy-initialization
    - - Lazy initialization of symbolic values
      - null
  notes/javascript: []
  notes/klee-verifier:
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/test-competition
    - - Software Testing Competition (Test-Comp)
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/kripke-structure:
  - - notes/buchi-automaton
    - - "B\xFCchi automaton"
      - null
  - - notes/model-checking
    - - Model checking
      - null
  - - notes/temporal-logic
    - - Temporal logic
      - null
  notes/l3:
  - - notes/isa-specification
    - - ISA specification
      - null
  notes/lazy-initialization: []
  notes/lean-theorem-prover:
  - - notes/dependent-type
    - - Dependent type
      - null
  notes/linear-logic:
  - - notes/permission-logic
    - - Permission logic
      - null
  notes/liquid-type:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  - - notes/dependent-type
    - - Dependent type
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  notes/lisa:
  - - notes/isa-specification
    - - ISA specification
      - null
  notes/llbmc-verifier: []
  notes/llvm-compiler:
  - - notes/klee-verifier
    - - KLEE verifier
      - null
  - - notes/mcsema-tool
    - - McSema binary lifter
      - null
  - - notes/remill-library
    - - Remill binary lifting library
      - null
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  - - notes/seahorn-verifier
    - - SeaHorn verifier
      - null
  - - notes/serval-tool
    - - Serval solver-based verifier
      - null
  - - notes/smack-verifier
    - - SMACK verifier
      - null
  notes/loop-invariant:
  - - notes/modular-verification
    - - Modular verification
      - null
  notes/lstm:
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  notes/machine-learning:
  - - notes/mixture-of-experts
    - - Mixture of experts
      - null
  notes/magic-wand:
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  notes/mayhem: []
  notes/mcsema-tool:
  - - notes/remill-library
    - - Remill binary lifting library
      - null
  notes/memory-coherence: []
  notes/memory-management:
  - - notes/garbage-collection
    - - Garbage collection
      - null
  notes/memory-safety:
  - - notes/garbage-collection
    - - Garbage collection
      - null
  - - notes/memory-management
    - - Memory management
      - null
  notes/microarchitecture:
  - - notes/differential-power-analysis
    - - Differential Power Analysis
      - null
  - - notes/risc-architecture
    - - RISC architecture
      - null
  - - notes/speculative-execution
    - - Speculative execution
      - null
  - - notes/vector-architecture
    - - Vector architecture
      - null
  - - notes/vliw
    - - Very Long Instruction Word (VLIW)
      - null
  notes/mimd:
  - - notes/data-parallelism
    - - Data parallelism
      - null
  - - notes/parallelism
    - - Parallelism
      - null
  notes/mips-architecture:
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  notes/mir:
  - - notes/mir-interpreter
    - - MIR interpreter (miri)
      - null
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  notes/mir-interpreter:
  - - notes/mir
    - - MIR
      - null
  notes/mixture-of-experts:
  - - notes/gating-network
    - - Gating network
      - null
  notes/mlp: []
  notes/model-based-testing: []
  notes/model-checking:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  - - notes/buchi-automaton
    - - "B\xFCchi automaton"
      - null
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/cpachecker-verifier
    - - CPAchecker verifier
      - null
  - - notes/kripke-structure
    - - Kripke structure
      - null
  - - notes/partial-order-reduction
    - - Partial Order Reduction
      - null
  - - notes/sat-solver
    - - SAT solver
      - null
  - - notes/state-merging
    - - State merging
      - null
  - - notes/symbolic-model-checking
    - - Symbolic model checking
      - null
  - - notes/temporal-logic
    - - Temporal logic
      - null
  notes/modular-verification:
  - - notes/contract-driven-development
    - - Contract driven development
      - null
  - - notes/spec-sharp-project
    - - Spec# project
      - null
  notes/mutation-testing: []
  notes/natural-language: []
  notes/neural-network:
  - - notes/activation-function
    - - Activation function
      - null
  - - notes/attention-function
    - - Attention function
      - null
  - - notes/auto-encoder-model
    - - Auto-encoder model
      - null
  - - notes/cnn
    - - Convolutional neural network (CNN)
      - null
  - - notes/deep-neural-networks
    - - Deep neural networks
      - null
  - - notes/gan
    - - Generative adversarial neural network (GAN)
      - null
  - - notes/lstm
    - - Long short-term memory (LSTM)
      - null
  - - notes/mixture-of-experts
    - - Mixture of experts
      - null
  - - notes/pytorch
    - - PyTorch
      - null
  - - notes/relu
    - - Rectified linear unit (RELU)
      - null
  - - notes/rnn
    - - Recurrent neural network (RNN)
      - null
  - - notes/softmax
    - - Soft max
      - null
  - - notes/tensorflow
    - - TensorFlow
      - null
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  - - notes/xnnpack
    - - XNNPACK
      - null
  notes/nlp:
  - - notes/attention-function
    - - Attention function
      - null
  - - notes/bleu
    - - Bilingual evaluation understudy (BLEU)
      - null
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  notes/non-interference:
  - - notes/hyperproperty
    - - Hyperproperty
      - null
  notes/nova-hypervisor: []
  notes/omega-library: []
  notes/operating-system: []
  notes/operating-systems:
  - - notes/nova-hypervisor
    - - NOVA hypervisor
      - null
  - - notes/serval-tool
    - - Serval solver-based verifier
      - null
  notes/over-approximation: []
  notes/ownership-types:
  - - notes/rust-language
    - - Rust language
      - null
  notes/parallelism:
  - - notes/data-parallelism
    - - Data parallelism
      - null
  - - notes/mimd
    - - Multiple Instruction Multiple Data (MIMD)
      - null
  - - notes/pipeline-parallelism
    - - Pipeline parallelism
      - null
  - - notes/simd
    - - Single Instruction Multiple Data (SIMD)
      - null
  - - notes/threads
    - - Threads
      - null
  notes/partial-order-reduction: []
  notes/paxos: []
  notes/pdp11-architecture:
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  notes/permission-accounting:
  - - notes/fractional-permissions
    - - Fractional permissions
      - null
  notes/permission-logic:
  - - notes/boogie-verifier
    - - Boogie verifier
      - null
  - - notes/chalice-verifier
    - - Chalice verifier
      - null
  - - notes/fractional-permissions
    - - Fractional permissions
      - null
  - - notes/implicit-dynamic-frames
    - - Implicit dynamic frames
      - null
  - - notes/magic-wand
    - - Magic wand
      - null
  - - notes/permission-accounting
    - - Permission accounting
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  - - notes/separation-logic
    - - Separation logic
      - null
  - - notes/viper-verifier
    - - Viper verifier
      - null
  notes/phantom-types:
  - - notes/foreign-function-interface
    - - Foreign function interface
      - null
  notes/pin-tool:
  - - notes/binary-instrumentation
    - - Binary instrumentation
      - null
  - - notes/dynamic-binary-translation
    - - Dynamic binary translation (DBT)
      - null
  - - notes/valgrind-tool
    - - Valgrind binary instrumentation tool
      - null
  notes/pipeline-parallelism:
  - - notes/stream-processing
    - - Stream Processing
      - null
  notes/power-virus: []
  notes/powerpc-architecture:
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  - - notes/sail-language
    - - Sail ISA specification language
      - null
  notes/proof-carrying-code:
  - - notes/typed-assembly-language
    - - Typed assembly language
      - null
  notes/property-based-testing:
  - - notes/unit-tests
    - - Unit tests
      - null
  notes/prusti-verifier:
  - - notes/ownership-types
    - - Ownership types
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  - - notes/rust-language
    - - Rust language
      - null
  - - notes/viper-verifier
    - - Viper verifier
      - null
  notes/pvs-theorem-prover: []
  notes/pytorch:
  - - notes/tensorflow
    - - TensorFlow
      - null
  - - notes/xnnpack
    - - XNNPACK
      - null
  notes/qemu:
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  notes/qsym:
  - - notes/concolic-execution
    - - Concolic execution
      - null
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  notes/quic-protocol: []
  notes/reachability:
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  notes/reference-counting:
  - - notes/memory-management
    - - Memory management
      - null
  notes/refinement-types: []
  notes/regions:
  - - notes/ownership-types
    - - Ownership types
      - null
  - - notes/rust-language
    - - Rust language
      - null
  notes/relu:
  - - notes/activation-function
    - - Activation function
      - null
  notes/remill-library:
  - - notes/mcsema-tool
    - - McSema binary lifter
      - null
  notes/remote-procedure-call: []
  notes/requirements-specification:
  - - notes/alloy-verifier
    - - Alloy verifier
      - null
  notes/resonant-frequency: []
  notes/rewrite-rules: []
  notes/risc-architecture: []
  notes/riscv-architecture:
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  notes/rnn:
  - - notes/lstm
    - - Long short-term memory (LSTM)
      - null
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  notes/roofline-performance-model: []
  notes/rosette-solver:
  - - notes/serval-tool
    - - Serval solver-based verifier
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/rtl:
  - - notes/symbolic-trajectory-evaluation
    - - Symbolic trajectory evaluation
      - null
  notes/rust-language:
  - - notes/magic-wand
    - - Magic wand
      - null
  - - notes/mir-interpreter
    - - MIR interpreter (miri)
      - null
  - - notes/mir
    - - MIR
      - null
  - - notes/ownership-types
    - - Ownership types
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  - - notes/viper-verifier
    - - Viper verifier
      - null
  notes/rust-unsafe-code:
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  - - notes/undefined-behaviour
    - - Undefined behaviour
      - null
  notes/rustbelt-verifier: []
  notes/s2e-verifier: []
  notes/sage-verifier:
  - - notes/concolic-execution
    - - Concolic execution
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  notes/sail-language:
  - - notes/arm-architecture
    - - Arm architecture
      - null
  - - notes/dependent-type
    - - Dependent type
      - null
  - - notes/isa-specification
    - - ISA specification
      - null
  notes/sat-solver:
  - - notes/smt-solver
    - - SMT solver
      - null
  notes/saturn-verifier: []
  notes/savior:
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  notes/sdr: []
  notes/seahorn-verifier:
  - - notes/extended-static-checking
    - - Extended static checking (ESC)
      - null
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  notes/search-based-test-generation:
  - - notes/test-generation
    - - Test generation
      - null
  - - notes/unit-tests
    - - Unit tests
      - null
  notes/security:
  - - notes/differential-power-analysis
    - - Differential Power Analysis
      - null
  - - notes/side-channel
    - - Side Channel
      - null
  notes/self-composition:
  - - notes/information-flow
    - - Information flow
      - null
  notes/separation-logic:
  - - notes/biabduction
    - - Bi-abduction
      - null
  - - notes/concurrent-separation-logic
    - - Concurrent separation logic
      - null
  - - notes/fractional-permissions
    - - Fractional permissions
      - null
  - - notes/frame-rule
    - - Frame rule
      - null
  - - notes/implicit-dynamic-frames
    - - Implicit dynamic frames
      - null
  - - notes/magic-wand
    - - Magic wand
      - null
  - - notes/permission-accounting
    - - Permission accounting
      - null
  - - notes/permission-logic
    - - Permission logic
      - null
  - - notes/smallfoot-verifier
    - - Smallfoot verifier
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/verifast-verifier
    - - VeriFast verifier
      - null
  notes/serval-tool: []
  notes/shape-analysis:
  - - notes/separation-logic
    - - Separation logic
      - null
  notes/side-channel:
  - - notes/differential-power-analysis
    - - Differential Power Analysis
      - null
  - - notes/security
    - - Security
      - null
  notes/simd:
  - - notes/data-parallelism
    - - Data parallelism
      - null
  - - notes/mimd
    - - Multiple Instruction Multiple Data (MIMD)
      - null
  - - notes/parallelism
    - - Parallelism
      - null
  - - notes/simd
    - - Single Instruction Multiple Data (SIMD)
      - null
  - - notes/vector-architecture
    - - Vector architecture
      - null
  notes/sled:
  - - notes/isa-specification
    - - ISA specification
      - null
  notes/smack-verifier:
  - - notes/extended-static-checking
    - - Extended static checking (ESC)
      - null
  - - notes/rust-language
    - - Rust language
      - null
  - - notes/sv-competition
    - - Software Verification Competition (SV-COMP)
      - null
  notes/smallfoot-verifier:
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  notes/smt-lib-format:
  - - notes/smt-solver
    - - SMT solver
      - null
  notes/smt-solver:
  - - notes/cvc4-solver
    - - CVC4 solver
      - null
  - - notes/omega-library
    - - Omega library
      - null
  - - notes/sat-solver
    - - SAT solver
      - null
  - - notes/smt-lib-format
    - - SMT-LIB format
      - null
  - - notes/z3-solver
    - - Z3 theorem prover
      - null
  notes/softmax:
  - - notes/activation-function
    - - Activation function
      - null
  notes/sparse-model:
  - - notes/attention-function
    - - Attention function
      - null
  - - notes/xnnpack
    - - XNNPACK
      - null
  notes/spec-sharp-project:
  - - notes/boogie-verifier
    - - Boogie verifier
      - null
  notes/speculative-execution:
  - - notes/parallelism
    - - Parallelism
      - null
  notes/state-merging:
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/stochastic-gradient-descent: []
  notes/stream-processing:
  - - notes/decoupling
    - - Decoupling
      - null
  notes/superoptimizer: []
  notes/survey: []
  notes/sv-competition:
  - - notes/aorte
    - - Absence of RunTime Errors (AoRTE)
      - null
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  - - notes/cactus-plot
    - - Cactus plot / Survival plot
      - null
  - - notes/cpachecker-verifier
    - - CPAchecker verifier
      - null
  - - notes/extended-static-checking
    - - Extended static checking (ESC)
      - null
  - - notes/fql
    - - FShell Query Language (FQL)
      - null
  - - notes/test-competition
    - - Software Testing Competition (Test-Comp)
      - null
  notes/swarm-verification:
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  notes/symbolic-evaluation:
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/rosette-solver
    - - Rosette solver
      - null
  - - notes/state-merging
    - - State merging
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/symbolic-execution:
  - - notes/angr-verifier
    - - angr verifier
      - null
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/civl-verifier
    - - CIVL verifier
      - null
  - - notes/concolic-execution
    - - Concolic execution
      - null
  - - notes/cute-verifier
    - - CUTE verifier
      - null
  - - notes/dart-verifier
    - - DART verifier
      - null
  - - notes/driller-verifier
    - - Driller verifier
      - null
  - - notes/exe-verifier
    - - EXE symbolic executor
      - null
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  - - notes/klee-verifier
    - - KLEE verifier
      - null
  - - notes/mayhem
    - - Mayhem
      - null
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  - - notes/sage-verifier
    - - SAGE verifier
      - null
  - - notes/search-based-test-generation
    - - Search based test generation
      - null
  - - notes/separation-logic
    - - Separation logic
      - null
  - - notes/state-merging
    - - State merging
      - null
  - - notes/symbolic-evaluation
    - - Symbolic evaluation
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/symbolic-memory
    - - Symbolic memory
      - null
  - - notes/symcc
    - - SymCC
      - null
  - - notes/test-generation
    - - Test generation
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/symbolic-memory:
  - - notes/angr-verifier
    - - angr verifier
      - null
  notes/symbolic-model-checking: []
  notes/symbolic-trajectory-evaluation: []
  notes/symcc:
  - - notes/hybrid-testing
    - - Hybrid testing
      - null
  notes/systematization-of-knowledge: []
  notes/temporal-logic:
  - - notes/buchi-automaton
    - - "B\xFCchi automaton"
      - null
  - - notes/model-checking
    - - Model checking
      - null
  notes/tensor:
  - - notes/tensorflow
    - - TensorFlow
      - null
  - - notes/tpu
    - - Tensor Processing Unit (TPU)
      - null
  notes/tensorflow:
  - - notes/pytorch
    - - PyTorch
      - null
  - - notes/tensor
    - - Tensor
      - null
  - - notes/tpu
    - - Tensor Processing Unit (TPU)
      - null
  - - notes/xnnpack
    - - XNNPACK
      - null
  notes/test-case-reduction:
  - - notes/unit-tests
    - - Unit tests
      - null
  notes/test-competition: []
  notes/test-double:
  - - notes/dependency-injection
    - - Dependency injection
      - null
  - - notes/test-driven-development
    - - Test driven development
      - null
  - - notes/testability
    - - Testability
      - null
  notes/test-driven-development:
  - - notes/contract-driven-development
    - - Contract driven development
      - null
  - - notes/dependency-injection
    - - Dependency injection
      - null
  - - notes/test-double
    - - Test doubles (fakes, mocks and stubs)
      - null
  - - notes/testability
    - - Testability
      - null
  notes/test-generation:
  - - notes/test-generation
    - - Test generation
      - null
  - - notes/unit-tests
    - - Unit tests
      - null
  notes/testability:
  - - notes/dependency-injection
    - - Dependency injection
      - null
  - - notes/test-double
    - - Test doubles (fakes, mocks and stubs)
      - null
  - - notes/test-driven-development
    - - Test driven development
      - null
  notes/threads:
  - - notes/continuations
    - - Continuations
      - null
  - - notes/events
    - - Events
      - null
  - - notes/parallelism
    - - Parallelism
      - null
  notes/tpu: []
  notes/transformer-model:
  - - notes/attention-function
    - - Attention function
      - null
  notes/translation-validation:
  - - notes/compcert-compiler
    - - CompCert compiler
      - null
  - - notes/isa-specification
    - - ISA specification
      - null
  notes/tso: []
  notes/turing-award: []
  notes/type-inference:
  - - notes/dependent-type
    - - Dependent type
      - null
  notes/typed-assembly-language: []
  notes/undefined-behaviour:
  - - notes/frama-c-verifier
    - - Frama-C verifier
      - null
  - - notes/memory-safety
    - - Memory safety
      - null
  - - notes/mir-interpreter
    - - MIR interpreter (miri)
      - null
  - - notes/mir
    - - MIR
      - null
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  notes/under-approximation: []
  notes/unit-tests:
  - - notes/property-based-testing
    - - Property-based testing
      - null
  notes/usability: []
  notes/valgrind:
  - - notes/angr-verifier
    - - angr verifier
      - null
  notes/valgrind-tool:
  - - notes/bap-tool
    - - Binary Analysis Platform (BAP)
      - null
  - - notes/binary-instrumentation
    - - Binary instrumentation
      - null
  - - notes/dynamic-binary-translation
    - - Dynamic binary translation (DBT)
      - null
  notes/vcc-verifier: []
  notes/vector-architecture:
  - - notes/cray-architecture
    - - Cray architecture
      - null
  notes/verifast-verifier:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/auto-active-verification
    - - Auto active verification
      - null
  - - notes/separation-logic
    - - Separation logic
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  notes/verification: []
  notes/verification-competition: []
  notes/verification-condition-generator:
  - - notes/boogie-verifier
    - - Boogie verifier
      - null
  - - notes/viper-verifier
    - - Viper verifier
      - null
  notes/verification-performance:
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/verification-profiling:
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  notes/verified-compilers:
  - - notes/compcert-compiler
    - - CompCert compiler
      - null
  notes/verifier-performance:
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  notes/viper-verifier:
  - - notes/intermediate-verification-language
    - - Intermediate verification language
      - null
  - - notes/ownership-types
    - - Ownership types
      - null
  - - notes/permission-logic
    - - Permission logic
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  notes/vliw: []
  notes/weak-memory:
  - - notes/distributed-shared-memory
    - - Distributed Shared Memory
      - null
  - - notes/isa-specification
    - - ISA specification
      - null
  - - notes/memory-coherence
    - - Memory coherence
      - null
  - - notes/tso
    - - Total store order (TSO)
      - null
  notes/weakest-precondition: []
  notes/why3-verifier: []
  notes/x86-architecture:
  - - notes/instruction-set-architecture
    - - Instruction set architecture
      - null
  notes/xnnpack: []
  notes/z3-solver:
  - - notes/smt-lib-format
    - - SMT-LIB format
      - null
  - - notes/smt-solver
    - - SMT solver
      - null
  - - notes/vcc-verifier
    - - VCC verifier
      - null
  papers/aagaard:charme:2001: []
  papers/aagaard:fmcad:2000: []
  papers/abadi:arxiv:2016:
  - - notes/tensorflow
    - - TensorFlow
      - null
  papers/abadi:tcs:1991: []
  papers/abtahi:chi:2020: []
  papers/albin:cli:1995: []
  papers/alexopoulos:tps:2020: []
  papers/alglave:toplas:2014: []
  papers/alkassar:vstte:2010: []
  papers/alkassar:vstte:2012: []
  papers/almeida:security:2016: []
  papers/almohri:codaspy:2018: []
  papers/amadio:fpara:2014: []
  papers/amani:asplos:2016: []
  papers/ananda:osr:1992:
  - - notes/remote-procedure-call
    - - Remote procedure call (RPC)
      - null
  papers/anderson:icse:2016:
  - - notes/rust-language
    - - Rust language
      - null
  papers/andronick:icse:2012: []
  papers/angelini:vizsec:2019: []
  papers/armstrong:arw:2018: []
  papers/armstrong:cav:2021: []
  papers/armstrong:popl19:2019: []
  papers/armstrong:spisa:2019: []
  papers/asanovic:phd:1998: []
  papers/astrauskas:oopsla:2019:
  - - notes/magic-wand
    - - Magic wand
      - null
  - - notes/ownership-types
    - - Ownership types
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  - - notes/rust-language
    - - Rust language
      - null
  papers/astrauskas:oopsla:2020:
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  papers/avgerinos:cacm:2014:
  - - notes/automatic-exploit-generation
    - - Automatic exploit generation
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  papers/avgerinos:icse:2014:
  - - notes/bap-tool
    - - Binary Analysis Platform (BAP)
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  papers/azevedo:post:2018:
  - - notes/memory-safety
    - - Memory safety
      - null
  papers/babic:fse:2019: []
  papers/bader:vmcai:2018: []
  papers/balasubramanium:hotos:2017: []
  papers/baldoni:compsurv:2018:
  - - notes/smt-solver
    - - SMT solver
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  papers/ball:dsse:2015: []
  papers/ball:pldi:2001: []
  papers/bansal:asplos:2006:
  - - notes/superoptimizer
    - - Superoptimizer
      - null
  papers/bansal:osdi:2008:
  - - notes/superoptimizer
    - - Superoptimizer
      - null
  papers/baranova:atva:2017: []
  papers/baranowski:atva:2018:
  - - notes/rust-language
    - - Rust language
      - null
  - - notes/smack-verifier
    - - SMACK verifier
      - null
  papers/barbacci2:computer:1973: []
  papers/barbacci:afips:1977: []
  papers/barbacci:cmu:1972:
  - - notes/isps
    - - Instruction Set Processor (ISP)
      - null
  papers/barbacci:computer:1973: []
  papers/barbacci:computer:1977: []
  papers/barbacci:computer:1978: []
  papers/barbacci:dac:1979: []
  papers/barbacci:icse:1988: []
  papers/barbacci:ieee:1981:
  - - notes/isps
    - - Instruction Set Processor (ISP)
      - null
  papers/barbacci:ieeetc:1975: []
  papers/barbacci:ieeetc:1981: []
  papers/barbacci:isca:1973: []
  papers/barnett:cacm:2011: []
  papers/barnett:cassis:2004: []
  papers/barnett:fmco:2005: []
  papers/barnett:vstte:2005: []
  papers/barr:tse:2015: []
  papers/barrett:cade:2000:
  - - notes/smt-solver
    - - SMT solver
      - null
  papers/barrett:cav:2011:
  - - notes/cvc4-solver
    - - CVC4 solver
      - null
  papers/barrett:mlf:2015:
  - - notes/smt-solver
    - - SMT solver
      - null
  papers/barrett:smtlib:2016: []
  papers/barthe:csfw:2004: []
  papers/barthe:iacr:2007: []
  papers/barthe:mscs:2011: []
  papers/bastian:oopsla:2019: []
  papers/baudin:cacm:2021: []
  papers/bauereiss:ucam:2021: []
  papers/baumann:eucnc:2016: []
  papers/baumann:hotos:2017: []
  papers/becker:fm:2016:
  - - notes/nova-hypervisor
    - - NOVA hypervisor
      - null
  papers/becker:tacas:2019: []
  papers/beckmann:msc:2020: []
  papers/beingessner:msc:2015: []
  papers/bell:afips:1970:
  - - notes/isps
    - - Instruction Set Processor (ISP)
      - null
  papers/bell:book:1971:
  - - notes/isps
    - - Instruction Set Processor (ISP)
      - null
  papers/bell:cacm:2008: []
  papers/bell:procieee:2014: []
  papers/bembenek:oopsla:2020: []
  papers/berdine:aplas:2005: []
  papers/berdine:cav:2007: []
  papers/berdine:fmco:2005: []
  papers/bergan:oopsla:2014: []
  papers/bershad:cmpcon:1993: []
  papers/bevier:jar:1989: []
  papers/beyer:ase:2019:
  - - notes/test-competition
    - - Software Testing Competition (Test-Comp)
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  papers/beyer:cav:2011:
  - - notes/cpachecker-verifier
    - - CPAchecker verifier
      - null
  papers/beyer:hvc:2017: []
  papers/beyer:ijsttt:2006: []
  papers/beyer:ijsttt:2007:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  papers/beyer:sas:2004:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  papers/biere:tacas:1999: []
  papers/binder:cacm:1994: []
  papers/bird:sc:1993: []
  papers/birrell:tocs:1984:
  - - notes/remote-procedure-call
    - - Remote procedure call (RPC)
      - null
  papers/bishop:jacm:2019: []
  papers/blanchard:fmics:2015: []
  papers/blanqui:rapido:2011: []
  papers/blelloch:book:1990: []
  papers/blom:ijsttt:2015:
  - - notes/magic-wand
    - - Magic wand
      - null
  papers/blume:babel:2001: []
  papers/bodin:popl:2014:
  - - notes/javascript
    - - JavaScript programming language
      - null
  papers/boespflug:fdtc:2020: []
  papers/boettcher:date:2014: []
  papers/bohme2:fse:2020: []
  papers/bohme:fse:2020: []
  papers/bond:usenix:2017: []
  papers/boos:plos:2017: []
  papers/bornat:popl:2005:
  - - notes/fractional-permissions
    - - Fractional permissions
      - null
  - - notes/permission-accounting
    - - Permission accounting
      - null
  papers/bornholt:oopsla:2018:
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/symbolic-evaluation
    - - Symbolic evaluation
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  papers/boulton:tpcd:1993:
  - - notes/embedding
    - - Embedding
      - null
  papers/bowman:icfp:2015:
  - - notes/non-interference
    - - Non-interference
      - null
  papers/braione:icse:2018: []
  papers/bridges:micro:2007: []
  papers/brookes:tcs:2006: []
  papers/brown:asplos:2016: []
  papers/brown:sec:2020: []
  papers/bruel:compsurv:2021: []
  papers/brumley:cav:2011:
  - - notes/bap-tool
    - - Binary Analysis Platform (BAP)
      - null
  papers/brummayer:sat:2010:
  - - notes/smt-solver
    - - SMT solver
      - null
  papers/bryant:cmu:2018: []
  papers/burch:cav:1994: []
  papers/burke:lacl:2005: []
  papers/burton:toplas:1990: []
  papers/bush:atlantic:1945: []
  papers/bush:spe:2000: []
  papers/busse:issta:2020: []
  papers/cadar:cacm:2013:
  - - notes/klee-verifier
    - - KLEE verifier
      - null
  papers/cadar:fse:2015: []
  papers/cadar:osdi:2008:
  - - notes/klee-verifier
    - - KLEE verifier
      - null
  papers/cadar:tiss:2008:
  - - notes/exe-verifier
    - - EXE symbolic executor
      - null
  papers/calcagno:popl:2009:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/lazy-initialization
    - - Lazy initialization of symbolic values
      - null
  - - notes/modular-verification
    - - Modular verification
      - null
  - - notes/separation-logic
    - - Separation logic
      - null
  papers/calcagno:sas:2006:
  - - notes/separation-logic
    - - Separation logic
      - null
  papers/campbell:fmcad:2016: []
  papers/campbell:fmics:2014: []
  papers/cattell:phd:1978: []
  papers/cattell:toplas:1980: []
  papers/cha:sandp:2012:
  - - notes/mayhem
    - - Mayhem
      - null
  papers/chakravarty:haskffi:2003:
  - - notes/foreign-function-interface
    - - Foreign function interface
      - null
  papers/chalupa:tacas:2021: []
  papers/chang:tocs:2012: []
  papers/chatterjee:tacas:2007: []
  papers/chen:arxiv:2021: []
  papers/chen:iiswc:2019: []
  papers/chen:sp:2020: []
  papers/chipounov:asplos:2011:
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  papers/chipounov:hotdep:2009:
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  papers/chipounov:tcs:2012:
  - - notes/s2e-verifier
    - - S2E verifier
      - null
  papers/choi:icfp:2017: []
  papers/chong:asplos:2008: []
  papers/chong:icse:2020: []
  papers/chou:bugs:2005: []
  papers/chu:ieeedtc:1992: []
  papers/cifuentes:computer:2000: []
  papers/cifuentes:iwpc:1998: []
  papers/claessen:icfp:2000:
  - - notes/property-based-testing
    - - Property-based testing
      - null
  papers/claessen:sfm:2006:
  - - notes/symbolic-trajectory-evaluation
    - - Symbolic trajectory evaluation
      - null
  papers/clark:entcs:2002: []
  papers/clarke:cacm:2009:
  - - notes/model-checking
    - - Model checking
      - null
  - - notes/temporal-logic
    - - Temporal logic
      - null
  papers/clarke:cav:2000:
  - - notes/cegar
    - - CEGAR (Counter-Example Guided Abstraction Refinement)
      - null
  papers/clarke:oopsla:1998: []
  papers/clarke:tacas:2004:
  - - notes/cbmc-verifier
    - - CBMC verifier
      - null
  papers/clarke:wlop:1982: []
  papers/clarkson:jcs:2010: []
  papers/coblenz:arxiv:2020: []
  papers/cock:ccs:2014: []
  papers/cohen:cav:2010:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  papers/cohen:entcs:2009: []
  papers/cok:bugs:2005: []
  papers/condit:esop:2007: []
  papers/condit:popl:2009: []
  papers/conway:cacm:1963: []
  papers/conway:datamation:1968: []
  papers/cook:cav:2018: []
  papers/coppa:ase:2017:
  - - notes/angr-verifier
    - - angr verifier
      - null
  - - notes/symbolic-memory
    - - Symbolic memory
      - null
  papers/coquand:eurocal:1985: []
  papers/corbett:tocs:2013: []
  papers/corteggiani:usenix:2018: []
  papers/costanzo:pldi:2016:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/non-interference
    - - Non-interference
      - null
  papers/cousot:oopsla:2012: []
  papers/cui:asplos:2013: []
  papers/cuoq:sefm:2012:
  - - notes/frama-c-verifier
    - - Frama-C verifier
      - null
  papers/curtsinger:cacm:2018: []
  papers/dabek:sigops:2002: []
  papers/dai:pldi:2005: []
  papers/dam:ieeetc:1981: []
  papers/dam:ted:2013: []
  papers/dam:trusted:2013: []
  papers/damm:fmoods:1999: []
  papers/daniel:sandp:2020: []
  papers/dasgupta:pldi:2019: []
  papers/dasgupta:pldi:2020:
  - - notes/mcsema-tool
    - - McSema binary lifter
      - null
  - - notes/remill-library
    - - Remill binary lifting library
      - null
  papers/david:issta:2016: []
  papers/dean:cacm:2013: []
  papers/degenbaev:phd:2012: []
  papers/deline:pldi:2001: []
  papers/demoura:cacm:2011: []
  papers/demoura:cade:2015: []
  papers/demoura:tacas:2008:
  - - notes/z3-solver
    - - Z3 theorem prover
      - null
  papers/deng:hasp:2019: []
  papers/denis:hal:2020: []
  papers/denning:cacm:1976: []
  papers/dias:popl:2010: []
  papers/dimjasevic:ifm:2018: []
  papers/dinsdale-young:popl:2013: []
  papers/distefano:cacm:2019: []
  papers/distefano:tacas:2006: []
  papers/dixit:arxiv:2021: []
  papers/djordjevic:cj:1985: []
  papers/draves:sosp:1991:
  - - notes/continuations
    - - Continuations
      - null
  papers/du:sc:2003: []
  papers/dunkels:enss:2006: []
  papers/dutra:icse:2018: []
  papers/edwards:icrs:1975: []
  papers/efstathopoulos:sosp:2005: []
  papers/eide:aspse:2001: []
  papers/eide:icse:2002: []
  papers/elsen:arxiv:2019:
  - - notes/xnnpack
    - - XNNPACK
      - null
  papers/engler:issta:2007:
  - - notes/exe-verifier
    - - EXE symbolic executor
      - null
  - - notes/lazy-initialization
    - - Lazy initialization of symbolic values
      - null
  papers/erbsen:pldi:2021: []
  papers/ernst:icse:2016: []
  papers/evans:icse:2020:
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  papers/evci:arxiv:2021: []
  papers/evtyushkin:asplos:2021: []
  papers/fahndrich:foveoos:2010:
  - - notes/contract-driven-development
    - - Contract driven development
      - null
  papers/falkoff:ibm:1964: []
  papers/fauth:edtc:1995: []
  papers/fedus:arxiv:2021: []
  papers/fernandez:icse:1997: []
  papers/ferraiuolo:asplos:2017: []
  papers/ferraiuolo:ccs:2018: []
  papers/ferraiuolo:dac:2017: []
  papers/ferraiuolo:sosp:2017:
  - - notes/non-interference
    - - Non-interference
      - null
  papers/filliatre:cav:2007: []
  papers/filliatre:esop:2013: []
  papers/filliatre:fem:2004: []
  papers/finne:icfp:1999:
  - - notes/foreign-function-interface
    - - Foreign function interface
      - null
  papers/fioraldi:arxiv:2020: []
  papers/fischer:ase:2013: []
  papers/fisher:isca:1983: []
  papers/fluet:jfp:2006:
  - - notes/phantom-types
    - - Phantom types
      - null
  papers/flur:popl:2016: []
  papers/flur:popl:2017: []
  papers/flynn:ieeeproc:1966:
  - - notes/data-parallelism
    - - Data parallelism
      - null
  - - notes/mimd
    - - Multiple Instruction Multiple Data (MIMD)
      - null
  - - notes/parallelism
    - - Parallelism
      - null
  - - notes/simd
    - - Single Instruction Multiple Data (SIMD)
      - null
  papers/fonseca:ecs:2017: []
  papers/fox:cambridge:2001: []
  papers/fox:cpp:2017: []
  papers/fox:itp:2010: []
  papers/fox:itp:2012:
  - - notes/l3
    - - L3 specification language
      - null
  papers/fox:itps:2015: []
  papers/fox:tphols:2003: []
  papers/fox:ucam:2002: []
  papers/franklin:cmu:2008: []
  papers/fraser:sigart:1977: []
  papers/freedman:tse:1991: []
  papers/frias:icse:2005: []
  papers/furr:pldi:2005: []
  papers/fuxman:isre:2001: []
  papers/gale:arxiv:2019: []
  papers/gale:arxiv:2020: []
  papers/galea:arxiv:2018:
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verification-profiling
    - - Verification profiling of code
      - null
  papers/garg:icse:2013: []
  papers/gay:pldi:2003: []
  papers/ge:jce:2016:
  - - notes/side-channel
    - - Side Channel
      - null
  papers/gennari:vstte:2018: []
  papers/gleissenthall:ccs:2021: []
  papers/godefroid:acmq:2012:
  - - notes/sage-verifier
    - - SAGE verifier
      - null
  papers/godefroid:bugs:2005: []
  papers/godefroid:cacm:2020:
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  - - notes/sage-verifier
    - - SAGE verifier
      - null
  papers/godefroid:icse:2014: []
  papers/godefroid:pldi:2005:
  - - notes/dart-verifier
    - - DART verifier
      - null
  papers/godefroid:pldi:2012: []
  papers/godefroid:popl:2010: []
  papers/goel:acl2:2013: []
  papers/goel:cav:2021: []
  papers/goel:cpp:2020: []
  papers/goel:fmcad:2014: []
  papers/goel:pcs:2017: []
  papers/goel:phd:2016: []
  papers/goel:spisa:2019: []
  papers/goguen:secpriv:1982:
  - - notes/non-interference
    - - Non-interference
      - null
  papers/goguen:secpriv:1984:
  - - notes/non-interference
    - - Non-interference
      - null
  papers/goodman:ndss:2018:
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  papers/gordon:asplos:2002: []
  papers/gordon:book:1993:
  - - notes/hol-theorem-prover
    - - HOL theorem prover
      - null
  papers/gorse:msc:2020: []
  papers/gray:micro:2015: []
  papers/green:pandc:1990: []
  papers/green:tutorial:1998: []
  papers/greve:fmcad:1998: []
  papers/groce:issta:2012:
  - - notes/swarm-verification
    - - Swarm verification
      - null
  papers/groce:issta:2017:
  - - notes/test-case-reduction
    - - Test-case reduction
      - null
  papers/gross:micro:2016: []
  papers/grossman:esop:2002: []
  papers/grossman:pldi:2002: []
  papers/gu:osdi:2016:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  papers/guanciale:ccs:2020: []
  papers/guarnieri:sandp:2020: []
  papers/gurfinkel:cav:2015:
  - - notes/seahorn-verifier
    - - SeaHorn verifier
      - null
  papers/gurfinkel:fmcad:2017: []
  papers/guyer:dsl:1999: []
  papers/hadjilambrou:ispass:2019: []
  papers/hardin:acl2:2006: []
  papers/hatcliff:compsurv:2012: []
  papers/hawblitzel:osdi:2014: []
  papers/hedge:micro:2019: []
  papers/heelan:msc:2009:
  - - notes/automatic-exploit-generation
    - - Automatic exploit generation
      - null
  papers/heelan:sec:2018:
  - - notes/automatic-exploit-generation
    - - Automatic exploit generation
      - null
  papers/hehner:vstte:2008:
  - - notes/loop-invariant
    - - Loop invariant
      - null
  papers/hendrix:itp:2019: []
  papers/hennessy:book:2011: []
  papers/hennessy:micro:1982: []
  papers/henzinger:spin:2003: []
  papers/hertz:oopsla:2005: []
  papers/heule:ftfjp:2011:
  - - notes/chalice-verifier
    - - Chalice verifier
      - null
  - - notes/fractional-permissions
    - - Fractional permissions
      - null
  - - notes/permission-accounting
    - - Permission accounting
      - null
  papers/heule:pldi:2016: []
  papers/heule:vmcai:2013: []
  papers/higgins:hldvt:2004: []
  papers/hobor:popl:2013: []
  papers/hochschild:hotos:2021: []
  papers/hohmuth:plos:2005: []
  papers/hohmuth:sigops:2002: []
  papers/holzer:cav:2008:
  - - notes/fql
    - - FShell Query Language (FQL)
      - null
  papers/holzer:hvc:2010:
  - - notes/fql
    - - FShell Query Language (FQL)
      - null
  papers/holzmann:ieeetse:2011:
  - - notes/case-splitting
    - - Case splitting
      - null
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  papers/hritcu:icfp:2013: []
  papers/hsiao:micro:2021: []
  papers/huang:todaes:2019: []
  papers/hunt:jar:1989: []
  papers/hunt:lncs:1994: []
  papers/hunt:micro:1999: []
  papers/ivankovic:fse:2019: []
  papers/jackson:tosem:2002: []
  papers/jacobs:nfm:2011:
  - - notes/verifast-verifier
    - - VeriFast verifier
      - null
  papers/jacobs:vstte:2010:
  - - notes/verifast-verifier
    - - VeriFast verifier
      - null
  papers/jaffar:arxiv:2020: []
  papers/jensen:popl:2013: []
  papers/jhala:cav:2001: []
  papers/jhala:compsurv:2009:
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  - - notes/model-checking
    - - Model checking
      - null
  papers/jia:ieeetse:2010:
  - - notes/mutation-testing
    - - Mutation testing
      - null
  papers/jiang:arxiv:2021: []
  papers/jin:icst:2010: []
  papers/johnson:icse:2013: []
  papers/johnson:osr:1995: []
  papers/joloboff:dsetta:2015: []
  papers/jones:hasklang:1999: []
  papers/jones:hasklib:1999: []
  papers/jones:hw:1997:
  - - notes/foreign-function-interface
    - - Foreign function interface
      - null
  papers/jones:microsoft:2001: []
  papers/jones:pldi:1999: []
  papers/joshi:pldi:2002: []
  papers/jouppi:isca:2017:
  - - notes/tpu
    - - Tensor Processing Unit (TPU)
      - null
  papers/jouppi:micro:2018: []
  papers/jung:cacm:2021: []
  papers/jung:popl:2017:
  - - notes/rust-language
    - - Rust language
      - null
  - - notes/rustbelt-verifier
    - - RustBelt verifier
      - null
  papers/jung:popl:2020:
  - - notes/mir-interpreter
    - - MIR interpreter (miri)
      - null
  - - notes/mir
    - - MIR
      - null
  - - notes/ownership-types
    - - Ownership types
      - null
  - - notes/rust-language
    - - Rust language
      - null
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  papers/kaivola:cav:2009: []
  papers/kapus:fse:2019: []
  papers/kassios:fm:2006: []
  papers/kaufmann:ieeetse:1997: []
  papers/kaufmann:utaustin:2012: []
  papers/kennedy:ppdp:2013: []
  papers/khakpour:cpp:2013: []
  papers/khurshid:tacas:2003:
  - - notes/lazy-initialization
    - - Lazy initialization of symbolic values
      - null
  papers/kiczales:iwoos:1991: []
  papers/kim:isca:2014: []
  papers/kirankumar:fmcad:2012: []
  papers/kjolstad:oopsla:2017: []
  papers/klabnik:book:2018: []
  papers/klein:sosp:2009:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  papers/kocher:arxiv:2018: []
  papers/kocher:crypto:1999:
  - - notes/differential-power-analysis
    - - Differential Power Analysis
      - null
  papers/korencik:qrs:2020: []
  papers/kostyukov:pldi:2021: []
  papers/kozyrakis:phd:2002: []
  papers/krishnamurthi:fm:2019: []
  papers/krishnamurthi:snapl:2019: []
  papers/krishnaswami:tldi:2010: []
  papers/kroening:dac:2001: []
  papers/kroening:itg:2000: []
  papers/krohn:sosp:2007: []
  papers/kuhne:fmcad:2010: []
  papers/kumar:isca:2004: []
  papers/kumar:popl:2014:
  - - notes/verified-compilers
    - - Verified compilers
      - null
  papers/kupferman:concur:2006:
  - - notes/mutation-testing
    - - Mutation testing
      - null
  papers/kuznetsov:pldi:2012:
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  papers/lahiri:cav:2003: []
  papers/lahiri:hldvt:2001: []
  papers/lal:cav:2012: []
  papers/lal:fse:2014: []
  papers/lal:pldi:2015: []
  papers/lattner:cgo:2004: []
  papers/lauer:osr:1979:
  - - notes/continuations
    - - Continuations
      - null
  - - notes/threads
    - - Threads
      - null
  papers/lauinger:trustcom:2020: []
  papers/lee:micro:1996: []
  papers/legoues:sefm:2011:
  - - notes/intermediate-verification-language
    - - Intermediate verification language
      - null
  papers/leinenbach:fm:2009: []
  papers/leino:fosad:2007: []
  papers/leino:icse:2013:
  - - notes/dafny-verifier
    - - Dafny verifier
      - null
  papers/leino:informatics:2001: []
  papers/leino:lpair:2010: []
  papers/leino:sac:2009: []
  papers/leino:tacas:2010: []
  papers/lepikhin:arxiv:2020: []
  papers/leroy:cacm:2009:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/compcert-compiler
    - - CompCert compiler
      - null
  - - notes/verified-compilers
    - - Verified compilers
      - null
  papers/levy:apsys:2017:
  - - notes/rust-language
    - - Rust language
      - null
  papers/levy:plos:2015: []
  papers/levy:sosp:2017: []
  papers/li:sandp:2021: []
  papers/li:tocs:1989:
  - - notes/distributed-shared-memory
    - - Distributed Shared Memory
      - null
  - - notes/memory-coherence
    - - Memory coherence
      - null
  papers/li:usenix:2021: []
  papers/lie:secpri:2003: []
  papers/lie:sosp:2003: []
  papers/lietar:ismm:2019: []
  papers/liew:fse:2019: []
  papers/lim:toplas:2013: []
  papers/lin:sdr:2006: []
  papers/lin:sips:2006: []
  papers/lindner:indin:2018: []
  papers/lindner:indin:2019: []
  papers/lipp:arxiv:2018: []
  papers/liu:arxiv:2021: []
  papers/liu:cpsspc:2018: []
  papers/liu:icse:2020: []
  papers/liu:sigcomm:2018: []
  papers/lockhart:ispass:2015: []
  papers/logozzo:vmcai:2011:
  - - notes/contract-driven-development
    - - Contract driven development
      - null
  papers/loow:pldi:2019: []
  papers/lopes:pldi:2015: []
  papers/lopes:pldi:2021: []
  papers/lowe:csfw:2015: []
  papers/lustig:asplos:2016: []
  papers/ma:securecomm:2015: []
  papers/maas:asplos:2020: []
  papers/maciver:ecoop:2020:
  - - notes/test-case-reduction
    - - Test-case reduction
      - null
  papers/macvean:ppig:2016: []
  papers/mai:asplos:2013: []
  papers/majumdar:icse:2007: []
  papers/malik:cacm:2009:
  - - notes/sat-solver
    - - SAT solver
      - null
  papers/manes:ieeetse:2019:
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  papers/mangano:crisis:2016:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  papers/mansur:arxiv:2020:
  - - notes/smt-solver
    - - SMT solver
      - null
  papers/mantel:pls:2007: []
  papers/mantel:sp:2001: []
  papers/marco:cav:2021: []
  papers/martignoni:asplos:2012: []
  papers/martin:isca:2012: []
  papers/massalin:asplos:1987:
  - - notes/superoptimizer
    - - Superoptimizer
      - null
  papers/matsakis:hilt:2014: []
  papers/matsushita:esop:2020: []
  papers/maus:amast:2008: []
  papers/mavin:isre:2009: []
  papers/mcbride:jfp:2002: []
  papers/mcilroy:arxiv:2019: []
  papers/mcmillan:cav:1998:
  - - notes/symbolic-model-checking
    - - Symbolic model checking
      - null
  papers/mcmillan:ecs:2003:
  - - notes/model-checking
    - - Model checking
      - null
  papers/mcmillan:sigcomm:2019: []
  papers/mechtaev:fse:2018: []
  papers/merz:vstte:2012: []
  papers/miller:cacm:1990:
  - - notes/fuzz-testing
    - - Fuzz testing
      - null
  papers/milner:jcss:1978: []
  papers/milushev:forte:2012: []
  papers/mishra:book:2008: []
  papers/monteiro:arxiv:2019: []
  papers/morrisett:pldi:2012: []
  papers/morrisett:wcsss:1999:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  - - notes/typed-assembly-language
    - - Typed assembly language
      - null
  papers/mukherjee:oopsla:2020: []
  papers/muller:vmcai:2016: []
  papers/mulligan:icfp:2014: []
  papers/murray:secdev:2018: []
  papers/murray:secpriv:2013: []
  papers/mycroft:esop:1999:
  - - notes/typed-assembly-language
    - - Typed assembly language
      - null
  papers/myers:computer:2016: []
  papers/myers:csfw:2004: []
  papers/myreen:fse:2007: []
  papers/myreen:itp:2011: []
  papers/myreen:itp:2012: []
  papers/myreen:popl:2010: []
  papers/myreen:tphols:2009: []
  papers/naik:popl:2012: []
  papers/nanevski:icfp:2008: []
  papers/nanevski:oopsla:2019: []
  papers/narayanan:hotos:2019: []
  papers/naumann:fmco:2004: []
  papers/necula:cc:2002:
  - - notes/blast-verifier
    - - BLAST verifier
      - null
  - - notes/cil-tool
    - - CIL tool
      - null
  - - notes/cpachecker-verifier
    - - CPAchecker verifier
      - null
  papers/necula:pldi:2000:
  - - notes/translation-validation
    - - Translation validation
      - null
  papers/necula:popl:1997:
  - - notes/proof-carrying-code
    - - Proof carrying code
      - null
  papers/nelson:sosp:2017: []
  papers/nelson:sosp:2019:
  - - notes/auto-active-verification
    - - Auto active verification
      - null
  - - notes/bounded-model-checking
    - - Bounded model-checking
      - null
  - - notes/non-interference
    - - Non-interference
      - null
  - - notes/rosette-solver
    - - Rosette solver
      - null
  - - notes/serval-tool
    - - Serval solver-based verifier
      - null
  - - notes/symbolic-evaluation
    - - Symbolic evaluation
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  papers/nethercote:pldi:2007:
  - - notes/valgrind
    - - Valgrind
      - null
  papers/nicole:arxiv:2020: []
  papers/niemetz:jsat:2015: []
  papers/nienhuis:secpriv:2020:
  - - notes/capabilities
    - - Capabilities
      - null
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  papers/nipkow:book:2002: []
  papers/noonan:pldi:2016: []
  papers/nordholz:eurosys:2020: []
  papers/nyxbrain:sc2:2017: []
  papers/oberg:dac:2010: []
  papers/ohearn:cacm:2019: []
  papers/ohearn:popl:2019: []
  papers/ohearn:tcs:2007: []
  papers/ousterhout:usenix:1996:
  - - notes/events
    - - Events
      - null
  - - notes/threads
    - - Threads
      - null
  papers/ozer:sbacpad:2007: []
  papers/padhye:issta:2019: []
  papers/padhye:oopsla:2019: []
  papers/palacharla:micro:1995:
  - - notes/decoupling
    - - Decoupling
      - null
  papers/pandey:issta:2019: []
  papers/papadakis:advances:2019:
  - - notes/mutation-testing
    - - Mutation testing
      - null
  papers/papaevripides:acmtps:2021: []
  papers/parkinson:popl:2005: []
  papers/patterson:cacm:1985:
  - - notes/risc-architecture
    - - RISC architecture
      - null
  papers/patterson:sigarch:1980:
  - - notes/risc-architecture
    - - RISC architecture
      - null
  papers/pdp11:book:1973: []
  papers/pearce:compsurv:2013: []
  papers/peleg:micro:1996: []
  papers/penninckx:nfm:2012:
  - - notes/verifast-verifier
    - - VeriFast verifier
      - null
  papers/person:fse:2008: []
  papers/peterson:hw:1995: []
  papers/peterson:padl:2001: []
  papers/philippaerts:scp:2014:
  - - notes/verifast-verifier
    - - VeriFast verifier
      - null
  papers/pierce:book:2016: []
  papers/pnueli:sfcs:1977:
  - - notes/temporal-logic
    - - Temporal logic
      - null
  papers/pnueli:tacas:1998:
  - - notes/translation-validation
    - - Translation validation
      - null
  papers/poeplau:acsac:2019: []
  papers/poeplau:usenix:2020:
  - - notes/symcc
    - - SymCC
      - null
  papers/potvin:cacm:2016: []
  papers/pulte:popl:2017: []
  papers/qin:hpca:2020: []
  papers/qin:pldi:2020:
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  papers/qiu:icse:2017:
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  papers/qiu:nfm:2018:
  - - notes/verifier-performance
    - - Verifier performance
      - null
  papers/rakamaric:cav:2014:
  - - notes/smack-verifier
    - - SMACK verifier
      - null
  papers/ramos:cav:2011: []
  papers/ramos:sec:2015:
  - - notes/lazy-initialization
    - - Lazy initialization of symbolic values
      - null
  papers/ramsey:lctes:1998: []
  papers/ramsey:toplas:1997: []
  papers/rath:epiq:2018: []
  papers/recoules:ase:2019: []
  papers/regehr:acp4is:2003: []
  papers/regehr:asplos:2004: []
  papers/regehr:emsoft:2003: []
  papers/regehr:lctes:2006: []
  papers/regehr:pldi:2012:
  - - notes/test-case-reduction
    - - Test-case reduction
      - null
  papers/regehr:rtss:2003: []
  papers/regehr:tecs:2005: []
  papers/reid:cases:2008: []
  papers/reid:cav:2016:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  papers/reid:fmcad:2016:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  papers/reid:gfpw:1989: []
  papers/reid:gfpw:1993: []
  papers/reid:gfpw:1994: []
  papers/reid:hatra:2020: []
  papers/reid:hw:1995: []
  papers/reid:icse:1999: []
  papers/reid:ifl:1998: []
  papers/reid:msc:1993: []
  papers/reid:oopsla:2017:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  papers/reid:osdi:2000: []
  papers/reid:phd:2019:
  - - notes/asl
    - - Arm Architecture Specification Language (ASL)
      - null
  papers/reid:yale:1998: []
  papers/reid:yale:2001: []
  papers/remy:popl:1989: []
  papers/reppy:att:1996: []
  papers/reynolds:lics:2002: []
  papers/rieman:chi:1995: []
  papers/roessle:cpp:2019: []
  papers/romano:phd:2014: []
  papers/rondon:pldi:2008:
  - - notes/liquid-type
    - - Liquid type
      - null
  papers/roy:fse:2018: []
  papers/rozier:vstte:2016: []
  papers/rudra:sosp:2021: []
  papers/rushby:sri:1992:
  - - notes/non-interference
    - - Non-interference
      - null
  papers/russell:cacm:1978:
  - - notes/cray-architecture
    - - Cray architecture
      - null
  papers/russinovich:acmq:2021: []
  papers/rutledge:icse:2019: []
  papers/rutledge:icse:2020: []
  papers/sabelfield:jcs:2009: []
  papers/sadowski:cacm:2018: []
  papers/sadowski:icse-seip:2018: []
  papers/sadowski:icse:2015: []
  papers/samet:ieeetse:1977:
  - - notes/verified-compilers
    - - Verified compilers
      - null
  papers/samet:phd:1975:
  - - notes/translation-validation
    - - Translation validation
      - null
  - - notes/verified-compilers
    - - Verified compilers
      - null
  papers/sammler:pldi:2021: []
  papers/sardar:access:2021: []
  papers/sarkar:pldi:2011: []
  papers/sarkar:popl:2009: []
  papers/schemmel:cav:2020: []
  papers/schmaltz:vstte:2012: []
  papers/schwartz:sp:2010: []
  papers/schwarz:sefm:2016: []
  papers/schwerhoff:ecoop:2015:
  - - notes/magic-wand
    - - Magic wand
      - null
  - - notes/prusti-verifier
    - - Prusti verifier
      - null
  papers/seal:book:2000: []
  papers/segar:fmsd:1995:
  - - notes/symbolic-trajectory-evaluation
    - - Symbolic trajectory evaluation
      - null
  papers/sen:fse:2005:
  - - notes/cute-verifier
    - - CUTE verifier
      - null
  papers/seshadri:sosp:2007: []
  papers/sevcik:jacm:2013: []
  papers/sewell:cacm:2010:
  - - notes/tso
    - - Total store order (TSO)
      - null
  papers/sewell:pldi:2013: []
  papers/shamis:arxiv:2021: []
  papers/sharma:oopsla:2012: []
  papers/sharma:pls:2013: []
  papers/shazeer:arxiv:2017:
  - - notes/mixture-of-experts
    - - Mixture of experts
      - null
  papers/sheeran:fmcad:2000: []
  papers/shi:phd:2013: []
  papers/shoshitaishvili:sandp:2016: []
  papers/shoshitaishvili:sp:2016:
  - - notes/systematization-of-knowledge
    - - Systematization of Knowledge (SoK)
      - null
  papers/siddiqui:oopsla:2012:
  - - notes/swarm-verification
    - - Swarm verification
      - null
  - - notes/symbolic-execution
    - - Symbolic execution
      - null
  - - notes/verification-performance
    - - Verification performance of code
      - null
  - - notes/verifier-performance
    - - Verifier performance
      - null
  papers/siegel:sc:2015: []
  papers/sigurbjarnarson:osdi:2016: []
  papers/sigurbjarnarson:osdi:2018: []
  papers/silva:sbac:2016: []
  papers/simner:pls:2020: []
  papers/skorstengaard:esop:2018:
  - - notes/capabilities
    - - Capabilities
      - null
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  papers/skorstengaard:popl:2019:
  - - notes/capabilities
    - - Capabilities
      - null
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  papers/slobodova:memocode:2011: []
  papers/smans:ecoop:2009: []
  papers/smans:fmood:2010: []
  papers/smetters:nspw:2002: []
  papers/smith:book:1996: []
  papers/smith:esop:2000: []
  papers/smith:fossacs:2009: []
  papers/smith:tocs:1984:
  - - notes/decoupling
    - - Decoupling
      - null
  papers/spencer:security:1999: []
  papers/srinivasan:ieeetoc:2010: []
  papers/stephens:micro:2017: []
  papers/stephens:ndss:2016:
  - - notes/driller-verifier
    - - Driller verifier
      - null
  papers/stewart:difts:2014: []
  papers/stojmenovic:tpds:2010: []
  papers/stump:fmsd:2013:
  - - notes/smt-solver
    - - SMT solver
      - null
  papers/su:computer:1974: []
  papers/subhlok:ppopp:1993: []
  papers/sutcliffe:ai:2001: []
  papers/syeda:itp:2018: []
  papers/systemverilog:ieee:2013:
  - - notes/rtl
    - - RTL
      - null
  papers/szekeres:sandp:2013:
  - - notes/memory-safety
    - - Memory safety
      - null
  papers/tahat:fmcad:2019: []
  papers/tan:icfp:2016: []
  papers/tang:sec:2017: []
  papers/tanter:aosd:2010: []
  papers/tao:sosp:2021: []
  papers/thies:micro:2007: []
  papers/thies:ppopp:2005: []
  papers/tillmann:fse:2005: []
  papers/tiwari:asplos:2009: []
  papers/tiwari:isca:2009:
  - - notes/non-interference
    - - Non-interference
      - null
  papers/tiwari:isca:2011: []
  papers/tofte:inco:1997: []
  papers/toman:ase:2015:
  - - notes/rust-language
    - - Rust language
      - null
  papers/torlak:onward:2013:
  - - notes/rosette-solver
    - - Rosette solver
      - null
  papers/torlak:pldi:2014:
  - - notes/rosette-solver
    - - Rosette solver
      - null
  papers/trabish:icse:2018:
  - - notes/verifier-performance
    - - Verifier performance
      - null
  papers/trabish:issta:2020: []
  papers/tremblay:micro:1996: []
  papers/trtik:atva:2014: []
  papers/tschantz:fm:2009: []
  papers/tuerk:vstte:2010:
  - - notes/loop-invariant
    - - Loop invariant
      - null
  papers/ullrich:msc:2016: []
  papers/vanegue:sandp:2013: []
  papers/vanhattum:asplos:2021: []
  papers/vantonder:icse:2018: []
  papers/vasudevan:secpriv:2013: []
  papers/vasudevan:usenix:2016:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  papers/vaswani:arxiv:2017:
  - - notes/attention-function
    - - Attention function
      - null
  - - notes/transformer-model
    - - Transformer machine learning model
      - null
  papers/vega:pldi:2021: []
  papers/veldhuizen:oo:1998: []
  papers/velev:dac:2000: []
  papers/verbeek:fmmsd:2019: []
  papers/vila:pldi:2020: []
  papers/visser:tacas:2020: []
  papers/vogels:fmoods:2011:
  - - notes/annotation-burden
    - - Annotation burden
      - null
  papers/vonbehren:hotos:2003:
  - - notes/events
    - - Events
      - null
  - - notes/threads
    - - Threads
      - null
  papers/votipka:sp:2018: []
  papers/wagner:hotos:2013:
  - - notes/verifier-performance
    - - Verifier performance
      - null
  papers/walker:popl:2000: []
  papers/walker:tic:2001:
  - - notes/ownership-types
    - - Ownership types
      - null
  papers/wand:lfp:1980: []
  papers/wand:lics:1987: []
  papers/wang:pldi:2007: []
  papers/wang:sosp:2013:
  - - notes/rust-unsafe-code
    - - Rust unsafe code
      - null
  - - notes/undefined-behaviour
    - - Undefined behaviour
      - null
  papers/wang:tase:2018: []
  papers/watson:sandp:2015:
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  papers/weigl:arxiv:2019: []
  papers/weiss:arxiv:2018: []
  papers/weitz:icfp:2017:
  - - notes/rosette-solver
    - - Rosette solver
      - null
  papers/wickerson:popl:2017: []
  papers/willsey:popl:2021: []
  papers/windley:ieeetoc:1995: []
  papers/woh:micro:2008: []
  papers/wolf:codes:2004: []
  papers/wolff:draft:2021: []
  papers/woodruff:isca:2014:
  - - notes/capabilities
    - - Capabilities
      - null
  - - notes/cheri-architecture
    - - CHERI architecture
      - null
  papers/woodruff:tocs:2019: []
  papers/wright:icsm:2013: []
  papers/wu:arxiv:2017: []
  papers/xi:icfp:2001: []
  papers/xi:jfp:2007: []
  papers/xie:bugs:2005: []
  papers/xie:popl:2005:
  - - notes/lazy-initialization
    - - Lazy initialization of symbolic values
      - null
  papers/xu:arxiv:2021: []
  papers/xu:cav:2021: []
  papers/yang:issta:2012: []
  papers/yang:pldi:2010: []
  papers/yang:pldi:2011: []
  papers/yanovski:unknown:2021: []
  papers/yun:usenix:2018:
  - - notes/qsym
    - - QSYM verifier
      - null
  papers/zaostrovnykh:sosp:2019: []
  papers/zdancewic:csfw:2001: []
  papers/zdancewic:csfw:2003: []
  papers/zeldovich:osdi:2006: []
  papers/zeller:bugs:2005: []
  papers/zhang:apsec:2018: []
  papers/zhang:asplos:2015: []
  papers/zhang:ccs:2020: []
  papers/zhang:fmcad:2018: []
  papers/zhang:issta:2014: []
  papers/zhang:toplas:2017: []
  papers/zhao:ndss:2019: []
  papers/zhuang:pldi:2006: []
  papers/zivojnovic:vlsi:1996:
  - - notes/lisa
    - - LISA
      - null
  papers/zorn:iscawddd:2017: []
papers:
  notes/abstract-interpretation:
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/calcagno:sas:2006
    - - 'Beyond reachability: Shape abstraction in the presence of pointer arithmetic'
      - calcagno:sas:2006
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/cousot:oopsla:2012
    - - An abstract interpretation framework for refactoring with application to extract
        methods with contracts
      - cousot:oopsla:2012
  - - papers/cuoq:sefm:2012
    - - 'Frama-C: A software analysis perspective'
      - cuoq:sefm:2012
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  - - papers/fahndrich:foveoos:2010
    - - Static contract checking with abstract interpretation
      - fahndrich:foveoos:2010
  - - papers/gurfinkel:cav:2015
    - - The SeaHorn verification framework
      - gurfinkel:cav:2015
  - - papers/lim:toplas:2013
    - - 'TSL: A system for generating abstract interpreters and its application to
        machine-code analysis'
      - lim:toplas:2013
  - - papers/mai:asplos:2013
    - - Verifying security invariants in ExpressOS
      - mai:asplos:2013
  - - papers/mukherjee:oopsla:2020
    - - Dataflow-based pruning for speeding up superoptimization
      - mukherjee:oopsla:2020
  - - papers/regehr:asplos:2004
    - - 'HOIST: a system for automatically deriving static analyzers for embedded
        systems'
      - regehr:asplos:2004
  - - papers/regehr:emsoft:2003
    - - Eliminating stack overflow by abstract interpretation
      - regehr:emsoft:2003
  - - papers/regehr:lctes:2006
    - - Deriving abstract transfer functions for analyzing embedded software
      - regehr:lctes:2006
  - - papers/regehr:tecs:2005
    - - Eliminating stack overflow by abstract interpretation
      - regehr:tecs:2005
  notes/acl2-theorem-prover:
  - - papers/goel:acl2:2013
    - - Abstract stobjs and their application to ISA modeling
      - goel:acl2:2013
  - - papers/goel:fmcad:2014
    - - Simulation and formal verification of x86 machine-code programs that make
        system calls
      - goel:fmcad:2014
  - - papers/goel:pcs:2017
    - - Engineering a formal, executable x86 ISA simulator for software verification
      - goel:pcs:2017
  - - papers/goel:phd:2016
    - - Formal verification of application and system programs based on a validated
        x86 ISA model
      - goel:phd:2016
  - - papers/hardin:acl2:2006
    - - A robust machine code proof framework for highly secure applications
      - hardin:acl2:2006
  - - papers/kaufmann:ieeetse:1997
    - - An industrial strength theorem prover for a logic based on Common Lisp
      - kaufmann:ieeetse:1997
  notes/activation-function: []
  notes/afl-fuzzer:
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  notes/alias-analysis:
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/alloy-verifier:
  - - papers/frias:icse:2005
    - - 'DynAlloy: Upgrading Alloy with Actions'
      - frias:icse:2005
  - - papers/jackson:tosem:2002
    - - 'Alloy: A lightweight object modelling notation'
      - jackson:tosem:2002
  - - papers/krishnamurthi:fm:2019
    - - The human in formal methods
      - krishnamurthi:fm:2019
  notes/angr-verifier:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/annotation-burden:
  - - papers/leino:informatics:2001
    - - 'Extended static checking: A ten-year perspective'
      - leino:informatics:2001
  - - papers/li:sandp:2021
    - - A secure and formally verified Linux KVM hypervisor
      - li:sandp:2021
  notes/aorte: []
  notes/arm-architecture:
  - - papers/armstrong:arw:2018
    - - 'Detailed models of instruction set architectures: From pseudocode to formal
        semantics'
      - armstrong:arw:2018
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/baumann:eucnc:2016
    - - A high assurance virtualization platform for ARMv8
      - baumann:eucnc:2016
  - - papers/boettcher:date:2014
    - - 'Advanced SIMD: Extending the reach of contemporary SIMD architectures'
      - boettcher:date:2014
  - - papers/dam:ted:2013
    - - Machine code verification of a tiny ARM hypervisor
      - dam:ted:2013
  - - papers/dam:trusted:2013
    - - Machine code verification of a tiny ARM hypervisor
      - dam:trusted:2013
  - - papers/flur:popl:2016
    - - 'Modelling the ARMv8 architecture, operationally: concurrency and ISA'
      - flur:popl:2016
  - - papers/flur:popl:2017
    - - 'Mixed-size concurrency: ARM, POWER, C/C++11, and SC'
      - flur:popl:2017
  - - papers/fox:cambridge:2001
    - - A HOL specification of the ARM instruction set architecture
      - fox:cambridge:2001
  - - papers/fox:itp:2010
    - - A trustworthy monadic formalization of the ARMv7 instruction set architecture
      - fox:itp:2010
  - - papers/fox:itp:2012
    - - Directions in ISA specification
      - fox:itp:2012
  - - papers/fox:itps:2015
    - - Improved tool support for machine-code decompilation in HOL4
      - fox:itps:2015
  - - papers/fox:tphols:2003
    - - Formal specification and verification of ARM6
      - fox:tphols:2003
  - - papers/fox:ucam:2002
    - - Formal verification of the ARM6 micro-architecture
      - fox:ucam:2002
  - - papers/hadjilambrou:ispass:2019
    - - 'GeST: An automatic framework for generating CPU stress-tests'
      - hadjilambrou:ispass:2019
  - - papers/jiang:arxiv:2021
    - - 'Examiner: Automatically locating inconsistent instructions between real devices
        and CPU emulators for Arm'
      - jiang:arxiv:2021
  - - papers/joloboff:dsetta:2015
    - - Towards verified faithful simulation
      - joloboff:dsetta:2015
  - - papers/khakpour:cpp:2013
    - - Machine assisted proof of ARMv7 instruction level isolation properties
      - khakpour:cpp:2013
  - - papers/lockhart:ispass:2015
    - - 'Pydgin: generating fast instruction set simulators from simple architecture
        descriptions with meta-tracing JIT compilers'
      - lockhart:ispass:2015
  - - papers/myreen:tphols:2009
    - - Verified LISP Implementations on ARM, x86 and PowerPC
      - myreen:tphols:2009
  - - papers/pulte:popl:2017
    - - 'Simplifying ARM concurrency: Multicopy-atomic axiomatic and operational models
        for ARMv8'
      - pulte:popl:2017
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/schwarz:sefm:2016
    - - Automatic derivation of platform noninterference properties
      - schwarz:sefm:2016
  - - papers/seal:book:2000
    - - ARM Architecture Reference Manual (ARMv5 edition)
      - seal:book:2000
  - - papers/sewell:pldi:2013
    - - Translation validation for a verified OS kernel
      - sewell:pldi:2013
  - - papers/shi:phd:2013
    - - Certification of an instruction set simulator
      - shi:phd:2013
  - - papers/simner:pls:2020
    - - 'ARMv8-A system semantics: Instruction fetch in relaxed architectures'
      - simner:pls:2020
  - - papers/stephens:micro:2017
    - - The ARM scalable vector extension
      - stephens:micro:2017
  - - papers/tahat:fmcad:2019
    - - Scalable translation validation of unverified legacy OS code
      - tahat:fmcad:2019
  - - papers/tao:sosp:2021
    - - Formal verification of a multiprocessor hypervisor on Arm relaxed memory hardware
      - tao:sosp:2021
  notes/asl:
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/jiang:arxiv:2021
    - - 'Examiner: Automatically locating inconsistent instructions between real devices
        and CPU emulators for Arm'
      - jiang:arxiv:2021
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/tahat:fmcad:2019
    - - Scalable translation validation of unverified legacy OS code
      - tahat:fmcad:2019
  notes/aspect-oriented-programming:
  - - papers/kiczales:iwoos:1991
    - - Towards a new model of abstraction in software engineering
      - kiczales:iwoos:1991
  notes/attention-function:
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/auto-active-verification:
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  - - papers/leino:informatics:2001
    - - 'Extended static checking: A ten-year perspective'
      - leino:informatics:2001
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/vogels:fmoods:2011
    - - Annotation inference for separation logic based verifiers
      - vogels:fmoods:2011
  notes/auto-encoder-model:
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/automatic-exploit-generation:
  - - papers/avgerinos:cacm:2014
    - - Automatic exploit generation
      - avgerinos:cacm:2014
  - - papers/cha:sandp:2012
    - - Unleashing Mayhem on binary code
      - cha:sandp:2012
  - - papers/heelan:msc:2009
    - - Automatic generation of control flow hijacking exploits for software vulnerabilities
      - heelan:msc:2009
  - - papers/heelan:sec:2018
    - - Automatic heap layout manipulation for exploitation
      - heelan:sec:2018
  notes/bap-tool:
  - - papers/avgerinos:icse:2014
    - - Enhancing symbolic execution with veritesting
      - avgerinos:icse:2014
  - - papers/brumley:cav:2011
    - - 'BAP: A binary analysis platform'
      - brumley:cav:2011
  notes/bdd:
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/regehr:asplos:2004
    - - 'HOIST: a system for automatically deriving static analyzers for embedded
        systems'
      - regehr:asplos:2004
  - - papers/regehr:lctes:2006
    - - Deriving abstract transfer functions for analyzing embedded software
      - regehr:lctes:2006
  notes/benes-network:
  - - papers/qin:hpca:2020
    - - 'SIGMA: A sparse and irregular GEMM accelerator with flexible interconnects
        for DNN training'
      - qin:hpca:2020
  - - papers/woh:micro:2008
    - - 'From SODA to scotch: The evolution of a wireless baseband processor'
      - woh:micro:2008
  notes/biabduction:
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  notes/binary-analysis:
  - - papers/amadio:fpara:2014
    - - Certified complexity (CerCo)
      - amadio:fpara:2014
  - - papers/brumley:cav:2011
    - - 'BAP: A binary analysis platform'
      - brumley:cav:2011
  - - papers/cha:sandp:2012
    - - Unleashing Mayhem on binary code
      - cha:sandp:2012
  - - papers/daniel:sandp:2020
    - - 'Binsec/Rel: Efficient relational symbolic execution for constant-time at
        binary-level'
      - daniel:sandp:2020
  - - papers/dasgupta:pldi:2020
    - - Scalable validation of binary lifters
      - dasgupta:pldi:2020
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/hendrix:itp:2019
    - - Towards verified binary raising
      - hendrix:itp:2019
  - - papers/liu:arxiv:2021
    - - Proving LTL properties of bitvector programs and decompiled binaries (extended)
      - liu:arxiv:2021
  - - papers/maus:amast:2008
    - - 'Vx86: x86 assembler simulated in C powered by automated theorem proving'
      - maus:amast:2008
  - - papers/myreen:fse:2007
    - - Hoare logic for ARM machine code
      - myreen:fse:2007
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/noonan:pldi:2016
    - - Polymorphic type inference for machine code
      - noonan:pldi:2016
  - - papers/regehr:asplos:2004
    - - 'HOIST: a system for automatically deriving static analyzers for embedded
        systems'
      - regehr:asplos:2004
  - - papers/shoshitaishvili:sandp:2016
    - - 'SOK: (State of) the art of war: Offensive techniques in binary analysis'
      - shoshitaishvili:sandp:2016
  - - papers/shoshitaishvili:sp:2016
    - - 'SOK: (state of) the art of war: Offensive techniques in binary analysis'
      - shoshitaishvili:sp:2016
  notes/binary-instrumentation:
  - - papers/nethercote:pldi:2007
    - - 'Valgrind: A framework for heavyweight dynamic binary instrumentation'
      - nethercote:pldi:2007
  notes/binary-lifter:
  - - papers/brumley:cav:2011
    - - 'BAP: A binary analysis platform'
      - brumley:cav:2011
  - - papers/dasgupta:pldi:2020
    - - Scalable validation of binary lifters
      - dasgupta:pldi:2020
  - - papers/hendrix:itp:2019
    - - Towards verified binary raising
      - hendrix:itp:2019
  - - papers/mycroft:esop:1999
    - - Type-based decompilation (or program reconstruction via type reconstruction)
      - mycroft:esop:1999
  - - papers/noonan:pldi:2016
    - - Polymorphic type inference for machine code
      - noonan:pldi:2016
  notes/blast-verifier:
  - - papers/beyer:ijsttt:2007
    - - 'The software model checker BLAST: Applications to software engineering'
      - beyer:ijsttt:2007
  - - papers/beyer:sas:2004
    - - The BLAST query language for software verification
      - beyer:sas:2004
  - - papers/holzer:cav:2008
    - - 'FShell: Systematic test case generation for dynamic analysis and measurement'
      - holzer:cav:2008
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/bleu:
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/boogie-verifier:
  - - papers/almeida:security:2016
    - - Verifying constant-time implementations
      - almeida:security:2016
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/leino:tacas:2010
    - - 'A polymorphic intermediate verification language: Design and logical encoding'
      - leino:tacas:2010
  - - papers/rakamaric:cav:2014
    - - 'SMACK: Decoupling source language details from verifier implementations'
      - rakamaric:cav:2014
  notes/bounded-model-checking:
  - - papers/biere:tacas:1999
    - - Symbolic model checking without BDDs
      - biere:tacas:1999
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/clarke:tacas:2004
    - - A tool for checking ANSI-C programs
      - clarke:tacas:2004
  - - papers/cook:cav:2018
    - - Model checking boot code from AWS data centers
      - cook:cav:2018
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  - - papers/merz:vstte:2012
    - - 'LLBMC: Bounded model checking of C and C++ programs using a compiler IR'
      - merz:vstte:2012
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:hatra:2020
    - - 'Towards making formal methods normal: meeting developers where they are'
      - reid:hatra:2020
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/siddiqui:oopsla:2012
    - - Scaling symbolic execution using ranged analysis
      - siddiqui:oopsla:2012
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  notes/bounded-verification:
  - - papers/biere:tacas:1999
    - - Symbolic model checking without BDDs
      - biere:tacas:1999
  - - papers/cook:cav:2018
    - - Model checking boot code from AWS data centers
      - cook:cav:2018
  - - papers/lal:cav:2012
    - - A solver for reachability modulo theories
      - lal:cav:2012
  - - papers/toman:ase:2015
    - - 'Crust: A bounded verifier for Rust'
      - toman:ase:2015
  notes/buchi-automaton:
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/bug-localization:
  - - papers/zeller:bugs:2005
    - - Locating defects is uncertain
      - zeller:bugs:2005
  notes/cactus-plot:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  notes/cakeml-compiler:
  - - papers/fox:cpp:2017
    - - Verified compilation of CakeML to multiple machine-code targets
      - fox:cpp:2017
  - - papers/tan:icfp:2016
    - - A new verified compiler backend for CakeML
      - tan:icfp:2016
  notes/capabilities:
  - - papers/nienhuis:secpriv:2020
    - - 'Rigorous engineering for hardware security: Formal modelling and proof in
        the CHERI design and implementation process'
      - nienhuis:secpriv:2020
  - - papers/skorstengaard:esop:2018
    - - Reasoning about a machine with local capabilities
      - skorstengaard:esop:2018
  - - papers/skorstengaard:popl:2019
    - - 'StkTokens: Enforcing well-bracketed control flow and stack encapsulation
        using linear capabilities'
      - skorstengaard:popl:2019
  - - papers/woodruff:isca:2014
    - - 'The CHERI capability model: Revisiting RISC in an age of risk'
      - woodruff:isca:2014
  - - papers/woodruff:tocs:2019
    - - 'CHERI concentrate: Practical compressed capabilities'
      - woodruff:tocs:2019
  notes/case-splitting:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/galea:arxiv:2018
    - - Evaluating manual intervention to address the challenges of bug finding with
        KLEE
      - galea:arxiv:2018
  - - papers/qiu:icse:2017
    - - A synergistic approach for distributed symbolic execution using test ranges
      - qiu:icse:2017
  - - papers/qiu:nfm:2018
    - - Using test ranges to improve symbolic execution
      - qiu:nfm:2018
  - - papers/siddiqui:oopsla:2012
    - - Scaling symbolic execution using ranged analysis
      - siddiqui:oopsla:2012
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  - - papers/trabish:icse:2018
    - - Chopped symbolic execution
      - trabish:icse:2018
  notes/cbmc-verifier:
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/chong:icse:2020
    - - Code-level model checking in the software development workflow
      - chong:icse:2020
  - - papers/clarke:tacas:2004
    - - A tool for checking ANSI-C programs
      - clarke:tacas:2004
  - - papers/holzer:cav:2008
    - - 'FShell: Systematic test case generation for dynamic analysis and measurement'
      - holzer:cav:2008
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/toman:ase:2015
    - - 'Crust: A bounded verifier for Rust'
      - toman:ase:2015
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  notes/cegar:
  - - papers/ball:pldi:2001
    - - Automatic predicate abstraction of C programs
      - ball:pldi:2001
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/clarke:cav:2000
    - - Counterexample-guided abstraction refinement
      - clarke:cav:2000
  - - papers/henzinger:spin:2003
    - - Software verification with BLAST
      - henzinger:spin:2003
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/chalice-verifier:
  - - papers/heule:ftfjp:2011
    - - Fractional permissions without the fractions
      - heule:ftfjp:2011
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  notes/cheri-architecture:
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/bauereiss:ucam:2021
    - - Verified security for the Morello capability-enhanced prototype Arm architecture
      - bauereiss:ucam:2021
  - - papers/nienhuis:secpriv:2020
    - - 'Rigorous engineering for hardware security: Formal modelling and proof in
        the CHERI design and implementation process'
      - nienhuis:secpriv:2020
  - - papers/skorstengaard:esop:2018
    - - Reasoning about a machine with local capabilities
      - skorstengaard:esop:2018
  - - papers/skorstengaard:popl:2019
    - - 'StkTokens: Enforcing well-bracketed control flow and stack encapsulation
        using linear capabilities'
      - skorstengaard:popl:2019
  - - papers/watson:sandp:2015
    - - 'CHERI: A hybrid capability-system architecture for scalable software compartmentalization'
      - watson:sandp:2015
  - - papers/woodruff:isca:2014
    - - 'The CHERI capability model: Revisiting RISC in an age of risk'
      - woodruff:isca:2014
  - - papers/woodruff:tocs:2019
    - - 'CHERI concentrate: Practical compressed capabilities'
      - woodruff:tocs:2019
  notes/cil-tool:
  - - papers/necula:cc:2002
    - - 'CIL: Intermediate language and tools for analysis and transformation of C
        programs'
      - necula:cc:2002
  notes/civl-verifier:
  - - papers/siegel:sc:2015
    - - 'CIVL: the concurrency intermediate verification language'
      - siegel:sc:2015
  notes/cnn:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  notes/compcert-compiler:
  - - papers/gu:osdi:2016
    - - 'CertiKOS: An extensible architecture for building certified concurrent OS
        Kernels'
      - gu:osdi:2016
  - - papers/leroy:cacm:2009
    - - Formal verification of a realistic compiler
      - leroy:cacm:2009
  - - papers/sevcik:jacm:2013
    - - 'CompCertTSO: A verified compiler for relaxed-memory concurrency'
      - sevcik:jacm:2013
  - - papers/vasudevan:usenix:2016
    - - "\xFCberSpark: Enforcing verifiable object abstractions for automated compositional\
        \ security analysis of a hypervisor"
      - vasudevan:usenix:2016
  notes/compiler-verification:
  - - papers/myreen:itp:2011
    - - A verified runtime for a verified theorem prover
      - myreen:itp:2011
  - - papers/myreen:popl:2010
    - - Verified just-in-time compiler on x86
      - myreen:popl:2010
  notes/concolic-execution:
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/majumdar:icse:2007
    - - Hybrid concolic testing
      - majumdar:icse:2007
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  notes/concurrent-separation-logic:
  - - papers/brookes:tcs:2006
    - - A semantics for concurrent separation logic
      - brookes:tcs:2006
  - - papers/ohearn:cacm:2019
    - - Separation logic
      - ohearn:cacm:2019
  - - papers/ohearn:tcs:2007
    - - Resources, concurrency, and local reasoning
      - ohearn:tcs:2007
  - - papers/penninckx:nfm:2012
    - - Sound formal verification of Linux's USB BP keyboard driver
      - penninckx:nfm:2012
  notes/continuations:
  - - papers/draves:sosp:1991
    - - Using continuations to implement thread management and communication in operating
        systems
      - draves:sosp:1991
  - - papers/lauer:osr:1979
    - - On the duality of operating system structures
      - lauer:osr:1979
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/wand:lfp:1980
    - - Continuation-based multiprocessing
      - wand:lfp:1980
  notes/contract-driven-development:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/deline:pldi:2001
    - - Enforcing high-level protocols in low-level software
      - deline:pldi:2001
  - - papers/fahndrich:foveoos:2010
    - - Static contract checking with abstract interpretation
      - fahndrich:foveoos:2010
  - - papers/hatcliff:compsurv:2012
    - - Behavioral interface specification languages
      - hatcliff:compsurv:2012
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  - - papers/logozzo:vmcai:2011
    - - Practical verification for the working programmer with CodeContracts and abstract
        interpretation
      - logozzo:vmcai:2011
  - - papers/mai:asplos:2013
    - - Verifying security invariants in ExpressOS
      - mai:asplos:2013
  notes/coq-theorem-prover:
  - - papers/azevedo:post:2018
    - - The meaning of memory safety
      - azevedo:post:2018
  - - papers/becker:fm:2016
    - - Combining mechanized proofs and model-based testing in the formal analysis
        of a hypervisor
      - becker:fm:2016
  - - papers/coquand:eurocal:1985
    - - 'Constructions: A higher order proof system for mechanizing mathematics'
      - coquand:eurocal:1985
  - - papers/gu:osdi:2016
    - - 'CertiKOS: An extensible architecture for building certified concurrent OS
        Kernels'
      - gu:osdi:2016
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  - - papers/kennedy:ppdp:2013
    - - 'Coq: The world''s best macro assembler?'
      - kennedy:ppdp:2013
  - - papers/leroy:cacm:2009
    - - Formal verification of a realistic compiler
      - leroy:cacm:2009
  - - papers/li:sandp:2021
    - - A secure and formally verified Linux KVM hypervisor
      - li:sandp:2021
  - - papers/mulligan:icfp:2014
    - - 'Lem: Reusable engineering of real-world semantics'
      - mulligan:icfp:2014
  - - papers/pierce:book:2016
    - - Software foundations
      - pierce:book:2016
  - - papers/sammler:pldi:2021
    - - 'RefinedC: Automating the foundational verification of C code with refined
        ownership types'
      - sammler:pldi:2021
  - - papers/weitz:icfp:2017
    - - 'SpaceSearch: A library for building and verifying solver-aided tools'
      - weitz:icfp:2017
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  notes/corral-verifier:
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/lal:cav:2012
    - - A solver for reachability modulo theories
      - lal:cav:2012
  - - papers/lal:fse:2014
    - - Powering the static driver verifier using Corral
      - lal:fse:2014
  notes/cpachecker-verifier:
  - - papers/beyer:cav:2011
    - - 'CPAchecker: A tool for configurable software verification'
      - beyer:cav:2011
  notes/cpu-verification:
  - - papers/aagaard:charme:2001
    - - A framework for microprocessor correctness statements
      - aagaard:charme:2001
  - - papers/aagaard:fmcad:2000
    - - A methodology for large-scale hardware verification
      - aagaard:fmcad:2000
  - - papers/albin:cli:1995
    - - Testing the FM9001 microprocessor
      - albin:cli:1995
  - - papers/bevier:jar:1989
    - - An approach to systems verification
      - bevier:jar:1989
  - - papers/beyer:ijsttt:2006
    - - Putting it all together - Formal verification of the VAMP
      - beyer:ijsttt:2006
  - - papers/bryant:cmu:2018
    - - Formal verification of pipelined Y86-64 microprocessors with UCLID5
      - bryant:cmu:2018
  - - papers/burch:cav:1994
    - - Automatic verification of pipelined microprocessor control
      - burch:cav:1994
  - - papers/fox:ucam:2002
    - - Formal verification of the ARM6 micro-architecture
      - fox:ucam:2002
  - - papers/goel:cav:2021
    - - Balancing automation and control for formal verification of microprocessors
      - goel:cav:2021
  - - papers/goel:cpp:2020
    - - Verifying x86 instruction implementations
      - goel:cpp:2020
  - - papers/goel:spisa:2019
    - - Using x86isa for microcode verification
      - goel:spisa:2019
  - - papers/greve:fmcad:1998
    - - Symbolic simulation of the JEM1 microprocessor
      - greve:fmcad:1998
  - - papers/higgins:hldvt:2004
    - - Simplifying design and verification for structural hazards and datapaths in
        pipelined circuits
      - higgins:hldvt:2004
  - - papers/huang:todaes:2019
    - - 'Instruction-level abstraction (ILA): A uniform specification for system-on-chip
        (SoC) verification'
      - huang:todaes:2019
  - - papers/hunt:jar:1989
    - - Microprocessor design verification
      - hunt:jar:1989
  - - papers/hunt:lncs:1994
    - - 'FM8501: A verified microprocessor'
      - hunt:lncs:1994
  - - papers/hunt:micro:1999
    - - Verifying the FM9801 microarchitecture
      - hunt:micro:1999
  - - papers/jhala:cav:2001
    - - Microarchitecture verification by compositional model checking
      - jhala:cav:2001
  - - papers/kaivola:cav:2009
    - - Replacing testing with formal verification in Intel Core i7 processor execution
        engine validation
      - kaivola:cav:2009
  - - papers/kirankumar:fmcad:2012
    - - 'Symbolic trajectory evaluation: The primary validation vehicle for next generation
        Intel processor graphics FPU'
      - kirankumar:fmcad:2012
  - - papers/kroening:dac:2001
    - - Automated pipeline design
      - kroening:dac:2001
  - - papers/kroening:itg:2000
    - - Proving the correctness of pipelined micro-architectures
      - kroening:itg:2000
  - - papers/kuhne:fmcad:2010
    - - Automated formal verification of processors based on architectural models
      - kuhne:fmcad:2010
  - - papers/lahiri:cav:2003
    - - Deductive verification of advanced out-of-order microprocessors
      - lahiri:cav:2003
  - - papers/lahiri:hldvt:2001
    - - Experience with term level modeling and verification of the M* CORE microprocessor
        core
      - lahiri:hldvt:2001
  - - papers/lustig:asplos:2016
    - - 'COATCheck: Verifying memory ordering at the hardware-OS interface'
      - lustig:asplos:2016
  - - papers/mcmillan:cav:1998
    - - Verification of an implementation of Tomasulo's algorithm by compositional
        model checking
      - mcmillan:cav:1998
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/segar:fmsd:1995
    - - Formal verification by symbolic evaluation of partially-ordered trajectories
      - segar:fmsd:1995
  - - papers/slobodova:memocode:2011
    - - A flexible formal verification framework for industrial scale validation
      - slobodova:memocode:2011
  - - papers/srinivasan:ieeetoc:2010
    - - Automatic refinement checking of pipelines with out-of-order execution
      - srinivasan:ieeetoc:2010
  - - papers/stewart:difts:2014
    - - 'Processor memory system verification using DOGReL: a language for specifying
        end-to-end properties'
      - stewart:difts:2014
  - - papers/velev:dac:2000
    - - Formal verification of superscalar microprocessors with multicycle functional
        units, exception, and branch prediction
      - velev:dac:2000
  - - papers/windley:ieeetoc:1995
    - - Formal modeling and verification of microprocessors
      - windley:ieeetoc:1995
  - - papers/zhang:fmcad:2018
    - - Integrating memory consistency models with instruction-level abstraction for
        heterogeneous system-on-chip verification
      - zhang:fmcad:2018
  notes/cray-architecture:
  - - papers/palacharla:micro:1995
    - - Decoupling integer execution in superscalar processors
      - palacharla:micro:1995
  - - papers/russell:cacm:1978
    - - The CRAY-1 computer system
      - russell:cacm:1978
  - - papers/smith:tocs:1984
    - - Decoupled access/execute computer architectures
      - smith:tocs:1984
  notes/crest-verifier:
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  notes/cute-verifier:
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/cvc4-solver:
  - - papers/barrett:cav:2011
    - - CVC4
      - barrett:cav:2011
  notes/cyclone-language:
  - - papers/azevedo:post:2018
    - - The meaning of memory safety
      - azevedo:post:2018
  - - papers/condit:esop:2007
    - - Dependent types for low-level programming
      - condit:esop:2007
  - - papers/grossman:esop:2002
    - - Existential types for imperative languages
      - grossman:esop:2002
  - - papers/grossman:pldi:2002
    - - Region-based memory management in Cyclone
      - grossman:pldi:2002
  - - papers/morrisett:wcsss:1999
    - - 'TALx86: A realistic typed assembly language'
      - morrisett:wcsss:1999
  notes/dafny-verifier:
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/mai:asplos:2013
    - - Verifying security invariants in ExpressOS
      - mai:asplos:2013
  notes/darpa-cgc:
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  notes/dart-verifier:
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  - - papers/godefroid:pldi:2005
    - - 'DART: Directed automated random testing'
      - godefroid:pldi:2005
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/data-parallelism:
  - - papers/blelloch:book:1990
    - - Vector models for data-parallel computing
      - blelloch:book:1990
  - - papers/flynn:ieeeproc:1966
    - - Very high-speed computing systems
      - flynn:ieeeproc:1966
  - - papers/kozyrakis:phd:2002
    - - Scalable vector media processors for embedded systems
      - kozyrakis:phd:2002
  - - papers/silva:sbac:2016
    - - A comparative study of SYCL, OpenCL, and OpenMP
      - silva:sbac:2016
  - - papers/subhlok:ppopp:1993
    - - Exploiting task and data parallelism on a multicomputer
      - subhlok:ppopp:1993
  notes/decidability-ceiling:
  - - papers/leino:informatics:2001
    - - 'Extended static checking: A ten-year perspective'
      - leino:informatics:2001
  notes/decoupled-access-execute:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  notes/decoupling:
  - - papers/bird:sc:1993
    - - The effectiveness of decoupling
      - bird:sc:1993
  - - papers/palacharla:micro:1995
    - - Decoupling integer execution in superscalar processors
      - palacharla:micro:1995
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/smith:tocs:1984
    - - Decoupled access/execute computer architectures
      - smith:tocs:1984
  notes/deep-neural-networks: []
  notes/dependency-injection: []
  notes/dependent-type:
  - - papers/armstrong:arw:2018
    - - 'Detailed models of instruction set architectures: From pseudocode to formal
        semantics'
      - armstrong:arw:2018
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/condit:esop:2007
    - - Dependent types for low-level programming
      - condit:esop:2007
  - - papers/ferraiuolo:dac:2017
    - - Secure information flow verification with mutable dependent types
      - ferraiuolo:dac:2017
  - - papers/furr:pldi:2005
    - - Checking type safety of foreign function calls
      - furr:pldi:2005
  - - papers/mcbride:jfp:2002
    - - 'Faking it: Simulating dependent types in Haskell'
      - mcbride:jfp:2002
  - - papers/nanevski:icfp:2008
    - - 'Ynot: Dependent types for imperative programs'
      - nanevski:icfp:2008
  - - papers/nanevski:oopsla:2019
    - - 'Specifying concurrent programs in separation logic: Morphisms and simulations'
      - nanevski:oopsla:2019
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/rondon:pldi:2008
    - - Liquid types
      - rondon:pldi:2008
  - - papers/xi:icfp:2001
    - - A dependently typed assembly language
      - xi:icfp:2001
  - - papers/xi:jfp:2007
    - - Dependent ML An approach to practical programming with dependent types
      - xi:jfp:2007
  notes/differential-power-analysis:
  - - papers/kocher:crypto:1999
    - - Differential power analysis
      - kocher:crypto:1999
  notes/differential-testing:
  - - papers/person:fse:2008
    - - Differential symbolic execution
      - person:fse:2008
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/yang:pldi:2011
    - - Finding and understanding bugs in C compilers
      - yang:pldi:2011
  notes/digfuzz-fuzzer:
  - - papers/zhao:ndss:2019
    - - 'Send hardest problems my way: Probabilistic path prioritization for hybrid
        fuzzing'
      - zhao:ndss:2019
  notes/distributed-shared-memory:
  - - papers/bershad:cmpcon:1993
    - - The Midway distributed shared memory system
      - bershad:cmpcon:1993
  - - papers/johnson:osr:1995
    - - 'CRL: High-performance all-software distributed shared memory'
      - johnson:osr:1995
  - - papers/li:tocs:1989
    - - Memory coherence in shared virtual memory systems
      - li:tocs:1989
  notes/domain-specific-language:
  - - papers/eide:aspse:2001
    - - 'Aspect weaving as component knitting: Separating concerns with Knit'
      - eide:aspse:2001
  - - papers/eide:icse:2002
    - - Static and dynamic structure in design patterns
      - eide:icse:2002
  - - papers/peterson:padl:2001
    - - 'FVision: A declarative language for visual tracking'
      - peterson:padl:2001
  - - papers/reid:icse:1999
    - - 'Prototyping real-time vision systems: An experiment in DSL design'
      - reid:icse:1999
  notes/driller-verifier:
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  notes/dynamic-binary-translation:
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  notes/dynamorio-tool: []
  notes/embedding:
  - - papers/boulton:tpcd:1993
    - - Experience with embedding hardware description languages in HOL
      - boulton:tpcd:1993
  notes/entropy:
  - - papers/bohme:fse:2020
    - - 'Boosting fuzzer efficiency: An information theoretic perspective'
      - bohme:fse:2020
  notes/equality-saturation:
  - - papers/vanhattum:asplos:2021
    - - Vectorization for Digital Signal Processors via equality saturation
      - vanhattum:asplos:2021
  - - papers/willsey:popl:2021
    - - 'Egg: Fast and extensible equality saturation'
      - willsey:popl:2021
  notes/events:
  - - papers/dabek:sigops:2002
    - - Event-driven programming for robust software
      - dabek:sigops:2002
  - - papers/dunkels:enss:2006
    - - 'Protothreads: Simplifying Event-driven Programming of Memory-constrained
        Embedded Systems'
      - dunkels:enss:2006
  - - papers/gay:pldi:2003
    - - 'The nesC language: A holistic approach to networked embedded systems'
      - gay:pldi:2003
  - - papers/vonbehren:hotos:2003
    - - Why events are a bad idea (for high-concurrency servers)
      - vonbehren:hotos:2003
  notes/exe-verifier:
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  - - papers/engler:issta:2007
    - - 'Under-constrained execution: Making automatic code destruction easy and scalable'
      - engler:issta:2007
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/extended-static-checking:
  - - papers/beyer:cav:2011
    - - 'CPAchecker: A tool for configurable software verification'
      - beyer:cav:2011
  - - papers/beyer:ijsttt:2007
    - - 'The software model checker BLAST: Applications to software engineering'
      - beyer:ijsttt:2007
  - - papers/leino:informatics:2001
    - - 'Extended static checking: A ten-year perspective'
      - leino:informatics:2001
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  - - papers/lindner:indin:2019
    - - 'Verification of safety functions implemented in Rust: A symbolic execution
        based approach'
      - lindner:indin:2019
  notes/foreign-function-interface:
  - - papers/blume:babel:2001
    - - 'No-longer-foreign: Teaching an ML compiler to speak C "natively"'
      - blume:babel:2001
  - - papers/chakravarty:haskffi:2003
    - - 'The Haskell 98 foreign function interface 1.0: An addendum to the Haskell
        98 report'
      - chakravarty:haskffi:2003
  - - papers/finne:icfp:1999
    - - Calling hell from heaven and heaven from hell
      - finne:icfp:1999
  - - papers/fluet:jfp:2006
    - - Phantom types and subtyping
      - fluet:jfp:2006
  - - papers/furr:pldi:2005
    - - Checking type safety of foreign function calls
      - furr:pldi:2005
  - - papers/jones:hw:1997
    - - 'Green Card: a foreign-language interface for Haskell'
      - jones:hw:1997
  - - papers/reid:gfpw:1994
    - - 'Malloc pointers and stable pointers: Improving Haskell''s foreign language
        interface'
      - reid:gfpw:1994
  - - papers/reppy:att:1996
    - - A safe interface to sockets
      - reppy:att:1996
  notes/formal-specification:
  - - papers/bodin:popl:2014
    - - A trusted mechanised JavaScript specification
      - bodin:popl:2014
  - - papers/burke:lacl:2005
    - - Translating formal software specifications to natural language / A grammar-based
        approach
      - burke:lacl:2005
  - - papers/cifuentes:iwpc:1998
    - - Specifying the semantics of machine instructions
      - cifuentes:iwpc:1998
  - - papers/damm:fmoods:1999
    - - 'LSCs: Breathing life into message sequence charts'
      - damm:fmoods:1999
  - - papers/falkoff:ibm:1964
    - - A formal description of SYSTEM/360
      - falkoff:ibm:1964
  - - papers/fauth:edtc:1995
    - - Describing instruction set processors using nML
      - fauth:edtc:1995
  - - papers/mavin:isre:2009
    - - Easy approach to requirements syntax (EARS)
      - mavin:isre:2009
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:msc:1993
    - - A precise semantics for ultraloose specifications
      - reid:msc:1993
  notes/fql:
  - - papers/beyer:ase:2019
    - - 'TestCov: Robust test-suite execution and coverage measurement'
      - beyer:ase:2019
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/holzer:cav:2008
    - - 'FShell: Systematic test case generation for dynamic analysis and measurement'
      - holzer:cav:2008
  - - papers/holzer:hvc:2010
    - - An introduction to test specification in FQL
      - holzer:hvc:2010
  notes/fractional-permissions:
  - - papers/bornat:popl:2005
    - - Permission accounting in separation logic
      - bornat:popl:2005
  - - papers/heule:ftfjp:2011
    - - Fractional permissions without the fractions
      - heule:ftfjp:2011
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  notes/frama-c-verifier:
  - - papers/blanchard:fmics:2015
    - - A case study on formal verification of the Anaxagoros hypervisor paging system
        with Frama-C
      - blanchard:fmics:2015
  - - papers/cuoq:sefm:2012
    - - 'Frama-C: A software analysis perspective'
      - cuoq:sefm:2012
  - - papers/mangano:crisis:2016
    - - 'Formal verification of a memory allocation module of Contiki with Frama-C:
        a case study'
      - mangano:crisis:2016
  - - papers/vasudevan:usenix:2016
    - - "\xFCberSpark: Enforcing verifiable object abstractions for automated compositional\
        \ security analysis of a hypervisor"
      - vasudevan:usenix:2016
  notes/frame-rule:
  - - papers/hobor:popl:2013
    - - The ramifications of sharing in data structures
      - hobor:popl:2013
  - - papers/krishnaswami:tldi:2010
    - - Verifying event-driven programs using ramified frame properties
      - krishnaswami:tldi:2010
  notes/friction-diagram:
  - - papers/macvean:ppig:2016
    - - API usability at scale
      - macvean:ppig:2016
  notes/functional-reactive-programming:
  - - papers/peterson:padl:2001
    - - 'FVision: A declarative language for visual tracking'
      - peterson:padl:2001
  - - papers/reid:icse:1999
    - - 'Prototyping real-time vision systems: An experiment in DSL design'
      - reid:icse:1999
  notes/fuzz-testing:
  - - papers/babic:fse:2019
    - - 'FUDGE: Fuzz driver generation at scale'
      - babic:fse:2019
  - - papers/beyer:ase:2019
    - - 'TestCov: Robust test-suite execution and coverage measurement'
      - beyer:ase:2019
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/bohme2:fse:2020
    - - 'Fuzzing: On the exponential cost of vulnerability discovery'
      - bohme2:fse:2020
  - - papers/bohme:fse:2020
    - - 'Boosting fuzzer efficiency: An information theoretic perspective'
      - bohme:fse:2020
  - - papers/braione:icse:2018
    - - 'SUSHI: A test generator for programs with complex structured inputs'
      - braione:icse:2018
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/claessen:icfp:2000
    - - 'QuickCheck: A lightweight tool for random testing of Haskell programs'
      - claessen:icfp:2000
  - - papers/dimjasevic:ifm:2018
    - - Study of integrating random and symbolic testing for object-oriented software
      - dimjasevic:ifm:2018
  - - papers/fioraldi:arxiv:2020
    - - Program state abstraction for feedback-driven fuzz testing using likely invariants
      - fioraldi:arxiv:2020
  - - papers/garg:icse:2013
    - - Feedback-directed unit test generation for C/C++ using concolic execution
      - garg:icse:2013
  - - papers/godefroid:cacm:2020
    - - 'Fuzzing: Hack, art, and science'
      - godefroid:cacm:2020
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/liew:fse:2019
    - - 'Just fuzz it: Solving floating-point constraints using coverage-Guided fuzzing'
      - liew:fse:2019
  - - papers/maciver:ecoop:2020
    - - 'Test-case reduction via test-case generation: Insights from the Hypothesis
        reducer'
      - maciver:ecoop:2020
  - - papers/manes:ieeetse:2019
    - - 'The art, science, and engineering of fuzzing: A survey'
      - manes:ieeetse:2019
  - - papers/miller:cacm:1990
    - - An empirical study of the reliability of UNIX utilities
      - miller:cacm:1990
  - - papers/padhye:issta:2019
    - - Semantic fuzzing with Zest
      - padhye:issta:2019
  - - papers/padhye:oopsla:2019
    - - 'FuzzFactory: Domain-specific fuzzing with waypoints'
      - padhye:oopsla:2019
  - - papers/pandey:issta:2019
    - - Deferred concretization in symbolic execution via fuzzing
      - pandey:issta:2019
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/regehr:pldi:2012
    - - Test-case reduction for C compiler bugs
      - regehr:pldi:2012
  - - papers/reid:hatra:2020
    - - 'Towards making formal methods normal: meeting developers where they are'
      - reid:hatra:2020
  - - papers/rutledge:icse:2020
    - - 'PG-KLEE: Trading soundness for coverage'
      - rutledge:icse:2020
  - - papers/stephens:ndss:2016
    - - 'Driller: Augmenting fuzzing through selective symbolic execution'
      - stephens:ndss:2016
  - - papers/visser:tacas:2020
    - - 'COASTAL: Combining concolic and fuzzing for Java (competition contribution)'
      - visser:tacas:2020
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  notes/gan: []
  notes/garbage-collection:
  - - papers/hertz:oopsla:2005
    - - Quantifying the performance of garbage collection vs. explicit memory management
      - hertz:oopsla:2005
  notes/gating-network:
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  notes/genetic-algorithm:
  - - papers/hadjilambrou:ispass:2019
    - - 'GeST: An automatic framework for generating CPU stress-tests'
      - hadjilambrou:ispass:2019
  notes/ghost-code:
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  notes/google:
  - - papers/abadi:arxiv:2016
    - - 'TensorFlow: Large-scale machine learning on heterogeneous distributed systems'
      - abadi:arxiv:2016
  - - papers/chang:tocs:2012
    - - 'Bigtable: A distributed storage system for structured data'
      - chang:tocs:2012
  - - papers/corbett:tocs:2013
    - - 'Spanner: Google''s globally distributed database'
      - corbett:tocs:2013
  - - papers/dean:cacm:2013
    - - The tail at scale
      - dean:cacm:2013
  - - papers/elsen:arxiv:2019
    - - Fast sparse ConvNets
      - elsen:arxiv:2019
  - - papers/evci:arxiv:2021
    - - 'Rigging the lottery: Making all tickets winners'
      - evci:arxiv:2021
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/gale:arxiv:2019
    - - The state of sparsity in deep neural networks
      - gale:arxiv:2019
  - - papers/gale:arxiv:2020
    - - Sparse GPU kernels for deep learning
      - gale:arxiv:2020
  - - papers/hochschild:hotos:2021
    - - Cores that don't count
      - hochschild:hotos:2021
  - - papers/ivankovic:fse:2019
    - - Code coverage at Google
      - ivankovic:fse:2019
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  - - papers/macvean:ppig:2016
    - - API usability at scale
      - macvean:ppig:2016
  - - papers/potvin:cacm:2016
    - - Why Google stores billions of lines of code in a single repository
      - potvin:cacm:2016
  - - papers/sadowski:cacm:2018
    - - Lessons from building static analysis tools at Google
      - sadowski:cacm:2018
  - - papers/sadowski:icse-seip:2018
    - - 'Modern code review: A case study at Google'
      - sadowski:icse-seip:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  - - papers/wright:icsm:2013
    - - Large-scale automated refactoring using ClangMR
      - wright:icsm:2013
  notes/hardware:
  - - papers/bryant:cmu:2018
    - - Formal verification of pipelined Y86-64 microprocessors with UCLID5
      - bryant:cmu:2018
  - - papers/choi:icfp:2017
    - - 'Kami: A platform for high-level parametric hardware specification and its
        modular verification'
      - choi:icfp:2017
  - - papers/cock:ccs:2014
    - - 'The last mile: An empirical study of timing channels on seL4'
      - cock:ccs:2014
  - - papers/ferraiuolo:ccs:2018
    - - 'HyperFlow: A processor architecture for nonmalleable, timing-safe information
        flow security'
      - ferraiuolo:ccs:2018
  - - papers/ferraiuolo:dac:2017
    - - Secure information flow verification with mutable dependent types
      - ferraiuolo:dac:2017
  - - papers/gleissenthall:ccs:2021
    - - Solver-aided constant-time hardware verification
      - gleissenthall:ccs:2021
  - - papers/goel:cav:2021
    - - Balancing automation and control for formal verification of microprocessors
      - goel:cav:2021
  - - papers/goel:cpp:2020
    - - Verifying x86 instruction implementations
      - goel:cpp:2020
  - - papers/goel:spisa:2019
    - - Using x86isa for microcode verification
      - goel:spisa:2019
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/hedge:micro:2019
    - - 'ExTensor: An accelerator for sparse tensor algebra'
      - hedge:micro:2019
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  - - papers/liu:cpsspc:2018
    - - Secure autonomous cyber-physical systems through verifiable information flow
        control
      - liu:cpsspc:2018
  - - papers/loow:pldi:2019
    - - Verified compilation on a verified processor
      - loow:pldi:2019
  - - papers/oberg:dac:2010
    - - Theoretical analysis of gate level information flow tracking
      - oberg:dac:2010
  - - papers/qin:hpca:2020
    - - 'SIGMA: A sparse and irregular GEMM accelerator with flexible interconnects
        for DNN training'
      - qin:hpca:2020
  - - papers/skorstengaard:esop:2018
    - - Reasoning about a machine with local capabilities
      - skorstengaard:esop:2018
  - - papers/skorstengaard:popl:2019
    - - 'StkTokens: Enforcing well-bracketed control flow and stack encapsulation
        using linear capabilities'
      - skorstengaard:popl:2019
  - - papers/tiwari:asplos:2009
    - - Complete information flow tracking from the gates up
      - tiwari:asplos:2009
  - - papers/tiwari:isca:2009
    - - 'Execution leases: A hardware-supported mechanism for enforcing strong non-interference'
      - tiwari:isca:2009
  - - papers/tiwari:isca:2011
    - - Crafting a usable microkernel, processor, and I/O system with strict and provable
        information flow security
      - tiwari:isca:2011
  - - papers/vega:pldi:2021
    - - 'Reticle: A virtual machine for programming modern FPGAs'
      - vega:pldi:2021
  - - papers/vila:pldi:2020
    - - 'CacheQuery: Learning replacement policies from hardware caches'
      - vila:pldi:2020
  - - papers/zhang:asplos:2015
    - - A hardware design language for timing-sensitive information flow security
      - zhang:asplos:2015
  notes/hardware-faults:
  - - papers/dixit:arxiv:2021
    - - Silent data corruptions at scale
      - dixit:arxiv:2021
  - - papers/hadjilambrou:ispass:2019
    - - 'GeST: An automatic framework for generating CPU stress-tests'
      - hadjilambrou:ispass:2019
  - - papers/hochschild:hotos:2021
    - - Cores that don't count
      - hochschild:hotos:2021
  notes/haskell-language:
  - - papers/chakravarty:haskffi:2003
    - - 'The Haskell 98 foreign function interface 1.0: An addendum to the Haskell
        98 report'
      - chakravarty:haskffi:2003
  - - papers/jones:hasklang:1999
    - - 'Haskell 98: A non-strict, purely functional language'
      - jones:hasklang:1999
  - - papers/jones:hasklib:1999
    - - Standard libraries for the Haskell 98 programming language
      - jones:hasklib:1999
  - - papers/jones:hw:1997
    - - 'Green Card: a foreign-language interface for Haskell'
      - jones:hw:1997
  - - papers/jones:pldi:1999
    - - A semantics for imprecise exceptions
      - jones:pldi:1999
  - - papers/peterson:hw:1995
    - - Adding records to Haskell
      - peterson:hw:1995
  - - papers/peterson:padl:2001
    - - 'FVision: A declarative language for visual tracking'
      - peterson:padl:2001
  - - papers/reid:gfpw:1993
    - - Implementing Fudgets with standard widget sets
      - reid:gfpw:1993
  - - papers/reid:gfpw:1994
    - - 'Malloc pointers and stable pointers: Improving Haskell''s foreign language
        interface'
      - reid:gfpw:1994
  - - papers/reid:hw:1995
    - - A proposal for the standard Haskell libraries
      - reid:hw:1995
  - - papers/reid:icse:1999
    - - 'Prototyping real-time vision systems: An experiment in DSL design'
      - reid:icse:1999
  - - papers/reid:ifl:1998
    - - 'Putting the spine back in the Spineless Tagless G-Machine: An implementation
        of resumable black-holes'
      - reid:ifl:1998
  - - papers/reid:yale:1998
    - - Designing the standard Haskell libraries
      - reid:yale:1998
  - - papers/reid:yale:2001
    - - The Hugs graphics library (version 2.0)
      - reid:yale:2001
  notes/hol-theorem-prover:
  - - papers/boulton:tpcd:1993
    - - Experience with embedding hardware description languages in HOL
      - boulton:tpcd:1993
  - - papers/gordon:book:1993
    - - 'Introduction to HOL: A Theorem Proving Environment for Higher Order Logic'
      - gordon:book:1993
  notes/horn-clause:
  - - papers/gennari:vstte:2018
    - - Executable counterexamples in software model checking
      - gennari:vstte:2018
  - - papers/gurfinkel:cav:2015
    - - The SeaHorn verification framework
      - gurfinkel:cav:2015
  - - papers/kostyukov:pldi:2021
    - - Beyond the elementary representations of program invariants over algebraic
        data types
      - kostyukov:pldi:2021
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  - - papers/ullrich:msc:2016
    - - Simple verification of Rust programs via functional purification
      - ullrich:msc:2016
  notes/human-factors:
  - - papers/krishnamurthi:fm:2019
    - - The human in formal methods
      - krishnamurthi:fm:2019
  notes/hybrid-testing:
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/majumdar:icse:2007
    - - Hybrid concolic testing
      - majumdar:icse:2007
  - - papers/poeplau:acsac:2019
    - - 'Systematic comparison of symbolic execution systems: Intermediate representation
        and its generation'
      - poeplau:acsac:2019
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/stephens:ndss:2016
    - - 'Driller: Augmenting fuzzing through selective symbolic execution'
      - stephens:ndss:2016
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  - - papers/zhao:ndss:2019
    - - 'Send hardest problems my way: Probabilistic path prioritization for hybrid
        fuzzing'
      - zhao:ndss:2019
  notes/hyperproperty:
  - - papers/clarkson:jcs:2010
    - - Hyperproperties
      - clarkson:jcs:2010
  notes/implicit-dynamic-frames:
  - - papers/kassios:fm:2006
    - - 'Dynamic frames: Support for framing, dependencies and sharing without restrictions'
      - kassios:fm:2006
  - - papers/smans:ecoop:2009
    - - 'Implicit dynamic frames: Combining dynamic frames and separation logic'
      - smans:ecoop:2009
  notes/information-flow:
  - - papers/almeida:security:2016
    - - Verifying constant-time implementations
      - almeida:security:2016
  - - papers/barthe:csfw:2004
    - - Secure information flow by self composition
      - barthe:csfw:2004
  - - papers/barthe:iacr:2007
    - - Provably secure compilation of side-channel countermeasures.
      - barthe:iacr:2007
  - - papers/barthe:mscs:2011
    - - Secure information flow by self-composition
      - barthe:mscs:2011
  - - papers/clark:entcs:2002
    - - Quantitative analysis of the leakage of confidential data
      - clark:entcs:2002
  - - papers/clarkson:jcs:2010
    - - Hyperproperties
      - clarkson:jcs:2010
  - - papers/costanzo:pldi:2016
    - - End-to-end verification of information flow security for C and assembly programs
      - costanzo:pldi:2016
  - - papers/daniel:sandp:2020
    - - 'Binsec/Rel: Efficient relational symbolic execution for constant-time at
        binary-level'
      - daniel:sandp:2020
  - - papers/deng:hasp:2019
    - - 'SecChisel: Language and tool for practical and scalable security verification
        of security-aware hardware architectures'
      - deng:hasp:2019
  - - papers/denning:cacm:1976
    - - A lattice model of secure information flow
      - denning:cacm:1976
  - - papers/efstathopoulos:sosp:2005
    - - Labels and event processes in the Asbestos operating system
      - efstathopoulos:sosp:2005
  - - papers/ferraiuolo:asplos:2017
    - - Verification of a practical hardware security architecture through static
        information flow analysis
      - ferraiuolo:asplos:2017
  - - papers/ferraiuolo:ccs:2018
    - - 'HyperFlow: A processor architecture for nonmalleable, timing-safe information
        flow security'
      - ferraiuolo:ccs:2018
  - - papers/ferraiuolo:dac:2017
    - - Secure information flow verification with mutable dependent types
      - ferraiuolo:dac:2017
  - - papers/ferraiuolo:sosp:2017
    - - 'Komodo: Using verification to disentangle secure-enclave hardware from software'
      - ferraiuolo:sosp:2017
  - - papers/gleissenthall:ccs:2021
    - - Solver-aided constant-time hardware verification
      - gleissenthall:ccs:2021
  - - papers/goguen:secpriv:1982
    - - Security policies and security models
      - goguen:secpriv:1982
  - - papers/goguen:secpriv:1984
    - - Unwinding and inference control
      - goguen:secpriv:1984
  - - papers/hritcu:icfp:2013
    - - Testing noninterference, quickly
      - hritcu:icfp:2013
  - - papers/khakpour:cpp:2013
    - - Machine assisted proof of ARMv7 instruction level isolation properties
      - khakpour:cpp:2013
  - - papers/krohn:sosp:2007
    - - Information flow control for standard OS abstractions
      - krohn:sosp:2007
  - - papers/leinenbach:fm:2009
    - - Verifying the Microsoft Hyper-V hypervisor with VCC
      - leinenbach:fm:2009
  - - papers/liu:cpsspc:2018
    - - Secure autonomous cyber-physical systems through verifiable information flow
        control
      - liu:cpsspc:2018
  - - papers/lowe:csfw:2015
    - - Quantifying information flow
      - lowe:csfw:2015
  - - papers/mantel:pls:2007
    - - Controlling the what and where of declassification in language-based security
      - mantel:pls:2007
  - - papers/mantel:sp:2001
    - - Preserving information flow properties under refinement
      - mantel:sp:2001
  - - papers/marco:cav:2021
    - - 'Product programs in the wild: Retrofitting program verifiers to check information
        flow security'
      - marco:cav:2021
  - - papers/murray:secpriv:2013
    - - 'seL4: from general purpose to a proof of information flow enforcement'
      - murray:secpriv:2013
  - - papers/myers:csfw:2004
    - - Enforcing robust declassification
      - myers:csfw:2004
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/oberg:dac:2010
    - - Theoretical analysis of gate level information flow tracking
      - oberg:dac:2010
  - - papers/rushby:sri:1992
    - - Noninterference, transitivity, and channel-control security policies
      - rushby:sri:1992
  - - papers/sabelfield:jcs:2009
    - - 'Declassification: Dimensions and principles'
      - sabelfield:jcs:2009
  - - papers/sigurbjarnarson:osdi:2018
    - - 'Nickel: A framework for design and verification of information flow control
        systems'
      - sigurbjarnarson:osdi:2018
  - - papers/smith:fossacs:2009
    - - On the foundations of quantitative information flow
      - smith:fossacs:2009
  - - papers/spencer:security:1999
    - - 'The Flask security architecture: System support for diverse security policies'
      - spencer:security:1999
  - - papers/tiwari:asplos:2009
    - - Complete information flow tracking from the gates up
      - tiwari:asplos:2009
  - - papers/tiwari:isca:2009
    - - 'Execution leases: A hardware-supported mechanism for enforcing strong non-interference'
      - tiwari:isca:2009
  - - papers/tiwari:isca:2011
    - - Crafting a usable microkernel, processor, and I/O system with strict and provable
        information flow security
      - tiwari:isca:2011
  - - papers/vasudevan:usenix:2016
    - - "\xFCberSpark: Enforcing verifiable object abstractions for automated compositional\
        \ security analysis of a hypervisor"
      - vasudevan:usenix:2016
  - - papers/weigl:arxiv:2019
    - - 'Relational test tables: A practical specification language for evolution
        and security'
      - weigl:arxiv:2019
  - - papers/zdancewic:csfw:2001
    - - Robust declassification
      - zdancewic:csfw:2001
  - - papers/zdancewic:csfw:2003
    - - Observational determinism for concurrent program security
      - zdancewic:csfw:2003
  - - papers/zeldovich:osdi:2006
    - - Making information flow explicit in HiStar
      - zeldovich:osdi:2006
  - - papers/zhang:asplos:2015
    - - A hardware design language for timing-sensitive information flow security
      - zhang:asplos:2015
  notes/instruction-set-architecture:
  - - papers/armstrong:arw:2018
    - - 'Detailed models of instruction set architectures: From pseudocode to formal
        semantics'
      - armstrong:arw:2018
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/asanovic:phd:1998
    - - Vector microprocessors
      - asanovic:phd:1998
  - - papers/barbacci:ieee:1981
    - - 'Instruction set processor specifications (ISPS): The notation and its applications'
      - barbacci:ieee:1981
  - - papers/baumann:hotos:2017
    - - Hardware is the new software
      - baumann:hotos:2017
  - - papers/bell:afips:1970
    - - The PMS and ISP descriptive systems for computer structures
      - bell:afips:1970
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  - - papers/boettcher:date:2014
    - - 'Advanced SIMD: Extending the reach of contemporary SIMD architectures'
      - boettcher:date:2014
  - - papers/dam:ted:2013
    - - Machine code verification of a tiny ARM hypervisor
      - dam:ted:2013
  - - papers/dam:trusted:2013
    - - Machine code verification of a tiny ARM hypervisor
      - dam:trusted:2013
  - - papers/dasgupta:pldi:2019
    - - A complete formal semantics of x86-64 user-level instruction set architecture
      - dasgupta:pldi:2019
  - - papers/degenbaev:phd:2012
    - - Formal specification of the x86 instruction set architecture
      - degenbaev:phd:2012
  - - papers/fisher:isca:1983
    - - Very long instruction word architectures and the ELI-512
      - fisher:isca:1983
  - - papers/flur:popl:2016
    - - 'Modelling the ARMv8 architecture, operationally: concurrency and ISA'
      - flur:popl:2016
  - - papers/flur:popl:2017
    - - 'Mixed-size concurrency: ARM, POWER, C/C++11, and SC'
      - flur:popl:2017
  - - papers/fox:cambridge:2001
    - - A HOL specification of the ARM instruction set architecture
      - fox:cambridge:2001
  - - papers/fox:itp:2010
    - - A trustworthy monadic formalization of the ARMv7 instruction set architecture
      - fox:itp:2010
  - - papers/fox:itp:2012
    - - Directions in ISA specification
      - fox:itp:2012
  - - papers/fox:itps:2015
    - - Improved tool support for machine-code decompilation in HOL4
      - fox:itps:2015
  - - papers/fox:tphols:2003
    - - Formal specification and verification of ARM6
      - fox:tphols:2003
  - - papers/goel:acl2:2013
    - - Abstract stobjs and their application to ISA modeling
      - goel:acl2:2013
  - - papers/goel:fmcad:2014
    - - Simulation and formal verification of x86 machine-code programs that make
        system calls
      - goel:fmcad:2014
  - - papers/goel:pcs:2017
    - - Engineering a formal, executable x86 ISA simulator for software verification
      - goel:pcs:2017
  - - papers/goel:phd:2016
    - - Formal verification of application and system programs based on a validated
        x86 ISA model
      - goel:phd:2016
  - - papers/goel:spisa:2019
    - - Using x86isa for microcode verification
      - goel:spisa:2019
  - - papers/gray:micro:2015
    - - An integrated concurrency and core-ISA architectural envelope definition,
        and test oracle, for IBM POWER multiprocessors
      - gray:micro:2015
  - - papers/gross:micro:2016
    - - 'A retrospective on `MIPS: A microprocessor architecture'''
      - gross:micro:2016
  - - papers/hennessy:book:2011
    - - 'Computer architecture: A quantitative approach (Fifth edition)'
      - hennessy:book:2011
  - - papers/heule:pldi:2016
    - - 'Stratified synthesis: Automatically learning the x86-64 instruction set'
      - heule:pldi:2016
  - - papers/jensen:popl:2013
    - - High-level separation logic for low-level code
      - jensen:popl:2013
  - - papers/jiang:arxiv:2021
    - - 'Examiner: Automatically locating inconsistent instructions between real devices
        and CPU emulators for Arm'
      - jiang:arxiv:2021
  - - papers/kaufmann:utaustin:2012
    - - Towards a formal model of the x86 ISA
      - kaufmann:utaustin:2012
  - - papers/kozyrakis:phd:2002
    - - Scalable vector media processors for embedded systems
      - kozyrakis:phd:2002
  - - papers/lee:micro:1996
    - - Subword parallelism with MAX-2
      - lee:micro:1996
  - - papers/lockhart:ispass:2015
    - - 'Pydgin: generating fast instruction set simulators from simple architecture
        descriptions with meta-tracing JIT compilers'
      - lockhart:ispass:2015
  - - papers/morrisett:pldi:2012
    - - 'RockSalt: Better, faster, stronger SFI for the x86'
      - morrisett:pldi:2012
  - - papers/morrisett:wcsss:1999
    - - 'TALx86: A realistic typed assembly language'
      - morrisett:wcsss:1999
  - - papers/myreen:tphols:2009
    - - Verified LISP Implementations on ARM, x86 and PowerPC
      - myreen:tphols:2009
  - - papers/noonan:pldi:2016
    - - Polymorphic type inference for machine code
      - noonan:pldi:2016
  - - papers/patterson:cacm:1985
    - - Reduced instruction set computers
      - patterson:cacm:1985
  - - papers/patterson:sigarch:1980
    - - The case for the reduced instruction set computer
      - patterson:sigarch:1980
  - - papers/pdp11:book:1973
    - - PDP-11/45 processor handbook
      - pdp11:book:1973
  - - papers/peleg:micro:1996
    - - MMX technology extension to the Intel architecture
      - peleg:micro:1996
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/russell:cacm:1978
    - - The CRAY-1 computer system
      - russell:cacm:1978
  - - papers/sarkar:pldi:2011
    - - Understanding POWER multiprocessors
      - sarkar:pldi:2011
  - - papers/sarkar:popl:2009
    - - The semantics of x86-CC multiprocessor machine code
      - sarkar:popl:2009
  - - papers/seal:book:2000
    - - ARM Architecture Reference Manual (ARMv5 edition)
      - seal:book:2000
  - - papers/sewell:pldi:2013
    - - Translation validation for a verified OS kernel
      - sewell:pldi:2013
  - - papers/shi:phd:2013
    - - Certification of an instruction set simulator
      - shi:phd:2013
  - - papers/stephens:micro:2017
    - - The ARM scalable vector extension
      - stephens:micro:2017
  - - papers/tremblay:micro:1996
    - - VIS speeds new media processing
      - tremblay:micro:1996
  - - papers/watson:sandp:2015
    - - 'CHERI: A hybrid capability-system architecture for scalable software compartmentalization'
      - watson:sandp:2015
  notes/interactive-theorem-prover:
  - - papers/demoura:cade:2015
    - - The Lean theorem prover (system description)
      - demoura:cade:2015
  - - papers/gordon:book:1993
    - - 'Introduction to HOL: A Theorem Proving Environment for Higher Order Logic'
      - gordon:book:1993
  - - papers/nipkow:book:2002
    - - 'Isabelle/HOL: A proof assistant for higher-order logic'
      - nipkow:book:2002
  notes/intermediate-verification-language:
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/leino:tacas:2010
    - - 'A polymorphic intermediate verification language: Design and logical encoding'
      - leino:tacas:2010
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  - - papers/rakamaric:cav:2014
    - - 'SMACK: Decoupling source language details from verifier implementations'
      - rakamaric:cav:2014
  - - papers/siegel:sc:2015
    - - 'CIVL: the concurrency intermediate verification language'
      - siegel:sc:2015
  notes/interpolation:
  - - papers/baldoni:compsurv:2018
    - - A survey of symbolic execution techniques
      - baldoni:compsurv:2018
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/isa-specification:
  - - papers/armstrong:arw:2018
    - - 'Detailed models of instruction set architectures: From pseudocode to formal
        semantics'
      - armstrong:arw:2018
  - - papers/armstrong:cav:2021
    - - 'Isla: Integrating full-scale ISA semantics and axiomatic concurrency models'
      - armstrong:cav:2021
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/bansal:asplos:2006
    - - Automatic generation of peephole superoptimizers
      - bansal:asplos:2006
  - - papers/bansal:osdi:2008
    - - Binary translation using peephole superoptimizers
      - bansal:osdi:2008
  - - papers/barbacci:cmu:1972
    - - 'ISP: A language to describe instruction sets and other register transfer
        systems'
      - barbacci:cmu:1972
  - - papers/barbacci:ieee:1981
    - - 'Instruction set processor specifications (ISPS): The notation and its applications'
      - barbacci:ieee:1981
  - - papers/bauereiss:ucam:2021
    - - Verified security for the Morello capability-enhanced prototype Arm architecture
      - bauereiss:ucam:2021
  - - papers/baumann:eucnc:2016
    - - A high assurance virtualization platform for ARMv8
      - baumann:eucnc:2016
  - - papers/bell:afips:1970
    - - The PMS and ISP descriptive systems for computer structures
      - bell:afips:1970
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  - - papers/beyer:ijsttt:2006
    - - Putting it all together - Formal verification of the VAMP
      - beyer:ijsttt:2006
  - - papers/bishop:jacm:2019
    - - 'Engineering with logic: Rigorous test-oracle specification and validation
        for TCP/IP and the sockets API'
      - bishop:jacm:2019
  - - papers/blanqui:rapido:2011
    - - 'Designing a CPU model: from a pseudo-formal document to fast code'
      - blanqui:rapido:2011
  - - papers/bond:usenix:2017
    - - 'Vale: Verifying high-performance cryptographic assembly code'
      - bond:usenix:2017
  - - papers/brumley:cav:2011
    - - 'BAP: A binary analysis platform'
      - brumley:cav:2011
  - - papers/bryant:cmu:2018
    - - Formal verification of pipelined Y86-64 microprocessors with UCLID5
      - bryant:cmu:2018
  - - papers/campbell:fmcad:2016
    - - Extracting behaviour from an executable instruction set model
      - campbell:fmcad:2016
  - - papers/cattell:phd:1978
    - - Formalization and automatic derivation of code generators
      - cattell:phd:1978
  - - papers/cattell:toplas:1980
    - - Automatic derivation of code generators from machine descriptions
      - cattell:toplas:1980
  - - papers/cifuentes:computer:2000
    - - 'UQBT: Adaptable binary translation at low cost'
      - cifuentes:computer:2000
  - - papers/cifuentes:iwpc:1998
    - - Specifying the semantics of machine instructions
      - cifuentes:iwpc:1998
  - - papers/dam:ted:2013
    - - Machine code verification of a tiny ARM hypervisor
      - dam:ted:2013
  - - papers/dam:trusted:2013
    - - Machine code verification of a tiny ARM hypervisor
      - dam:trusted:2013
  - - papers/dasgupta:pldi:2019
    - - A complete formal semantics of x86-64 user-level instruction set architecture
      - dasgupta:pldi:2019
  - - papers/dasgupta:pldi:2020
    - - Scalable validation of binary lifters
      - dasgupta:pldi:2020
  - - papers/degenbaev:phd:2012
    - - Formal specification of the x86 instruction set architecture
      - degenbaev:phd:2012
  - - papers/dias:popl:2010
    - - Automatically generating instruction selectors using declarative machine descriptions
      - dias:popl:2010
  - - papers/falkoff:ibm:1964
    - - A formal description of SYSTEM/360
      - falkoff:ibm:1964
  - - papers/fauth:edtc:1995
    - - Describing instruction set processors using nML
      - fauth:edtc:1995
  - - papers/fernandez:icse:1997
    - - Automatic checking of instruction specifications
      - fernandez:icse:1997
  - - papers/flur:popl:2016
    - - 'Modelling the ARMv8 architecture, operationally: concurrency and ISA'
      - flur:popl:2016
  - - papers/flur:popl:2017
    - - 'Mixed-size concurrency: ARM, POWER, C/C++11, and SC'
      - flur:popl:2017
  - - papers/fox:cambridge:2001
    - - A HOL specification of the ARM instruction set architecture
      - fox:cambridge:2001
  - - papers/fox:cpp:2017
    - - Verified compilation of CakeML to multiple machine-code targets
      - fox:cpp:2017
  - - papers/fox:itp:2010
    - - A trustworthy monadic formalization of the ARMv7 instruction set architecture
      - fox:itp:2010
  - - papers/fox:itp:2012
    - - Directions in ISA specification
      - fox:itp:2012
  - - papers/fox:itps:2015
    - - Improved tool support for machine-code decompilation in HOL4
      - fox:itps:2015
  - - papers/fox:tphols:2003
    - - Formal specification and verification of ARM6
      - fox:tphols:2003
  - - papers/godefroid:pldi:2012
    - - Automated synthesis of symbolic instruction encodings from I/O samples
      - godefroid:pldi:2012
  - - papers/goel:acl2:2013
    - - Abstract stobjs and their application to ISA modeling
      - goel:acl2:2013
  - - papers/goel:cav:2021
    - - Balancing automation and control for formal verification of microprocessors
      - goel:cav:2021
  - - papers/goel:cpp:2020
    - - Verifying x86 instruction implementations
      - goel:cpp:2020
  - - papers/goel:fmcad:2014
    - - Simulation and formal verification of x86 machine-code programs that make
        system calls
      - goel:fmcad:2014
  - - papers/goel:pcs:2017
    - - Engineering a formal, executable x86 ISA simulator for software verification
      - goel:pcs:2017
  - - papers/goel:phd:2016
    - - Formal verification of application and system programs based on a validated
        x86 ISA model
      - goel:phd:2016
  - - papers/goel:spisa:2019
    - - Using x86isa for microcode verification
      - goel:spisa:2019
  - - papers/gray:micro:2015
    - - An integrated concurrency and core-ISA architectural envelope definition,
        and test oracle, for IBM POWER multiprocessors
      - gray:micro:2015
  - - papers/hardin:acl2:2006
    - - A robust machine code proof framework for highly secure applications
      - hardin:acl2:2006
  - - papers/hendrix:itp:2019
    - - Towards verified binary raising
      - hendrix:itp:2019
  - - papers/hennessy:micro:1982
    - - 'MIPS: A microprocessor architecture'
      - hennessy:micro:1982
  - - papers/heule:pldi:2016
    - - 'Stratified synthesis: Automatically learning the x86-64 instruction set'
      - heule:pldi:2016
  - - papers/hsiao:micro:2021
    - - Synthesizing formal models of hardware from RTL for efficient verification
        of memory model implementations
      - hsiao:micro:2021
  - - papers/huang:todaes:2019
    - - 'Instruction-level abstraction (ILA): A uniform specification for system-on-chip
        (SoC) verification'
      - huang:todaes:2019
  - - papers/hunt:jar:1989
    - - Microprocessor design verification
      - hunt:jar:1989
  - - papers/jensen:popl:2013
    - - High-level separation logic for low-level code
      - jensen:popl:2013
  - - papers/jiang:arxiv:2021
    - - 'Examiner: Automatically locating inconsistent instructions between real devices
        and CPU emulators for Arm'
      - jiang:arxiv:2021
  - - papers/joloboff:dsetta:2015
    - - Towards verified faithful simulation
      - joloboff:dsetta:2015
  - - papers/kaufmann:utaustin:2012
    - - Towards a formal model of the x86 ISA
      - kaufmann:utaustin:2012
  - - papers/kennedy:ppdp:2013
    - - 'Coq: The world''s best macro assembler?'
      - kennedy:ppdp:2013
  - - papers/kuhne:fmcad:2010
    - - Automated formal verification of processors based on architectural models
      - kuhne:fmcad:2010
  - - papers/lim:toplas:2013
    - - 'TSL: A system for generating abstract interpreters and its application to
        machine-code analysis'
      - lim:toplas:2013
  - - papers/liu:arxiv:2021
    - - Proving LTL properties of bitvector programs and decompiled binaries (extended)
      - liu:arxiv:2021
  - - papers/lockhart:ispass:2015
    - - 'Pydgin: generating fast instruction set simulators from simple architecture
        descriptions with meta-tracing JIT compilers'
      - lockhart:ispass:2015
  - - papers/mishra:book:2008
    - - Processor description languages
      - mishra:book:2008
  - - papers/morrisett:pldi:2012
    - - 'RockSalt: Better, faster, stronger SFI for the x86'
      - morrisett:pldi:2012
  - - papers/myreen:fse:2007
    - - Hoare logic for ARM machine code
      - myreen:fse:2007
  - - papers/myreen:itp:2011
    - - A verified runtime for a verified theorem prover
      - myreen:itp:2011
  - - papers/myreen:popl:2010
    - - Verified just-in-time compiler on x86
      - myreen:popl:2010
  - - papers/myreen:tphols:2009
    - - Verified LISP Implementations on ARM, x86 and PowerPC
      - myreen:tphols:2009
  - - papers/noonan:pldi:2016
    - - Polymorphic type inference for machine code
      - noonan:pldi:2016
  - - papers/nordholz:eurosys:2020
    - - Design of a symbolically executable embedded hypervisor
      - nordholz:eurosys:2020
  - - papers/pdp11:book:1973
    - - PDP-11/45 processor handbook
      - pdp11:book:1973
  - - papers/pulte:popl:2017
    - - 'Simplifying ARM concurrency: Multicopy-atomic axiomatic and operational models
        for ARMv8'
      - pulte:popl:2017
  - - papers/ramsey:lctes:1998
    - - Machine descriptions to build tools for embedded systems
      - ramsey:lctes:1998
  - - papers/ramsey:toplas:1997
    - - Specifying representations of machine instructions
      - ramsey:toplas:1997
  - - papers/regehr:asplos:2004
    - - 'HOIST: a system for automatically deriving static analyzers for embedded
        systems'
      - regehr:asplos:2004
  - - papers/regehr:emsoft:2003
    - - Eliminating stack overflow by abstract interpretation
      - regehr:emsoft:2003
  - - papers/regehr:lctes:2006
    - - Deriving abstract transfer functions for analyzing embedded software
      - regehr:lctes:2006
  - - papers/regehr:tecs:2005
    - - Eliminating stack overflow by abstract interpretation
      - regehr:tecs:2005
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/roessle:cpp:2019
    - - Formally verified big step semantics out of x86-64 binaries
      - roessle:cpp:2019
  - - papers/samet:ieeetse:1977
    - - A machine description facility for compiler testing
      - samet:ieeetse:1977
  - - papers/samet:phd:1975
    - - Automatically proving the correctness of translations involving optimized
        code.
      - samet:phd:1975
  - - papers/sarkar:pldi:2011
    - - Understanding POWER multiprocessors
      - sarkar:pldi:2011
  - - papers/sarkar:popl:2009
    - - The semantics of x86-CC multiprocessor machine code
      - sarkar:popl:2009
  - - papers/schmaltz:vstte:2012
    - - Integrated semantics of intermediate-language C and macro-assembler for pervasive
        formal verification of operating systems and hypervisors from VerisoftXT
      - schmaltz:vstte:2012
  - - papers/seal:book:2000
    - - ARM Architecture Reference Manual (ARMv5 edition)
      - seal:book:2000
  - - papers/sevcik:jacm:2013
    - - 'CompCertTSO: A verified compiler for relaxed-memory concurrency'
      - sevcik:jacm:2013
  - - papers/sewell:pldi:2013
    - - Translation validation for a verified OS kernel
      - sewell:pldi:2013
  - - papers/shi:phd:2013
    - - Certification of an instruction set simulator
      - shi:phd:2013
  - - papers/simner:pls:2020
    - - 'ARMv8-A system semantics: Instruction fetch in relaxed architectures'
      - simner:pls:2020
  - - papers/su:computer:1974
    - - A survey of computer hardware description languages in the U.S.A.
      - su:computer:1974
  - - papers/syeda:itp:2018
    - - Program verification in the presence of cached address translation
      - syeda:itp:2018
  - - papers/tan:icfp:2016
    - - A new verified compiler backend for CakeML
      - tan:icfp:2016
  - - papers/tao:sosp:2021
    - - Formal verification of a multiprocessor hypervisor on Arm relaxed memory hardware
      - tao:sosp:2021
  - - papers/watson:sandp:2015
    - - 'CHERI: A hybrid capability-system architecture for scalable software compartmentalization'
      - watson:sandp:2015
  - - papers/xu:cav:2021
    - - Automatic generation and validation of instruction encoders and decoders
      - xu:cav:2021
  - - papers/zhang:fmcad:2018
    - - Integrating memory consistency models with instruction-level abstraction for
        heterogeneous system-on-chip verification
      - zhang:fmcad:2018
  - - papers/zivojnovic:vlsi:1996
    - - "LISA \u2013 machine description language and generic machine model for HW/SW\
        \ co-design"
      - zivojnovic:vlsi:1996
  - - papers/zorn:iscawddd:2017
    - - Solver aided reverse engineering of architectural features
      - zorn:iscawddd:2017
  notes/isabelle-theorem-prover:
  - - papers/mulligan:icfp:2014
    - - 'Lem: Reusable engineering of real-world semantics'
      - mulligan:icfp:2014
  notes/isps:
  - - papers/barbacci2:computer:1973
    - - 'ISP: A notation to describe a computer''s instruction sets'
      - barbacci2:computer:1973
  - - papers/barbacci:afips:1977
    - - 'An architectural research facility: ISP descriptions, simulation, data collection'
      - barbacci:afips:1977
  - - papers/barbacci:cmu:1972
    - - 'ISP: A language to describe instruction sets and other register transfer
        systems'
      - barbacci:cmu:1972
  - - papers/barbacci:computer:1973
    - - 'PMS: A notation to describe computer structures'
      - barbacci:computer:1973
  - - papers/barbacci:computer:1977
    - - Evaluation of the CFA test programs via formal computer descriptions
      - barbacci:computer:1977
  - - papers/barbacci:computer:1978
    - - Using emulation to verify formal architecture descriptions
      - barbacci:computer:1978
  - - papers/barbacci:dac:1979
    - - Instruction set processor specifications for simulation, evaluation, and synthesis
      - barbacci:dac:1979
  - - papers/barbacci:icse:1988
    - - Programming at the Processor-Memory-Switch level
      - barbacci:icse:1988
  - - papers/barbacci:ieee:1981
    - - 'Instruction set processor specifications (ISPS): The notation and its applications'
      - barbacci:ieee:1981
  - - papers/barbacci:ieeetc:1975
    - - A comparison of register transfer languages for describing computers and digital
        systems
      - barbacci:ieeetc:1975
  - - papers/barbacci:ieeetc:1981
    - - 'Instruction set processor specifications (ISPS): The notation and its applications'
      - barbacci:ieeetc:1981
  - - papers/barbacci:isca:1973
    - - Automated exploration of the design space for register transfer (RT) systems
      - barbacci:isca:1973
  - - papers/bell:afips:1970
    - - The PMS and ISP descriptive systems for computer structures
      - bell:afips:1970
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  - - papers/chu:ieeedtc:1992
    - - 'Three decades of HDLs: Part I, CDL through TI-HDL'
      - chu:ieeedtc:1992
  - - papers/dam:ieeetc:1981
    - - Simulation of a horizontal bit-sliced processor using the ISPS architecture
        simulation facility
      - dam:ieeetc:1981
  - - papers/djordjevic:cj:1985
    - - A PMS level notation for the description and simulation of digital systems
      - djordjevic:cj:1985
  - - papers/pdp11:book:1973
    - - PDP-11/45 processor handbook
      - pdp11:book:1973
  - - papers/su:computer:1974
    - - A survey of computer hardware description languages in the U.S.A.
      - su:computer:1974
  notes/ivy-verifier:
  - - papers/mcmillan:sigcomm:2019
    - - Formal specification and testing of QUIC
      - mcmillan:sigcomm:2019
  notes/java-pathfinder:
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/qiu:icse:2017
    - - A synergistic approach for distributed symbolic execution using test ranges
      - qiu:icse:2017
  - - papers/qiu:nfm:2018
    - - Using test ranges to improve symbolic execution
      - qiu:nfm:2018
  notes/javascript:
  - - papers/bodin:popl:2014
    - - A trusted mechanised JavaScript specification
      - bodin:popl:2014
  notes/klee-verifier:
  - - papers/avgerinos:cacm:2014
    - - Automatic exploit generation
      - avgerinos:cacm:2014
  - - papers/baldoni:compsurv:2018
    - - A survey of symbolic execution techniques
      - baldoni:compsurv:2018
  - - papers/beyer:ase:2019
    - - 'TestCov: Robust test-suite execution and coverage measurement'
      - beyer:ase:2019
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/busse:issta:2020
    - - Running symbolic execution forever
      - busse:issta:2020
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  - - papers/cadar:fse:2015
    - - Targeted program transformations for symbolic execution
      - cadar:fse:2015
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/chipounov:hotdep:2009
    - - Selective symbolic execution
      - chipounov:hotdep:2009
  - - papers/cui:asplos:2013
    - - Verifying systems rules using rule-directed symbolic execution
      - cui:asplos:2013
  - - papers/galea:arxiv:2018
    - - Evaluating manual intervention to address the challenges of bug finding with
        KLEE
      - galea:arxiv:2018
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/kapus:fse:2019
    - - A segmented memory model for symbolic execution
      - kapus:fse:2019
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  - - papers/lindner:indin:2019
    - - 'Verification of safety functions implemented in Rust: A symbolic execution
        based approach'
      - lindner:indin:2019
  - - papers/milushev:forte:2012
    - - Noninterference via symbolic execution
      - milushev:forte:2012
  - - papers/pandey:issta:2019
    - - Deferred concretization in symbolic execution via fuzzing
      - pandey:issta:2019
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  - - papers/rath:epiq:2018
    - - Interoperability-guided testing of QUIC implementations using symbolic execution
      - rath:epiq:2018
  - - papers/romano:phd:2014
    - - Methods for binary symbolic execution
      - romano:phd:2014
  - - papers/rutledge:icse:2020
    - - 'PG-KLEE: Trading soundness for coverage'
      - rutledge:icse:2020
  - - papers/siddiqui:oopsla:2012
    - - Scaling symbolic execution using ranged analysis
      - siddiqui:oopsla:2012
  - - papers/trabish:icse:2018
    - - Chopped symbolic execution
      - trabish:icse:2018
  - - papers/wagner:hotos:2013
    - - '-Overify: Optimizing programs for fast verification'
      - wagner:hotos:2013
  - - papers/zhang:apsec:2018
    - - Boost symbolic execution using dynamic state merging and forking
      - zhang:apsec:2018
  notes/kripke-structure:
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/weigl:arxiv:2019
    - - 'Relational test tables: A practical specification language for evolution
        and security'
      - weigl:arxiv:2019
  notes/l3:
  - - papers/fox:itp:2012
    - - Directions in ISA specification
      - fox:itp:2012
  notes/lazy-initialization:
  - - papers/brown:sec:2020
    - - 'Sys: A static/symbolic tool for finding good bugs in good (browser) code'
      - brown:sec:2020
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  - - papers/engler:issta:2007
    - - 'Under-constrained execution: Making automatic code destruction easy and scalable'
      - engler:issta:2007
  - - papers/godefroid:icse:2014
    - - Micro execution
      - godefroid:icse:2014
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  notes/lean-theorem-prover:
  - - papers/demoura:cade:2015
    - - The Lean theorem prover (system description)
      - demoura:cade:2015
  notes/linear-logic:
  - - papers/morrisett:wcsss:1999
    - - 'TALx86: A realistic typed assembly language'
      - morrisett:wcsss:1999
  - - papers/nanevski:icfp:2008
    - - 'Ynot: Dependent types for imperative programs'
      - nanevski:icfp:2008
  - - papers/smith:esop:2000
    - - Alias types
      - smith:esop:2000
  - - papers/walker:tic:2001
    - - Alias types for recursive data structures
      - walker:tic:2001
  notes/liquid-type:
  - - papers/xi:jfp:2007
    - - Dependent ML An approach to practical programming with dependent types
      - xi:jfp:2007
  notes/lisa:
  - - papers/zivojnovic:vlsi:1996
    - - "LISA \u2013 machine description language and generic machine model for HW/SW\
        \ co-design"
      - zivojnovic:vlsi:1996
  notes/llbmc-verifier:
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  notes/llvm-compiler:
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/gurfinkel:cav:2015
    - - The SeaHorn verification framework
      - gurfinkel:cav:2015
  - - papers/lattner:cgo:2004
    - - 'LLVM: a compilation framework for lifelong program analysis and transformation'
      - lattner:cgo:2004
  - - papers/merz:vstte:2012
    - - 'LLBMC: Bounded model checking of C and C++ programs using a compiler IR'
      - merz:vstte:2012
  - - papers/mukherjee:oopsla:2020
    - - Dataflow-based pruning for speeding up superoptimization
      - mukherjee:oopsla:2020
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/rakamaric:cav:2014
    - - 'SMACK: Decoupling source language details from verifier implementations'
      - rakamaric:cav:2014
  notes/loop-invariant:
  - - papers/hatcliff:compsurv:2012
    - - Behavioral interface specification languages
      - hatcliff:compsurv:2012
  - - papers/hehner:vstte:2008
    - - Specified blocks
      - hehner:vstte:2008
  - - papers/sharma:pls:2013
    - - A data driven approach for algebraic loop invariants
      - sharma:pls:2013
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  notes/lstm:
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/machine-learning:
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  notes/magic-wand:
  - - papers/blom:ijsttt:2015
    - - Witnessing the elimination of magic wands
      - blom:ijsttt:2015
  - - papers/hobor:popl:2013
    - - The ramifications of sharing in data structures
      - hobor:popl:2013
  - - papers/krishnaswami:tldi:2010
    - - Verifying event-driven programs using ramified frame properties
      - krishnaswami:tldi:2010
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  - - papers/schwerhoff:ecoop:2015
    - - Lightweight support for magic wands in an automatic verifier
      - schwerhoff:ecoop:2015
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  notes/mayhem:
  - - papers/cha:sandp:2012
    - - Unleashing Mayhem on binary code
      - cha:sandp:2012
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/mcsema-tool:
  - - papers/dasgupta:pldi:2020
    - - Scalable validation of binary lifters
      - dasgupta:pldi:2020
  notes/memory-coherence:
  - - papers/li:tocs:1989
    - - Memory coherence in shared virtual memory systems
      - li:tocs:1989
  notes/memory-management:
  - - papers/hertz:oopsla:2005
    - - Quantifying the performance of garbage collection vs. explicit memory management
      - hertz:oopsla:2005
  notes/memory-safety:
  - - papers/azevedo:post:2018
    - - The meaning of memory safety
      - azevedo:post:2018
  - - papers/szekeres:sandp:2013
    - - 'SoK: Eternal war in memory'
      - szekeres:sandp:2013
  notes/microarchitecture:
  - - papers/asanovic:phd:1998
    - - Vector microprocessors
      - asanovic:phd:1998
  - - papers/baumann:hotos:2017
    - - Hardware is the new software
      - baumann:hotos:2017
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  - - papers/bird:sc:1993
    - - The effectiveness of decoupling
      - bird:sc:1993
  - - papers/fauth:edtc:1995
    - - Describing instruction set processors using nML
      - fauth:edtc:1995
  - - papers/fisher:isca:1983
    - - Very long instruction word architectures and the ELI-512
      - fisher:isca:1983
  - - papers/fox:ucam:2002
    - - Formal verification of the ARM6 micro-architecture
      - fox:ucam:2002
  - - papers/ge:jce:2016
    - - A survey of microarchitectural timing attacks and countermeasures on contemporary
        hardware
      - ge:jce:2016
  - - papers/gleissenthall:ccs:2021
    - - Solver-aided constant-time hardware verification
      - gleissenthall:ccs:2021
  - - papers/gross:micro:2016
    - - 'A retrospective on `MIPS: A microprocessor architecture'''
      - gross:micro:2016
  - - papers/guanciale:ccs:2020
    - - 'InSpectre: Breaking and fixing microarchitectural vulnerabilities by formal
        analysis'
      - guanciale:ccs:2020
  - - papers/hennessy:book:2011
    - - 'Computer architecture: A quantitative approach (Fifth edition)'
      - hennessy:book:2011
  - - papers/kim:isca:2014
    - - 'Flipping bits in memory without accessing them: An experimental study of
        DRAM disturbance errors'
      - kim:isca:2014
  - - papers/kocher:arxiv:2018
    - - 'Spectre attacks: Exploiting speculative execution'
      - kocher:arxiv:2018
  - - papers/kocher:crypto:1999
    - - Differential power analysis
      - kocher:crypto:1999
  - - papers/kozyrakis:phd:2002
    - - Scalable vector media processors for embedded systems
      - kozyrakis:phd:2002
  - - papers/kroening:dac:2001
    - - Automated pipeline design
      - kroening:dac:2001
  - - papers/kroening:itg:2000
    - - Proving the correctness of pipelined micro-architectures
      - kroening:itg:2000
  - - papers/kumar:isca:2004
    - - Single-ISA heterogeneous multi-core architectures for multithreaded workload
        performance
      - kumar:isca:2004
  - - papers/palacharla:micro:1995
    - - Decoupling integer execution in superscalar processors
      - palacharla:micro:1995
  - - papers/smith:tocs:1984
    - - Decoupled access/execute computer architectures
      - smith:tocs:1984
  - - papers/tang:sec:2017
    - - 'CLKSCREW: Exposing the perils of security-oblivious energy management'
      - tang:sec:2017
  notes/mimd:
  - - papers/flynn:ieeeproc:1966
    - - Very high-speed computing systems
      - flynn:ieeeproc:1966
  notes/mips-architecture:
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/gross:micro:2016
    - - 'A retrospective on `MIPS: A microprocessor architecture'''
      - gross:micro:2016
  - - papers/hennessy:micro:1982
    - - 'MIPS: A microprocessor architecture'
      - hennessy:micro:1982
  notes/mir:
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  notes/mir-interpreter:
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  notes/mixture-of-experts:
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  notes/mlp:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  notes/model-based-testing: []
  notes/model-checking:
  - - papers/ball:pldi:2001
    - - Automatic predicate abstraction of C programs
      - ball:pldi:2001
  - - papers/baranova:atva:2017
    - - Model checking of C and C++ with DIVINE 4
      - baranova:atva:2017
  - - papers/beyer:cav:2011
    - - 'CPAchecker: A tool for configurable software verification'
      - beyer:cav:2011
  - - papers/beyer:ijsttt:2007
    - - 'The software model checker BLAST: Applications to software engineering'
      - beyer:ijsttt:2007
  - - papers/beyer:sas:2004
    - - The BLAST query language for software verification
      - beyer:sas:2004
  - - papers/biere:tacas:1999
    - - Symbolic model checking without BDDs
      - biere:tacas:1999
  - - papers/chong:icse:2020
    - - Code-level model checking in the software development workflow
      - chong:icse:2020
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/clarke:wlop:1982
    - - Design and synthesis of synchronization skeletons using branching-time temporal
        logic
      - clarke:wlop:1982
  - - papers/cook:cav:2018
    - - Model checking boot code from AWS data centers
      - cook:cav:2018
  - - papers/godefroid:popl:2010
    - - 'Compositional may-must program analysis: Unleashing the power of alternation'
      - godefroid:popl:2010
  - - papers/henzinger:spin:2003
    - - Software verification with BLAST
      - henzinger:spin:2003
  - - papers/holzmann:ieeetse:2011
    - - Swarm verification techniques
      - holzmann:ieeetse:2011
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/krishnamurthi:fm:2019
    - - The human in formal methods
      - krishnamurthi:fm:2019
  - - papers/kupferman:concur:2006
    - - Sanity checks in formal verification
      - kupferman:concur:2006
  - - papers/lal:pldi:2015
    - - 'DAG inlining: A decision procedure for reachability-modulo-theories in hierarchical
        programs'
      - lal:pldi:2015
  - - papers/mcmillan:cav:1998
    - - Verification of an implementation of Tomasulo's algorithm by compositional
        model checking
      - mcmillan:cav:1998
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  - - papers/pnueli:sfcs:1977
    - - The temporal logic of programs
      - pnueli:sfcs:1977
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/weigl:arxiv:2019
    - - 'Relational test tables: A practical specification language for evolution
        and security'
      - weigl:arxiv:2019
  notes/modular-verification:
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  notes/mutation-testing:
  - - papers/groce:issta:2012
    - - Swarm testing
      - groce:issta:2012
  - - papers/jia:ieeetse:2010
    - - An analysis and survey of the development of mutation testing
      - jia:ieeetse:2010
  - - papers/kupferman:concur:2006
    - - Sanity checks in formal verification
      - kupferman:concur:2006
  - - papers/papadakis:advances:2019
    - - 'Mutation testing advances: An analysis and survey (chapter 6)'
      - papadakis:advances:2019
  notes/natural-language:
  - - papers/burke:lacl:2005
    - - Translating formal software specifications to natural language / A grammar-based
        approach
      - burke:lacl:2005
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  notes/neural-network:
  - - papers/abadi:arxiv:2016
    - - 'TensorFlow: Large-scale machine learning on heterogeneous distributed systems'
      - abadi:arxiv:2016
  - - papers/elsen:arxiv:2019
    - - Fast sparse ConvNets
      - elsen:arxiv:2019
  - - papers/evci:arxiv:2021
    - - 'Rigging the lottery: Making all tickets winners'
      - evci:arxiv:2021
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/gale:arxiv:2019
    - - The state of sparsity in deep neural networks
      - gale:arxiv:2019
  - - papers/gale:arxiv:2020
    - - Sparse GPU kernels for deep learning
      - gale:arxiv:2020
  - - papers/hedge:micro:2019
    - - 'ExTensor: An accelerator for sparse tensor algebra'
      - hedge:micro:2019
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  - - papers/kjolstad:oopsla:2017
    - - The tensor algebra compiler
      - kjolstad:oopsla:2017
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  - - papers/qin:hpca:2020
    - - 'SIGMA: A sparse and irregular GEMM accelerator with flexible interconnects
        for DNN training'
      - qin:hpca:2020
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/nlp:
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  - - papers/shazeer:arxiv:2017
    - - 'Outrageously large neural networks: The sparsely-gated mixture-of-experts
        layer'
      - shazeer:arxiv:2017
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/non-interference:
  - - papers/azevedo:post:2018
    - - The meaning of memory safety
      - azevedo:post:2018
  - - papers/bowman:icfp:2015
    - - Noninterference for free
      - bowman:icfp:2015
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/hritcu:icfp:2013
    - - Testing noninterference, quickly
      - hritcu:icfp:2013
  - - papers/milushev:forte:2012
    - - Noninterference via symbolic execution
      - milushev:forte:2012
  - - papers/schwarz:sefm:2016
    - - Automatic derivation of platform noninterference properties
      - schwarz:sefm:2016
  - - papers/tiwari:isca:2009
    - - 'Execution leases: A hardware-supported mechanism for enforcing strong non-interference'
      - tiwari:isca:2009
  notes/nova-hypervisor:
  - - papers/becker:fm:2016
    - - Combining mechanized proofs and model-based testing in the formal analysis
        of a hypervisor
      - becker:fm:2016
  notes/omega-library:
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  notes/operating-system:
  - - papers/li:usenix:2021
    - - Formally verified memory protection for a commodity multiprocessor hypervisor
      - li:usenix:2021
  - - papers/tao:sosp:2021
    - - Formal verification of a multiprocessor hypervisor on Arm relaxed memory hardware
      - tao:sosp:2021
  notes/operating-systems:
  - - papers/baumann:eucnc:2016
    - - A high assurance virtualization platform for ARMv8
      - baumann:eucnc:2016
  - - papers/boos:plos:2017
    - - 'Theseus: A state spill-free operating system'
      - boos:plos:2017
  - - papers/draves:sosp:1991
    - - Using continuations to implement thread management and communication in operating
        systems
      - draves:sosp:1991
  - - papers/eide:aspse:2001
    - - 'Aspect weaving as component knitting: Separating concerns with Knit'
      - eide:aspse:2001
  - - papers/eide:icse:2002
    - - Static and dynamic structure in design patterns
      - eide:icse:2002
  - - papers/klein:sosp:2009
    - - 'SeL4: Formal verification of an OS kernel'
      - klein:sosp:2009
  - - papers/lauer:osr:1979
    - - On the duality of operating system structures
      - lauer:osr:1979
  - - papers/levy:apsys:2017
    - - The case for writing a kernel in Rust
      - levy:apsys:2017
  - - papers/levy:plos:2015
    - - 'Ownership is theft: Experiences building an embedded OS in Rust'
      - levy:plos:2015
  - - papers/levy:sosp:2017
    - - Multiprogramming a 64kB computer safely and efficiently
      - levy:sosp:2017
  - - papers/li:sandp:2021
    - - A secure and formally verified Linux KVM hypervisor
      - li:sandp:2021
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/regehr:acp4is:2003
    - - Lock inference for systems software
      - regehr:acp4is:2003
  - - papers/reid:osdi:2000
    - - 'Knit: Component composition for systems software'
      - reid:osdi:2000
  - - papers/sewell:pldi:2013
    - - Translation validation for a verified OS kernel
      - sewell:pldi:2013
  - - papers/syeda:itp:2018
    - - Program verification in the presence of cached address translation
      - syeda:itp:2018
  notes/over-approximation:
  - - papers/godefroid:popl:2010
    - - 'Compositional may-must program analysis: Unleashing the power of alternation'
      - godefroid:popl:2010
  notes/ownership-types:
  - - papers/beingessner:msc:2015
    - - You can't spell trust without Rust
      - beingessner:msc:2015
  - - papers/clarke:oopsla:1998
    - - Ownership types for flexible alias protection
      - clarke:oopsla:1998
  - - papers/levy:plos:2015
    - - 'Ownership is theft: Experiences building an embedded OS in Rust'
      - levy:plos:2015
  - - papers/sammler:pldi:2021
    - - 'RefinedC: Automating the foundational verification of C code with refined
        ownership types'
      - sammler:pldi:2021
  - - papers/tofte:inco:1997
    - - Region-based memory management
      - tofte:inco:1997
  - - papers/walker:tic:2001
    - - Alias types for recursive data structures
      - walker:tic:2001
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  notes/parallelism:
  - - papers/kumar:isca:2004
    - - Single-ISA heterogeneous multi-core architectures for multithreaded workload
        performance
      - kumar:isca:2004
  notes/partial-order-reduction:
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  notes/paxos:
  - - papers/corbett:tocs:2013
    - - 'Spanner: Google''s globally distributed database'
      - corbett:tocs:2013
  notes/pdp11-architecture:
  - - papers/pdp11:book:1973
    - - PDP-11/45 processor handbook
      - pdp11:book:1973
  notes/permission-accounting:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  - - papers/bornat:popl:2005
    - - Permission accounting in separation logic
      - bornat:popl:2005
  - - papers/heule:ftfjp:2011
    - - Fractional permissions without the fractions
      - heule:ftfjp:2011
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  notes/permission-logic:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  - - papers/berdine:aplas:2005
    - - Symbolic execution with separation logic
      - berdine:aplas:2005
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/blom:ijsttt:2015
    - - Witnessing the elimination of magic wands
      - blom:ijsttt:2015
  - - papers/bornat:popl:2005
    - - Permission accounting in separation logic
      - bornat:popl:2005
  - - papers/brookes:tcs:2006
    - - A semantics for concurrent separation logic
      - brookes:tcs:2006
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  - - papers/deline:pldi:2001
    - - Enforcing high-level protocols in low-level software
      - deline:pldi:2001
  - - papers/dinsdale-young:popl:2013
    - - 'Views: Compositional reasoning for concurrent programs'
      - dinsdale-young:popl:2013
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  - - papers/heule:ftfjp:2011
    - - Fractional permissions without the fractions
      - heule:ftfjp:2011
  - - papers/heule:vmcai:2013
    - - 'Abstract read permissions: Fractional permissions without the fractions'
      - heule:vmcai:2013
  - - papers/hobor:popl:2013
    - - The ramifications of sharing in data structures
      - hobor:popl:2013
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/kassios:fm:2006
    - - 'Dynamic frames: Support for framing, dependencies and sharing without restrictions'
      - kassios:fm:2006
  - - papers/krishnaswami:tldi:2010
    - - Verifying event-driven programs using ramified frame properties
      - krishnaswami:tldi:2010
  - - papers/leino:fosad:2007
    - - Verification of concurrent programs with Chalice
      - leino:fosad:2007
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  - - papers/nanevski:icfp:2008
    - - 'Ynot: Dependent types for imperative programs'
      - nanevski:icfp:2008
  - - papers/nanevski:oopsla:2019
    - - 'Specifying concurrent programs in separation logic: Morphisms and simulations'
      - nanevski:oopsla:2019
  - - papers/ohearn:cacm:2019
    - - Separation logic
      - ohearn:cacm:2019
  - - papers/ohearn:tcs:2007
    - - Resources, concurrency, and local reasoning
      - ohearn:tcs:2007
  - - papers/parkinson:popl:2005
    - - Separation logic and abstraction
      - parkinson:popl:2005
  - - papers/penninckx:nfm:2012
    - - Sound formal verification of Linux's USB BP keyboard driver
      - penninckx:nfm:2012
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  - - papers/reynolds:lics:2002
    - - 'Separation logic: a logic for shared mutable data structures'
      - reynolds:lics:2002
  - - papers/schwerhoff:ecoop:2015
    - - Lightweight support for magic wands in an automatic verifier
      - schwerhoff:ecoop:2015
  - - papers/smans:ecoop:2009
    - - 'Implicit dynamic frames: Combining dynamic frames and separation logic'
      - smans:ecoop:2009
  - - papers/smans:fmood:2010
    - - Heap-dependent expressions in separation logic
      - smans:fmood:2010
  - - papers/smith:esop:2000
    - - Alias types
      - smith:esop:2000
  - - papers/vogels:fmoods:2011
    - - Annotation inference for separation logic based verifiers
      - vogels:fmoods:2011
  - - papers/walker:tic:2001
    - - Alias types for recursive data structures
      - walker:tic:2001
  notes/phantom-types:
  - - papers/beingessner:msc:2015
    - - You can't spell trust without Rust
      - beingessner:msc:2015
  - - papers/blume:babel:2001
    - - 'No-longer-foreign: Teaching an ML compiler to speak C "natively"'
      - blume:babel:2001
  - - papers/burton:toplas:1990
    - - Type extension through polymorphism
      - burton:toplas:1990
  - - papers/finne:icfp:1999
    - - Calling hell from heaven and heaven from hell
      - finne:icfp:1999
  - - papers/fluet:jfp:2006
    - - Phantom types and subtyping
      - fluet:jfp:2006
  - - papers/mcbride:jfp:2002
    - - 'Faking it: Simulating dependent types in Haskell'
      - mcbride:jfp:2002
  - - papers/remy:popl:1989
    - - Type checking records and variants in a natural extension of ML
      - remy:popl:1989
  - - papers/reppy:att:1996
    - - A safe interface to sockets
      - reppy:att:1996
  - - papers/wand:lics:1987
    - - Complete type inference for simple objects
      - wand:lics:1987
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  notes/pin-tool:
  - - papers/avgerinos:icse:2014
    - - Enhancing symbolic execution with veritesting
      - avgerinos:icse:2014
  notes/pipeline-parallelism:
  - - papers/bird:sc:1993
    - - The effectiveness of decoupling
      - bird:sc:1993
  - - papers/bridges:micro:2007
    - - Revisiting the sequential programming model for multi-core
      - bridges:micro:2007
  - - papers/dai:pldi:2005
    - - Automatically partitioning packet processing applications for pipelined architectures
      - dai:pldi:2005
  - - papers/du:sc:2003
    - - Compiler support for exploiting coarse-grained pipelined parallelism.
      - du:sc:2003
  - - papers/palacharla:micro:1995
    - - Decoupling integer execution in superscalar processors
      - palacharla:micro:1995
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/smith:tocs:1984
    - - Decoupled access/execute computer architectures
      - smith:tocs:1984
  - - papers/thies:micro:2007
    - - A practical approach to exploiting coarse-grained pipeline parallelism in
        C programs
      - thies:micro:2007
  - - papers/wolf:codes:2004
    - - 'Design and programming of embedded multiprocessors: An interface-centric
        approach'
      - wolf:codes:2004
  notes/power-virus:
  - - papers/hadjilambrou:ispass:2019
    - - 'GeST: An automatic framework for generating CPU stress-tests'
      - hadjilambrou:ispass:2019
  notes/powerpc-architecture:
  - - papers/flur:popl:2017
    - - 'Mixed-size concurrency: ARM, POWER, C/C++11, and SC'
      - flur:popl:2017
  - - papers/gray:micro:2015
    - - An integrated concurrency and core-ISA architectural envelope definition,
        and test oracle, for IBM POWER multiprocessors
      - gray:micro:2015
  - - papers/myreen:tphols:2009
    - - Verified LISP Implementations on ARM, x86 and PowerPC
      - myreen:tphols:2009
  - - papers/sarkar:pldi:2011
    - - Understanding POWER multiprocessors
      - sarkar:pldi:2011
  notes/proof-carrying-code:
  - - papers/necula:popl:1997
    - - Proof-carrying code
      - necula:popl:1997
  notes/property-based-testing:
  - - papers/claessen:icfp:2000
    - - 'QuickCheck: A lightweight tool for random testing of Haskell programs'
      - claessen:icfp:2000
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/maciver:ecoop:2020
    - - 'Test-case reduction via test-case generation: Insights from the Hypothesis
        reducer'
      - maciver:ecoop:2020
  - - papers/reid:hatra:2020
    - - 'Towards making formal methods normal: meeting developers where they are'
      - reid:hatra:2020
  - - papers/tillmann:fse:2005
    - - Parameterized unit tests
      - tillmann:fse:2005
  notes/prusti-verifier:
  - - papers/beckmann:msc:2020
    - - Verifying safe clients of unsafe code and trait implementations in Rust
      - beckmann:msc:2020
  - - papers/blom:ijsttt:2015
    - - Witnessing the elimination of magic wands
      - blom:ijsttt:2015
  - - papers/gorse:msc:2020
    - - Extended support for borrowing and lifetimes in Prusti
      - gorse:msc:2020
  - - papers/schwerhoff:ecoop:2015
    - - Lightweight support for magic wands in an automatic verifier
      - schwerhoff:ecoop:2015
  notes/pvs-theorem-prover:
  - - papers/beyer:ijsttt:2006
    - - Putting it all together - Formal verification of the VAMP
      - beyer:ijsttt:2006
  - - papers/tahat:fmcad:2019
    - - Scalable translation validation of unverified legacy OS code
      - tahat:fmcad:2019
  notes/pytorch: []
  notes/qemu: []
  notes/qsym:
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/quic-protocol:
  - - papers/mcmillan:sigcomm:2019
    - - Formal specification and testing of QUIC
      - mcmillan:sigcomm:2019
  - - papers/rath:epiq:2018
    - - Interoperability-guided testing of QUIC implementations using symbolic execution
      - rath:epiq:2018
  notes/reachability:
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/reference-counting: []
  notes/refinement-types:
  - - papers/sammler:pldi:2021
    - - 'RefinedC: Automating the foundational verification of C code with refined
        ownership types'
      - sammler:pldi:2021
  notes/regions:
  - - papers/beingessner:msc:2015
    - - You can't spell trust without Rust
      - beingessner:msc:2015
  - - papers/clarke:oopsla:1998
    - - Ownership types for flexible alias protection
      - clarke:oopsla:1998
  - - papers/tofte:inco:1997
    - - Region-based memory management
      - tofte:inco:1997
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  notes/relu:
  - - papers/qin:hpca:2020
    - - 'SIGMA: A sparse and irregular GEMM accelerator with flexible interconnects
        for DNN training'
      - qin:hpca:2020
  notes/remill-library:
  - - papers/dasgupta:pldi:2020
    - - Scalable validation of binary lifters
      - dasgupta:pldi:2020
  notes/remote-procedure-call:
  - - papers/ananda:osr:1992
    - - A survey of asynchronous remote procedure calls
      - ananda:osr:1992
  - - papers/birrell:tocs:1984
    - - Implementing remote procedure calls
      - birrell:tocs:1984
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  notes/requirements-specification:
  - - papers/frias:icse:2005
    - - 'DynAlloy: Upgrading Alloy with Actions'
      - frias:icse:2005
  - - papers/fuxman:isre:2001
    - - Model checking early requirements specifications in Tropos
      - fuxman:isre:2001
  - - papers/jackson:tosem:2002
    - - 'Alloy: A lightweight object modelling notation'
      - jackson:tosem:2002
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  notes/resonant-frequency:
  - - papers/hadjilambrou:ispass:2019
    - - 'GeST: An automatic framework for generating CPU stress-tests'
      - hadjilambrou:ispass:2019
  notes/rewrite-rules:
  - - papers/jones:microsoft:2001
    - - 'Playing by the rules: rewriting as a practical optimisation technique in
        GHC'
      - jones:microsoft:2001
  notes/risc-architecture:
  - - papers/hennessy:micro:1982
    - - 'MIPS: A microprocessor architecture'
      - hennessy:micro:1982
  - - papers/patterson:cacm:1985
    - - Reduced instruction set computers
      - patterson:cacm:1985
  - - papers/patterson:sigarch:1980
    - - The case for the reduced instruction set computer
      - patterson:sigarch:1980
  - - papers/seal:book:2000
    - - ARM Architecture Reference Manual (ARMv5 edition)
      - seal:book:2000
  notes/riscv-architecture:
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  - - papers/lockhart:ispass:2015
    - - 'Pydgin: generating fast instruction set simulators from simple architecture
        descriptions with meta-tracing JIT compilers'
      - lockhart:ispass:2015
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  notes/rnn:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  notes/roofline-performance-model:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  notes/rosette-solver:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/torlak:onward:2013
    - - Growing solver-aided languages with Rosette
      - torlak:onward:2013
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  - - papers/weitz:icfp:2017
    - - 'SpaceSearch: A library for building and verifying solver-aided tools'
      - weitz:icfp:2017
  - - papers/zorn:iscawddd:2017
    - - Solver aided reverse engineering of architectural features
      - zorn:iscawddd:2017
  notes/rtl:
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/su:computer:1974
    - - A survey of computer hardware description languages in the U.S.A.
      - su:computer:1974
  - - papers/systemverilog:ieee:2013
    - - IEEE standard for SystemVerilog - Unified hardware design, specification,
        and verification language
      - systemverilog:ieee:2013
  notes/rust-language:
  - - papers/abtahi:chi:2020
    - - 'Learning Rust: How experienced programmers leverage resources to learn a
        new programming language'
      - abtahi:chi:2020
  - - papers/almohri:codaspy:2018
    - - 'Fidelius Charm: Isolating unsafe Rust code'
      - almohri:codaspy:2018
  - - papers/anderson:icse:2016
    - - Engineering the Servo web browser engine using Rust
      - anderson:icse:2016
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  - - papers/astrauskas:oopsla:2020
    - - How do programmers use unsafe Rust?
      - astrauskas:oopsla:2020
  - - papers/azevedo:post:2018
    - - The meaning of memory safety
      - azevedo:post:2018
  - - papers/balasubramanium:hotos:2017
    - - 'System programming in Rust: Beyond safety'
      - balasubramanium:hotos:2017
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/beckmann:msc:2020
    - - Verifying safe clients of unsafe code and trait implementations in Rust
      - beckmann:msc:2020
  - - papers/beingessner:msc:2015
    - - You can't spell trust without Rust
      - beingessner:msc:2015
  - - papers/boos:plos:2017
    - - 'Theseus: A state spill-free operating system'
      - boos:plos:2017
  - - papers/clarke:oopsla:1998
    - - Ownership types for flexible alias protection
      - clarke:oopsla:1998
  - - papers/denis:hal:2020
    - - Deductive program verification for a language with a Rust-like typing discipline
        type [Internship report]
      - denis:hal:2020
  - - papers/evans:icse:2020
    - - Is Rust used safely by software developers?
      - evans:icse:2020
  - - papers/gorse:msc:2020
    - - Extended support for borrowing and lifetimes in Prusti
      - gorse:msc:2020
  - - papers/jung:cacm:2021
    - - 'Safe systems programming in Rust: The promise and the challenge'
      - jung:cacm:2021
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  - - papers/klabnik:book:2018
    - - The Rust programming language
      - klabnik:book:2018
  - - papers/levy:apsys:2017
    - - The case for writing a kernel in Rust
      - levy:apsys:2017
  - - papers/levy:plos:2015
    - - 'Ownership is theft: Experiences building an embedded OS in Rust'
      - levy:plos:2015
  - - papers/levy:sosp:2017
    - - Multiprogramming a 64kB computer safely and efficiently
      - levy:sosp:2017
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  - - papers/lindner:indin:2019
    - - 'Verification of safety functions implemented in Rust: A symbolic execution
        based approach'
      - lindner:indin:2019
  - - papers/liu:icse:2020
    - - Securing unsafe Rust programs with XRust
      - liu:icse:2020
  - - papers/matsakis:hilt:2014
    - - The Rust language
      - matsakis:hilt:2014
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  - - papers/narayanan:hotos:2019
    - - 'RedLeaf: Towards an operating system for safe and verified firmware'
      - narayanan:hotos:2019
  - - papers/papaevripides:acmtps:2021
    - - Exploiting mixed binaries
      - papaevripides:acmtps:2021
  - - papers/qin:pldi:2020
    - - Understanding memory and thread safety practices and issues in real-world
        Rust programs
      - qin:pldi:2020
  - - papers/reid:hatra:2020
    - - 'Towards making formal methods normal: meeting developers where they are'
      - reid:hatra:2020
  - - papers/rudra:sosp:2021
    - - 'Rudra: Finding memory safety bugs in Rust at the Ecosystem scale'
      - rudra:sosp:2021
  - - papers/toman:ase:2015
    - - 'Crust: A bounded verifier for Rust'
      - toman:ase:2015
  - - papers/ullrich:msc:2016
    - - Simple verification of Rust programs via functional purification
      - ullrich:msc:2016
  - - papers/wang:tase:2018
    - - 'KRust: A formal executable semantics of Rust'
      - wang:tase:2018
  - - papers/weiss:arxiv:2018
    - - 'Rust distilled: An expressive tower of languages'
      - weiss:arxiv:2018
  - - papers/xu:arxiv:2021
    - - Memory-safety challenge considered solved? An in-depth study with all Rust
        CVEs
      - xu:arxiv:2021
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  - - papers/zhang:ccs:2020
    - - VRLifeTime - An IDE tool to avoid concurrency and memory bugs in Rust
      - zhang:ccs:2020
  notes/rust-unsafe-code:
  - - papers/almohri:codaspy:2018
    - - 'Fidelius Charm: Isolating unsafe Rust code'
      - almohri:codaspy:2018
  - - papers/astrauskas:oopsla:2020
    - - How do programmers use unsafe Rust?
      - astrauskas:oopsla:2020
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/beckmann:msc:2020
    - - Verifying safe clients of unsafe code and trait implementations in Rust
      - beckmann:msc:2020
  - - papers/beingessner:msc:2015
    - - You can't spell trust without Rust
      - beingessner:msc:2015
  - - papers/evans:icse:2020
    - - Is Rust used safely by software developers?
      - evans:icse:2020
  - - papers/jung:cacm:2021
    - - 'Safe systems programming in Rust: The promise and the challenge'
      - jung:cacm:2021
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  - - papers/levy:apsys:2017
    - - The case for writing a kernel in Rust
      - levy:apsys:2017
  - - papers/liu:icse:2020
    - - Securing unsafe Rust programs with XRust
      - liu:icse:2020
  - - papers/papaevripides:acmtps:2021
    - - Exploiting mixed binaries
      - papaevripides:acmtps:2021
  - - papers/qin:pldi:2020
    - - Understanding memory and thread safety practices and issues in real-world
        Rust programs
      - qin:pldi:2020
  - - papers/toman:ase:2015
    - - 'Crust: A bounded verifier for Rust'
      - toman:ase:2015
  - - papers/xu:arxiv:2021
    - - Memory-safety challenge considered solved? An in-depth study with all Rust
        CVEs
      - xu:arxiv:2021
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  notes/rustbelt-verifier:
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  notes/s2e-verifier:
  - - papers/chipounov:asplos:2011
    - - 'S2E: A platform for in-vivo multi-path analysis of software systems'
      - chipounov:asplos:2011
  - - papers/chipounov:hotdep:2009
    - - Selective symbolic execution
      - chipounov:hotdep:2009
  - - papers/chipounov:tcs:2012
    - - 'The S2E platform: Design, implementation, and applications'
      - chipounov:tcs:2012
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/sage-verifier:
  - - papers/godefroid:cacm:2020
    - - 'Fuzzing: Hack, art, and science'
      - godefroid:cacm:2020
  notes/sail-language:
  - - papers/armstrong:arw:2018
    - - 'Detailed models of instruction set architectures: From pseudocode to formal
        semantics'
      - armstrong:arw:2018
  - - papers/armstrong:popl19:2019
    - - ISA semantics for ARMv8-A, RISC-V, and CHERI-MIPS
      - armstrong:popl19:2019
  - - papers/armstrong:spisa:2019
    - - The state of Sail
      - armstrong:spisa:2019
  notes/sat-solver:
  - - papers/brummayer:sat:2010
    - - Automated testing and debugging of SAT and QBF solvers
      - brummayer:sat:2010
  - - papers/demoura:cacm:2011
    - - 'Satisfiability modulo theories: Introduction and applications'
      - demoura:cacm:2011
  - - papers/dutra:icse:2018
    - - Efficient sampling of SAT solutions for testing
      - dutra:icse:2018
  - - papers/krishnamurthi:fm:2019
    - - The human in formal methods
      - krishnamurthi:fm:2019
  - - papers/malik:cacm:2009
    - - Boolean satisfiability from theoretical hardness to practical success
      - malik:cacm:2009
  notes/saturn-verifier:
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  notes/savior:
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  notes/sdr:
  - - papers/lin:sdr:2006
    - - 'SPEX: A programming language for software defined radio'
      - lin:sdr:2006
  - - papers/lin:sips:2006
    - - Design and implementation of turbo decoders for software defined radio
      - lin:sips:2006
  - - papers/woh:micro:2008
    - - 'From SODA to scotch: The evolution of a wireless baseband processor'
      - woh:micro:2008
  notes/seahorn-verifier:
  - - papers/gennari:vstte:2018
    - - Executable counterexamples in software model checking
      - gennari:vstte:2018
  - - papers/gurfinkel:cav:2015
    - - The SeaHorn verification framework
      - gurfinkel:cav:2015
  notes/search-based-test-generation:
  - - papers/braione:icse:2018
    - - 'SUSHI: A test generator for programs with complex structured inputs'
      - braione:icse:2018
  notes/security:
  - - papers/baumann:hotos:2017
    - - Hardware is the new software
      - baumann:hotos:2017
  - - papers/ge:jce:2016
    - - A survey of microarchitectural timing attacks and countermeasures on contemporary
        hardware
      - ge:jce:2016
  - - papers/kocher:crypto:1999
    - - Differential power analysis
      - kocher:crypto:1999
  - - papers/lowe:csfw:2015
    - - Quantifying information flow
      - lowe:csfw:2015
  - - papers/mcilroy:arxiv:2019
    - - 'Spectre is here to stay: An analysis of side-channels and speculative execution'
      - mcilroy:arxiv:2019
  notes/self-composition:
  - - papers/almeida:security:2016
    - - Verifying constant-time implementations
      - almeida:security:2016
  - - papers/barthe:csfw:2004
    - - Secure information flow by self composition
      - barthe:csfw:2004
  - - papers/barthe:iacr:2007
    - - Provably secure compilation of side-channel countermeasures.
      - barthe:iacr:2007
  - - papers/barthe:mscs:2011
    - - Secure information flow by self-composition
      - barthe:mscs:2011
  - - papers/daniel:sandp:2020
    - - 'Binsec/Rel: Efficient relational symbolic execution for constant-time at
        binary-level'
      - daniel:sandp:2020
  - - papers/marco:cav:2021
    - - 'Product programs in the wild: Retrofitting program verifiers to check information
        flow security'
      - marco:cav:2021
  notes/separation-logic:
  - - papers/azevedo:post:2018
    - - The meaning of memory safety
      - azevedo:post:2018
  - - papers/berdine:aplas:2005
    - - Symbolic execution with separation logic
      - berdine:aplas:2005
  - - papers/berdine:cav:2007
    - - Shape analysis for composite data structures
      - berdine:cav:2007
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/bornat:popl:2005
    - - Permission accounting in separation logic
      - bornat:popl:2005
  - - papers/calcagno:sas:2006
    - - 'Beyond reachability: Shape abstraction in the presence of pointer arithmetic'
      - calcagno:sas:2006
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  - - papers/hatcliff:compsurv:2012
    - - Behavioral interface specification languages
      - hatcliff:compsurv:2012
  - - papers/hobor:popl:2013
    - - The ramifications of sharing in data structures
      - hobor:popl:2013
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/jensen:popl:2013
    - - High-level separation logic for low-level code
      - jensen:popl:2013
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/kennedy:ppdp:2013
    - - 'Coq: The world''s best macro assembler?'
      - kennedy:ppdp:2013
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/krishnaswami:tldi:2010
    - - Verifying event-driven programs using ramified frame properties
      - krishnaswami:tldi:2010
  - - papers/nanevski:oopsla:2019
    - - 'Specifying concurrent programs in separation logic: Morphisms and simulations'
      - nanevski:oopsla:2019
  - - papers/ohearn:cacm:2019
    - - Separation logic
      - ohearn:cacm:2019
  - - papers/ohearn:tcs:2007
    - - Resources, concurrency, and local reasoning
      - ohearn:tcs:2007
  - - papers/parkinson:popl:2005
    - - Separation logic and abstraction
      - parkinson:popl:2005
  - - papers/penninckx:nfm:2012
    - - Sound formal verification of Linux's USB BP keyboard driver
      - penninckx:nfm:2012
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  - - papers/reynolds:lics:2002
    - - 'Separation logic: a logic for shared mutable data structures'
      - reynolds:lics:2002
  - - papers/sammler:pldi:2021
    - - 'RefinedC: Automating the foundational verification of C code with refined
        ownership types'
      - sammler:pldi:2021
  - - papers/schwerhoff:ecoop:2015
    - - Lightweight support for magic wands in an automatic verifier
      - schwerhoff:ecoop:2015
  - - papers/smans:ecoop:2009
    - - 'Implicit dynamic frames: Combining dynamic frames and separation logic'
      - smans:ecoop:2009
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  - - papers/vogels:fmoods:2011
    - - Annotation inference for separation logic based verifiers
      - vogels:fmoods:2011
  notes/serval-tool: []
  notes/shape-analysis:
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  notes/side-channel:
  - - papers/baumann:hotos:2017
    - - Hardware is the new software
      - baumann:hotos:2017
  - - papers/ge:jce:2016
    - - A survey of microarchitectural timing attacks and countermeasures on contemporary
        hardware
      - ge:jce:2016
  - - papers/gleissenthall:ccs:2021
    - - Solver-aided constant-time hardware verification
      - gleissenthall:ccs:2021
  - - papers/guanciale:ccs:2020
    - - 'InSpectre: Breaking and fixing microarchitectural vulnerabilities by formal
        analysis'
      - guanciale:ccs:2020
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/kim:isca:2014
    - - 'Flipping bits in memory without accessing them: An experimental study of
        DRAM disturbance errors'
      - kim:isca:2014
  - - papers/kocher:arxiv:2018
    - - 'Spectre attacks: Exploiting speculative execution'
      - kocher:arxiv:2018
  - - papers/kocher:crypto:1999
    - - Differential power analysis
      - kocher:crypto:1999
  - - papers/lipp:arxiv:2018
    - - Meltdown
      - lipp:arxiv:2018
  - - papers/martin:isca:2012
    - - 'TimeWarp: Rethinking timekeeping and performance monitoring mechanisms to
        mitigate side-channel attacks'
      - martin:isca:2012
  - - papers/mcilroy:arxiv:2019
    - - 'Spectre is here to stay: An analysis of side-channels and speculative execution'
      - mcilroy:arxiv:2019
  - - papers/rutledge:icse:2019
    - - Zero-overhead path prediction with progressive symbolic execution
      - rutledge:icse:2019
  - - papers/tang:sec:2017
    - - 'CLKSCREW: Exposing the perils of security-oblivious energy management'
      - tang:sec:2017
  - - papers/vila:pldi:2020
    - - 'CacheQuery: Learning replacement policies from hardware caches'
      - vila:pldi:2020
  notes/simd:
  - - papers/boettcher:date:2014
    - - 'Advanced SIMD: Extending the reach of contemporary SIMD architectures'
      - boettcher:date:2014
  - - papers/flynn:ieeeproc:1966
    - - Very high-speed computing systems
      - flynn:ieeeproc:1966
  - - papers/kozyrakis:phd:2002
    - - Scalable vector media processors for embedded systems
      - kozyrakis:phd:2002
  - - papers/lee:micro:1996
    - - Subword parallelism with MAX-2
      - lee:micro:1996
  - - papers/lin:sdr:2006
    - - 'SPEX: A programming language for software defined radio'
      - lin:sdr:2006
  - - papers/lin:sips:2006
    - - Design and implementation of turbo decoders for software defined radio
      - lin:sips:2006
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/stephens:micro:2017
    - - The ARM scalable vector extension
      - stephens:micro:2017
  - - papers/tremblay:micro:1996
    - - VIS speeds new media processing
      - tremblay:micro:1996
  - - papers/woh:micro:2008
    - - 'From SODA to scotch: The evolution of a wireless baseband processor'
      - woh:micro:2008
  notes/sled:
  - - papers/cifuentes:computer:2000
    - - 'UQBT: Adaptable binary translation at low cost'
      - cifuentes:computer:2000
  - - papers/cifuentes:iwpc:1998
    - - Specifying the semantics of machine instructions
      - cifuentes:iwpc:1998
  - - papers/dias:popl:2010
    - - Automatically generating instruction selectors using declarative machine descriptions
      - dias:popl:2010
  - - papers/fernandez:icse:1997
    - - Automatic checking of instruction specifications
      - fernandez:icse:1997
  - - papers/ramsey:lctes:1998
    - - Machine descriptions to build tools for embedded systems
      - ramsey:lctes:1998
  - - papers/ramsey:toplas:1997
    - - Specifying representations of machine instructions
      - ramsey:toplas:1997
  notes/smack-verifier:
  - - papers/almeida:security:2016
    - - Verifying constant-time implementations
      - almeida:security:2016
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/rakamaric:cav:2014
    - - 'SMACK: Decoupling source language details from verifier implementations'
      - rakamaric:cav:2014
  notes/smallfoot-verifier:
  - - papers/berdine:aplas:2005
    - - Symbolic execution with separation logic
      - berdine:aplas:2005
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  notes/smt-lib-format:
  - - papers/leino:informatics:2001
    - - 'Extended static checking: A ten-year perspective'
      - leino:informatics:2001
  notes/smt-solver:
  - - papers/barrett:cade:2000
    - - A framework for cooperating decision procedures
      - barrett:cade:2000
  - - papers/barrett:cav:2011
    - - CVC4
      - barrett:cav:2011
  - - papers/barrett:mlf:2015
    - - Proofs in satisfiability modulo theories
      - barrett:mlf:2015
  - - papers/barrett:smtlib:2016
    - - The Satisfiability Modulo Theories Library (SMT-LIB)
      - barrett:smtlib:2016
  - - papers/becker:tacas:2019
    - - 'The Axiom profiler: Understanding and debugging SMT quantifier instantiations'
      - becker:tacas:2019
  - - papers/brummayer:sat:2010
    - - Automated testing and debugging of SAT and QBF solvers
      - brummayer:sat:2010
  - - papers/demoura:cacm:2011
    - - 'Satisfiability modulo theories: Introduction and applications'
      - demoura:cacm:2011
  - - papers/demoura:tacas:2008
    - - 'Z3: An efficient SMT solver'
      - demoura:tacas:2008
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/krishnamurthi:fm:2019
    - - The human in formal methods
      - krishnamurthi:fm:2019
  - - papers/lal:pldi:2015
    - - 'DAG inlining: A decision procedure for reachability-modulo-theories in hierarchical
        programs'
      - lal:pldi:2015
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/leino:sac:2009
    - - Reasoning about comprehensions with first-order SMT solvers
      - leino:sac:2009
  - - papers/liew:fse:2019
    - - 'Just fuzz it: Solving floating-point constraints using coverage-Guided fuzzing'
      - liew:fse:2019
  - - papers/malik:cacm:2009
    - - Boolean satisfiability from theoretical hardness to practical success
      - malik:cacm:2009
  - - papers/mansur:arxiv:2020
    - - Detecting critical bugs in SMT solvers using blackbox mutational fuzzing
      - mansur:arxiv:2020
  - - papers/mukherjee:oopsla:2020
    - - Dataflow-based pruning for speeding up superoptimization
      - mukherjee:oopsla:2020
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  - - papers/niemetz:jsat:2015
    - - Boolector 2.0
      - niemetz:jsat:2015
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/stump:fmsd:2013
    - - SMT proof checking using a logical framework
      - stump:fmsd:2013
  - - papers/tillmann:fse:2005
    - - Parameterized unit tests
      - tillmann:fse:2005
  notes/softmax: []
  notes/sparse-model:
  - - papers/elsen:arxiv:2019
    - - Fast sparse ConvNets
      - elsen:arxiv:2019
  - - papers/evci:arxiv:2021
    - - 'Rigging the lottery: Making all tickets winners'
      - evci:arxiv:2021
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/gale:arxiv:2019
    - - The state of sparsity in deep neural networks
      - gale:arxiv:2019
  - - papers/gale:arxiv:2020
    - - Sparse GPU kernels for deep learning
      - gale:arxiv:2020
  - - papers/hedge:micro:2019
    - - 'ExTensor: An accelerator for sparse tensor algebra'
      - hedge:micro:2019
  - - papers/kjolstad:oopsla:2017
    - - The tensor algebra compiler
      - kjolstad:oopsla:2017
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  - - papers/qin:hpca:2020
    - - 'SIGMA: A sparse and irregular GEMM accelerator with flexible interconnects
        for DNN training'
      - qin:hpca:2020
  notes/spec-sharp-project:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/barnett:cassis:2004
    - - 'The Spec# programming system: An overview'
      - barnett:cassis:2004
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/barnett:vstte:2005
    - - 'The Spec# programming system: Challenges and directions'
      - barnett:vstte:2005
  - - papers/deline:pldi:2001
    - - Enforcing high-level protocols in low-level software
      - deline:pldi:2001
  - - papers/hatcliff:compsurv:2012
    - - Behavioral interface specification languages
      - hatcliff:compsurv:2012
  - - papers/leino:sac:2009
    - - Reasoning about comprehensions with first-order SMT solvers
      - leino:sac:2009
  notes/speculative-execution:
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/mcilroy:arxiv:2019
    - - 'Spectre is here to stay: An analysis of side-channels and speculative execution'
      - mcilroy:arxiv:2019
  notes/state-merging:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  - - papers/zhang:apsec:2018
    - - Boost symbolic execution using dynamic state merging and forking
      - zhang:apsec:2018
  notes/stochastic-gradient-descent:
  - - papers/abadi:arxiv:2016
    - - 'TensorFlow: Large-scale machine learning on heterogeneous distributed systems'
      - abadi:arxiv:2016
  notes/stream-processing:
  - - papers/gordon:asplos:2002
    - - A stream compiler for communication-exposed architectures
      - gordon:asplos:2002
  - - papers/thies:ppopp:2005
    - - Teleport messaging for distributed stream programs
      - thies:ppopp:2005
  notes/superoptimizer:
  - - papers/bansal:asplos:2006
    - - Automatic generation of peephole superoptimizers
      - bansal:asplos:2006
  - - papers/bansal:osdi:2008
    - - Binary translation using peephole superoptimizers
      - bansal:osdi:2008
  - - papers/joshi:pldi:2002
    - - 'Denali: A goal-directed superoptimizer'
      - joshi:pldi:2002
  - - papers/massalin:asplos:1987
    - - 'Superoptimizer: A look at the smallest program'
      - massalin:asplos:1987
  - - papers/mukherjee:oopsla:2020
    - - Dataflow-based pruning for speeding up superoptimization
      - mukherjee:oopsla:2020
  notes/survey:
  - - papers/ananda:osr:1992
    - - A survey of asynchronous remote procedure calls
      - ananda:osr:1992
  - - papers/baldoni:compsurv:2018
    - - A survey of symbolic execution techniques
      - baldoni:compsurv:2018
  - - papers/barr:tse:2015
    - - 'The oracle problem in software testing: A survey'
      - barr:tse:2015
  - - papers/bell:procieee:2014
    - - 'STARS: Rise and fall of minicomputers [scanning our past]'
      - bell:procieee:2014
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/demoura:cacm:2011
    - - 'Satisfiability modulo theories: Introduction and applications'
      - demoura:cacm:2011
  - - papers/ge:jce:2016
    - - A survey of microarchitectural timing attacks and countermeasures on contemporary
        hardware
      - ge:jce:2016
  - - papers/godefroid:cacm:2020
    - - 'Fuzzing: Hack, art, and science'
      - godefroid:cacm:2020
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/jia:ieeetse:2010
    - - An analysis and survey of the development of mutation testing
      - jia:ieeetse:2010
  - - papers/malik:cacm:2009
    - - Boolean satisfiability from theoretical hardness to practical success
      - malik:cacm:2009
  - - papers/manes:ieeetse:2019
    - - 'The art, science, and engineering of fuzzing: A survey'
      - manes:ieeetse:2019
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  - - papers/ohearn:cacm:2019
    - - Separation logic
      - ohearn:cacm:2019
  - - papers/papadakis:advances:2019
    - - 'Mutation testing advances: An analysis and survey (chapter 6)'
      - papadakis:advances:2019
  notes/sv-competition:
  - - papers/beyer:cav:2011
    - - 'CPAchecker: A tool for configurable software verification'
      - beyer:cav:2011
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/beyer:ijsttt:2007
    - - 'The software model checker BLAST: Applications to software engineering'
      - beyer:ijsttt:2007
  - - papers/gennari:vstte:2018
    - - Executable counterexamples in software model checking
      - gennari:vstte:2018
  - - papers/holzer:cav:2008
    - - 'FShell: Systematic test case generation for dynamic analysis and measurement'
      - holzer:cav:2008
  - - papers/visser:tacas:2020
    - - 'COASTAL: Combining concolic and fuzzing for Java (competition contribution)'
      - visser:tacas:2020
  notes/swarm-verification:
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/groce:issta:2012
    - - Swarm testing
      - groce:issta:2012
  - - papers/holzmann:ieeetse:2011
    - - Swarm verification techniques
      - holzmann:ieeetse:2011
  notes/symbolic-evaluation:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/torlak:onward:2013
    - - Growing solver-aided languages with Rosette
      - torlak:onward:2013
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  notes/symbolic-execution:
  - - papers/armstrong:cav:2021
    - - 'Isla: Integrating full-scale ISA semantics and axiomatic concurrency models'
      - armstrong:cav:2021
  - - papers/avgerinos:cacm:2014
    - - Automatic exploit generation
      - avgerinos:cacm:2014
  - - papers/avgerinos:icse:2014
    - - Enhancing symbolic execution with veritesting
      - avgerinos:icse:2014
  - - papers/baldoni:compsurv:2018
    - - A survey of symbolic execution techniques
      - baldoni:compsurv:2018
  - - papers/ball:dsse:2015
    - - Deconstructing dynamic symbolic execution
      - ball:dsse:2015
  - - papers/berdine:aplas:2005
    - - Symbolic execution with separation logic
      - berdine:aplas:2005
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/bergan:oopsla:2014
    - - Symbolic execution of multithreaded programs from arbitrary program contexts
      - bergan:oopsla:2014
  - - papers/boespflug:fdtc:2020
    - - Countermeasures optimization in multiple fault-injection context
      - boespflug:fdtc:2020
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/braione:icse:2018
    - - 'SUSHI: A test generator for programs with complex structured inputs'
      - braione:icse:2018
  - - papers/brown:sec:2020
    - - 'Sys: A static/symbolic tool for finding good bugs in good (browser) code'
      - brown:sec:2020
  - - papers/bush:spe:2000
    - - A static analyzer for finding dynamic programming errors
      - bush:spe:2000
  - - papers/busse:issta:2020
    - - Running symbolic execution forever
      - busse:issta:2020
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  - - papers/cadar:fse:2015
    - - Targeted program transformations for symbolic execution
      - cadar:fse:2015
  - - papers/cadar:osdi:2008
    - - 'KLEE: Unassisted and automatic generation of high-coverage tests for complex
        systems programs'
      - cadar:osdi:2008
  - - papers/cha:sandp:2012
    - - Unleashing Mayhem on binary code
      - cha:sandp:2012
  - - papers/chalupa:tacas:2021
    - - 'Symbiotic 8: Beyond symbolic execution'
      - chalupa:tacas:2021
  - - papers/chen:sp:2020
    - - 'SAVIOR: Towards bug-driven hybrid testing'
      - chen:sp:2020
  - - papers/chipounov:asplos:2011
    - - 'S2E: A platform for in-vivo multi-path analysis of software systems'
      - chipounov:asplos:2011
  - - papers/chipounov:hotdep:2009
    - - Selective symbolic execution
      - chipounov:hotdep:2009
  - - papers/chipounov:tcs:2012
    - - 'The S2E platform: Design, implementation, and applications'
      - chipounov:tcs:2012
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  - - papers/cui:asplos:2013
    - - Verifying systems rules using rule-directed symbolic execution
      - cui:asplos:2013
  - - papers/daniel:sandp:2020
    - - 'Binsec/Rel: Efficient relational symbolic execution for constant-time at
        binary-level'
      - daniel:sandp:2020
  - - papers/david:issta:2016
    - - Specification of concretization and symbolization policies in symbolic execution
      - david:issta:2016
  - - papers/dimjasevic:ifm:2018
    - - Study of integrating random and symbolic testing for object-oriented software
      - dimjasevic:ifm:2018
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  - - papers/galea:arxiv:2018
    - - Evaluating manual intervention to address the challenges of bug finding with
        KLEE
      - galea:arxiv:2018
  - - papers/garg:icse:2013
    - - Feedback-directed unit test generation for C/C++ using concolic execution
      - garg:icse:2013
  - - papers/godefroid:acmq:2012
    - - 'SAGE: Whitebox fuzzing for security testing'
      - godefroid:acmq:2012
  - - papers/godefroid:bugs:2005
    - - The soundness of bugs is what matters (position statement)
      - godefroid:bugs:2005
  - - papers/godefroid:cacm:2020
    - - 'Fuzzing: Hack, art, and science'
      - godefroid:cacm:2020
  - - papers/godefroid:pldi:2005
    - - 'DART: Directed automated random testing'
      - godefroid:pldi:2005
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/guarnieri:sandp:2020
    - - 'Spectector: Principled detection of speculative information flows'
      - guarnieri:sandp:2020
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/kapus:fse:2019
    - - A segmented memory model for symbolic execution
      - kapus:fse:2019
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/korencik:qrs:2020
    - - On symbolic execution of decompiled programs
      - korencik:qrs:2020
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  - - papers/lindner:indin:2019
    - - 'Verification of safety functions implemented in Rust: A symbolic execution
        based approach'
      - lindner:indin:2019
  - - papers/majumdar:icse:2007
    - - Hybrid concolic testing
      - majumdar:icse:2007
  - - papers/manes:ieeetse:2019
    - - 'The art, science, and engineering of fuzzing: A survey'
      - manes:ieeetse:2019
  - - papers/mcmillan:sigcomm:2019
    - - Formal specification and testing of QUIC
      - mcmillan:sigcomm:2019
  - - papers/mechtaev:fse:2018
    - - Symbolic execution with existential second-order constraints
      - mechtaev:fse:2018
  - - papers/milushev:forte:2012
    - - Noninterference via symbolic execution
      - milushev:forte:2012
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/nordholz:eurosys:2020
    - - Design of a symbolically executable embedded hypervisor
      - nordholz:eurosys:2020
  - - papers/pandey:issta:2019
    - - Deferred concretization in symbolic execution via fuzzing
      - pandey:issta:2019
  - - papers/person:fse:2008
    - - Differential symbolic execution
      - person:fse:2008
  - - papers/poeplau:acsac:2019
    - - 'Systematic comparison of symbolic execution systems: Intermediate representation
        and its generation'
      - poeplau:acsac:2019
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/qiu:icse:2017
    - - A synergistic approach for distributed symbolic execution using test ranges
      - qiu:icse:2017
  - - papers/qiu:nfm:2018
    - - Using test ranges to improve symbolic execution
      - qiu:nfm:2018
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  - - papers/rath:epiq:2018
    - - Interoperability-guided testing of QUIC implementations using symbolic execution
      - rath:epiq:2018
  - - papers/reid:hatra:2020
    - - 'Towards making formal methods normal: meeting developers where they are'
      - reid:hatra:2020
  - - papers/romano:phd:2014
    - - Methods for binary symbolic execution
      - romano:phd:2014
  - - papers/roy:fse:2018
    - - 'Bug synthesis: Challenging bug-finding tools with deep faults'
      - roy:fse:2018
  - - papers/rutledge:icse:2019
    - - Zero-overhead path prediction with progressive symbolic execution
      - rutledge:icse:2019
  - - papers/rutledge:icse:2020
    - - 'PG-KLEE: Trading soundness for coverage'
      - rutledge:icse:2020
  - - papers/schwartz:sp:2010
    - - All you ever wanted to know about dynamic taint analysis and forward symbolic
        execution (but might have been afraid to ask)
      - schwartz:sp:2010
  - - papers/sen:fse:2005
    - - 'CUTE: A concolic unit testing engine for C'
      - sen:fse:2005
  - - papers/siddiqui:oopsla:2012
    - - Scaling symbolic execution using ranged analysis
      - siddiqui:oopsla:2012
  - - papers/stephens:ndss:2016
    - - 'Driller: Augmenting fuzzing through selective symbolic execution'
      - stephens:ndss:2016
  - - papers/tillmann:fse:2005
    - - Parameterized unit tests
      - tillmann:fse:2005
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  - - papers/trabish:icse:2018
    - - Chopped symbolic execution
      - trabish:icse:2018
  - - papers/trabish:issta:2020
    - - Relocatable addressing model for symbolic execution
      - trabish:issta:2020
  - - papers/trtik:atva:2014
    - - Symbolic memory with pointers
      - trtik:atva:2014
  - - papers/visser:tacas:2020
    - - 'COASTAL: Combining concolic and fuzzing for Java (competition contribution)'
      - visser:tacas:2020
  - - papers/yang:issta:2012
    - - Memoized symbolic execution
      - yang:issta:2012
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  - - papers/zaostrovnykh:sosp:2019
    - - Verifying software network functions with no verification expertise
      - zaostrovnykh:sosp:2019
  - - papers/zhang:apsec:2018
    - - Boost symbolic execution using dynamic state merging and forking
      - zhang:apsec:2018
  notes/symbolic-memory:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  - - papers/kapus:fse:2019
    - - A segmented memory model for symbolic execution
      - kapus:fse:2019
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  notes/symbolic-model-checking:
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  notes/symbolic-trajectory-evaluation:
  - - papers/claessen:sfm:2006
    - - An introduction to symbolic trajectory evaluation
      - claessen:sfm:2006
  - - papers/kirankumar:fmcad:2012
    - - 'Symbolic trajectory evaluation: The primary validation vehicle for next generation
        Intel processor graphics FPU'
      - kirankumar:fmcad:2012
  - - papers/segar:fmsd:1995
    - - Formal verification by symbolic evaluation of partially-ordered trajectories
      - segar:fmsd:1995
  notes/symcc:
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  notes/systematization-of-knowledge: []
  notes/temporal-logic:
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  - - papers/clarke:wlop:1982
    - - Design and synthesis of synchronization skeletons using branching-time temporal
        logic
      - clarke:wlop:1982
  - - papers/jhala:compsurv:2009
    - - Software model checking
      - jhala:compsurv:2009
  - - papers/kupferman:concur:2006
    - - Sanity checks in formal verification
      - kupferman:concur:2006
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  - - papers/pnueli:sfcs:1977
    - - The temporal logic of programs
      - pnueli:sfcs:1977
  notes/tensor:
  - - papers/abadi:arxiv:2016
    - - 'TensorFlow: Large-scale machine learning on heterogeneous distributed systems'
      - abadi:arxiv:2016
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  - - papers/kjolstad:oopsla:2017
    - - The tensor algebra compiler
      - kjolstad:oopsla:2017
  notes/tensorflow:
  - - papers/abadi:arxiv:2016
    - - 'TensorFlow: Large-scale machine learning on heterogeneous distributed systems'
      - abadi:arxiv:2016
  - - papers/elsen:arxiv:2019
    - - Fast sparse ConvNets
      - elsen:arxiv:2019
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  - - papers/kjolstad:oopsla:2017
    - - The tensor algebra compiler
      - kjolstad:oopsla:2017
  notes/test-case-reduction:
  - - papers/groce:issta:2017
    - - One test to rule them all
      - groce:issta:2017
  - - papers/maciver:ecoop:2020
    - - 'Test-case reduction via test-case generation: Insights from the Hypothesis
        reducer'
      - maciver:ecoop:2020
  - - papers/regehr:pldi:2012
    - - Test-case reduction for C compiler bugs
      - regehr:pldi:2012
  notes/test-competition:
  - - papers/beyer:ase:2019
    - - 'TestCov: Robust test-suite execution and coverage measurement'
      - beyer:ase:2019
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  notes/test-double:
  - - papers/gennari:vstte:2018
    - - Executable counterexamples in software model checking
      - gennari:vstte:2018
  notes/test-driven-development: []
  notes/test-generation:
  - - papers/babic:fse:2019
    - - 'FUDGE: Fuzz driver generation at scale'
      - babic:fse:2019
  - - papers/braione:icse:2018
    - - 'SUSHI: A test generator for programs with complex structured inputs'
      - braione:icse:2018
  - - papers/dutra:icse:2018
    - - Efficient sampling of SAT solutions for testing
      - dutra:icse:2018
  - - papers/mcmillan:sigcomm:2019
    - - Formal specification and testing of QUIC
      - mcmillan:sigcomm:2019
  - - papers/visser:tacas:2020
    - - 'COASTAL: Combining concolic and fuzzing for Java (competition contribution)'
      - visser:tacas:2020
  - - papers/weigl:arxiv:2019
    - - 'Relational test tables: A practical specification language for evolution
        and security'
      - weigl:arxiv:2019
  notes/testability:
  - - papers/binder:cacm:1994
    - - Design for testability in object-oriented systems
      - binder:cacm:1994
  - - papers/edwards:icrs:1975
    - - The effect of certain modular design principles on testability
      - edwards:icrs:1975
  - - papers/freedman:tse:1991
    - - Testability of software components
      - freedman:tse:1991
  notes/threads:
  - - papers/bridges:micro:2007
    - - Revisiting the sequential programming model for multi-core
      - bridges:micro:2007
  - - papers/dabek:sigops:2002
    - - Event-driven programming for robust software
      - dabek:sigops:2002
  - - papers/dai:pldi:2005
    - - Automatically partitioning packet processing applications for pipelined architectures
      - dai:pldi:2005
  - - papers/draves:sosp:1991
    - - Using continuations to implement thread management and communication in operating
        systems
      - draves:sosp:1991
  - - papers/dunkels:enss:2006
    - - 'Protothreads: Simplifying Event-driven Programming of Memory-constrained
        Embedded Systems'
      - dunkels:enss:2006
  - - papers/lauer:osr:1979
    - - On the duality of operating system structures
      - lauer:osr:1979
  - - papers/ousterhout:usenix:1996
    - - Why threads are a bad idea (for most purposes) (Invited talk)
      - ousterhout:usenix:1996
  - - papers/ozer:sbacpad:2007
    - - Low-cost techniques for reducing branch context pollution in a soft realtime
        embedded multithreaded processor
      - ozer:sbacpad:2007
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/vonbehren:hotos:2003
    - - Why events are a bad idea (for high-concurrency servers)
      - vonbehren:hotos:2003
  - - papers/wang:pldi:2007
    - - 'EXOCHI: architecture and programming environment for a heterogeneous multi-core
        multithreaded system'
      - wang:pldi:2007
  notes/tpu:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  notes/transformer-model:
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  - - papers/vaswani:arxiv:2017
    - - Attention is all you need
      - vaswani:arxiv:2017
  notes/translation-validation:
  - - papers/klein:sosp:2009
    - - 'SeL4: Formal verification of an OS kernel'
      - klein:sosp:2009
  - - papers/leroy:cacm:2009
    - - Formal verification of a realistic compiler
      - leroy:cacm:2009
  - - papers/necula:pldi:2000
    - - Translation validation for an optimizing compiler
      - necula:pldi:2000
  - - papers/pnueli:tacas:1998
    - - Translation validation
      - pnueli:tacas:1998
  - - papers/samet:ieeetse:1977
    - - A machine description facility for compiler testing
      - samet:ieeetse:1977
  - - papers/samet:phd:1975
    - - Automatically proving the correctness of translations involving optimized
        code.
      - samet:phd:1975
  - - papers/sewell:pldi:2013
    - - Translation validation for a verified OS kernel
      - sewell:pldi:2013
  - - papers/tahat:fmcad:2019
    - - Scalable translation validation of unverified legacy OS code
      - tahat:fmcad:2019
  notes/tso:
  - - papers/sevcik:jacm:2013
    - - 'CompCertTSO: A verified compiler for relaxed-memory concurrency'
      - sevcik:jacm:2013
  - - papers/sewell:cacm:2010
    - - 'x86-TSO: A rigorous and usable programmer''s model for x86 multiprocessors'
      - sewell:cacm:2010
  notes/turing-award:
  - - papers/clarke:cacm:2009
    - - 'Model checking: Algorithmic verification and debugging'
      - clarke:cacm:2009
  notes/type-inference:
  - - papers/furr:pldi:2005
    - - Checking type safety of foreign function calls
      - furr:pldi:2005
  - - papers/milner:jcss:1978
    - - A theory of type polymorphism in programming
      - milner:jcss:1978
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  notes/typed-assembly-language:
  - - papers/morrisett:wcsss:1999
    - - 'TALx86: A realistic typed assembly language'
      - morrisett:wcsss:1999
  - - papers/mycroft:esop:1999
    - - Type-based decompilation (or program reconstruction via type reconstruction)
      - mycroft:esop:1999
  - - papers/walker:popl:2000
    - - A type system for expressive security policies
      - walker:popl:2000
  - - papers/walker:tic:2001
    - - Alias types for recursive data structures
      - walker:tic:2001
  - - papers/xi:icfp:2001
    - - A dependently typed assembly language
      - xi:icfp:2001
  - - papers/yang:pldi:2010
    - - 'Safe to the last instruction: automated verification of a type-safe operating
        system'
      - yang:pldi:2010
  notes/undefined-behaviour:
  - - papers/jung:popl:2017
    - - 'RustBelt: Securing the foundations of the Rust programming language'
      - jung:popl:2017
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  - - papers/szekeres:sandp:2013
    - - 'SoK: Eternal war in memory'
      - szekeres:sandp:2013
  - - papers/toman:ase:2015
    - - 'Crust: A bounded verifier for Rust'
      - toman:ase:2015
  - - papers/wang:sosp:2013
    - - 'Towards optimization-safe systems: Analyzing the impact of undefined behavior'
      - wang:sosp:2013
  notes/under-approximation:
  - - papers/cok:bugs:2005
    - - Issues in deploying software defect detection tools
      - cok:bugs:2005
  - - papers/godefroid:bugs:2005
    - - The soundness of bugs is what matters (position statement)
      - godefroid:bugs:2005
  - - papers/godefroid:popl:2010
    - - 'Compositional may-must program analysis: Unleashing the power of alternation'
      - godefroid:popl:2010
  - - papers/ohearn:popl:2019
    - - Incorrectness logic
      - ohearn:popl:2019
  - - papers/xie:bugs:2005
    - - Soundness and its role in bug detection systems
      - xie:bugs:2005
  notes/unit-tests:
  - - papers/braione:icse:2018
    - - 'SUSHI: A test generator for programs with complex structured inputs'
      - braione:icse:2018
  - - papers/claessen:icfp:2000
    - - 'QuickCheck: A lightweight tool for random testing of Haskell programs'
      - claessen:icfp:2000
  - - papers/dimjasevic:ifm:2018
    - - Study of integrating random and symbolic testing for object-oriented software
      - dimjasevic:ifm:2018
  - - papers/garg:icse:2013
    - - Feedback-directed unit test generation for C/C++ using concolic execution
      - garg:icse:2013
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/maciver:ecoop:2020
    - - 'Test-case reduction via test-case generation: Insights from the Hypothesis
        reducer'
      - maciver:ecoop:2020
  - - papers/tillmann:fse:2005
    - - Parameterized unit tests
      - tillmann:fse:2005
  - - papers/weigl:arxiv:2019
    - - 'Relational test tables: A practical specification language for evolution
        and security'
      - weigl:arxiv:2019
  notes/usability:
  - - papers/coblenz:arxiv:2020
    - - 'PLIERS: A process that integrates user-centered methods into programming
        language design'
      - coblenz:arxiv:2020
  - - papers/johnson:icse:2013
    - - Why don't software developers use static analysis tools to find bugs?
      - johnson:icse:2013
  - - papers/macvean:ppig:2016
    - - API usability at scale
      - macvean:ppig:2016
  - - papers/myers:computer:2016
    - - 'Programmers are users too: Human-centered methods for improving programming
        tools'
      - myers:computer:2016
  - - papers/reid:hatra:2020
    - - 'Towards making formal methods normal: meeting developers where they are'
      - reid:hatra:2020
  - - papers/sadowski:icse-seip:2018
    - - 'Modern code review: A case study at Google'
      - sadowski:icse-seip:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  notes/valgrind: []
  notes/valgrind-tool:
  - - papers/nethercote:pldi:2007
    - - 'Valgrind: A framework for heavyweight dynamic binary instrumentation'
      - nethercote:pldi:2007
  notes/vcc-verifier:
  - - papers/cohen:cav:2010
    - - Local verification of global invariants in concurrent programs
      - cohen:cav:2010
  - - papers/cohen:entcs:2009
    - - A precise yet efficient memory model for C
      - cohen:entcs:2009
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/leinenbach:fm:2009
    - - Verifying the Microsoft Hyper-V hypervisor with VCC
      - leinenbach:fm:2009
  - - papers/vogels:fmoods:2011
    - - Annotation inference for separation logic based verifiers
      - vogels:fmoods:2011
  notes/vector-architecture:
  - - papers/asanovic:phd:1998
    - - Vector microprocessors
      - asanovic:phd:1998
  - - papers/blelloch:book:1990
    - - Vector models for data-parallel computing
      - blelloch:book:1990
  - - papers/boettcher:date:2014
    - - 'Advanced SIMD: Extending the reach of contemporary SIMD architectures'
      - boettcher:date:2014
  - - papers/kozyrakis:phd:2002
    - - Scalable vector media processors for embedded systems
      - kozyrakis:phd:2002
  - - papers/lee:micro:1996
    - - Subword parallelism with MAX-2
      - lee:micro:1996
  - - papers/lin:sdr:2006
    - - 'SPEX: A programming language for software defined radio'
      - lin:sdr:2006
  - - papers/lin:sips:2006
    - - Design and implementation of turbo decoders for software defined radio
      - lin:sips:2006
  - - papers/peleg:micro:1996
    - - MMX technology extension to the Intel architecture
      - peleg:micro:1996
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/stephens:micro:2017
    - - The ARM scalable vector extension
      - stephens:micro:2017
  - - papers/tremblay:micro:1996
    - - VIS speeds new media processing
      - tremblay:micro:1996
  - - papers/woh:micro:2008
    - - 'From SODA to scotch: The evolution of a wireless baseband processor'
      - woh:micro:2008
  notes/verifast-verifier:
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/penninckx:nfm:2012
    - - Sound formal verification of Linux's USB BP keyboard driver
      - penninckx:nfm:2012
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  - - papers/vogels:fmoods:2011
    - - Annotation inference for separation logic based verifiers
      - vogels:fmoods:2011
  notes/verification:
  - - papers/klein:sosp:2009
    - - 'SeL4: Formal verification of an OS kernel'
      - klein:sosp:2009
  notes/verification-competition:
  - - papers/nyxbrain:sc2:2017
    - - Benchmarking solvers, SAT-style
      - nyxbrain:sc2:2017
  - - papers/sutcliffe:ai:2001
    - - Evaluating general purpose automated theorem proving systems
      - sutcliffe:ai:2001
  notes/verification-condition-generator:
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  notes/verification-performance:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/galea:arxiv:2018
    - - Evaluating manual intervention to address the challenges of bug finding with
        KLEE
      - galea:arxiv:2018
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/holzmann:ieeetse:2011
    - - Swarm verification techniques
      - holzmann:ieeetse:2011
  - - papers/trabish:icse:2018
    - - Chopped symbolic execution
      - trabish:icse:2018
  notes/verification-profiling:
  - - papers/angelini:vizsec:2019
    - - 'SymNav: Visually assisting symbolic execution'
      - angelini:vizsec:2019
  - - papers/becker:tacas:2019
    - - 'The Axiom profiler: Understanding and debugging SMT quantifier instantiations'
      - becker:tacas:2019
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/galea:arxiv:2018
    - - Evaluating manual intervention to address the challenges of bug finding with
        KLEE
      - galea:arxiv:2018
  notes/verified-compilers:
  - - papers/fox:cpp:2017
    - - Verified compilation of CakeML to multiple machine-code targets
      - fox:cpp:2017
  - - papers/leroy:cacm:2009
    - - Formal verification of a realistic compiler
      - leroy:cacm:2009
  - - papers/sevcik:jacm:2013
    - - 'CompCertTSO: A verified compiler for relaxed-memory concurrency'
      - sevcik:jacm:2013
  - - papers/tan:icfp:2016
    - - A new verified compiler backend for CakeML
      - tan:icfp:2016
  notes/verifier-performance:
  - - papers/cadar:fse:2015
    - - Targeted program transformations for symbolic execution
      - cadar:fse:2015
  - - papers/holzmann:ieeetse:2011
    - - Swarm verification techniques
      - holzmann:ieeetse:2011
  - - papers/kuznetsov:pldi:2012
    - - Efficient state merging in symbolic execution
      - kuznetsov:pldi:2012
  - - papers/ma:securecomm:2015
    - - Control flow obfuscation using neural network to fight concolic testing
      - ma:securecomm:2015
  - - papers/qiu:icse:2017
    - - A synergistic approach for distributed symbolic execution using test ranges
      - qiu:icse:2017
  - - papers/qiu:nfm:2018
    - - Using test ranges to improve symbolic execution
      - qiu:nfm:2018
  - - papers/siddiqui:oopsla:2012
    - - Scaling symbolic execution using ranged analysis
      - siddiqui:oopsla:2012
  - - papers/trabish:icse:2018
    - - Chopped symbolic execution
      - trabish:icse:2018
  - - papers/zhang:apsec:2018
    - - Boost symbolic execution using dynamic state merging and forking
      - zhang:apsec:2018
  notes/viper-verifier:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  - - papers/blom:ijsttt:2015
    - - Witnessing the elimination of magic wands
      - blom:ijsttt:2015
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  - - papers/schwerhoff:ecoop:2015
    - - Lightweight support for magic wands in an automatic verifier
      - schwerhoff:ecoop:2015
  notes/vliw:
  - - papers/fisher:isca:1983
    - - Very long instruction word architectures and the ELI-512
      - fisher:isca:1983
  - - papers/lin:sdr:2006
    - - 'SPEX: A programming language for software defined radio'
      - lin:sdr:2006
  - - papers/lin:sips:2006
    - - Design and implementation of turbo decoders for software defined radio
      - lin:sips:2006
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  - - papers/woh:micro:2008
    - - 'From SODA to scotch: The evolution of a wireless baseband processor'
      - woh:micro:2008
  notes/weak-memory:
  - - papers/alglave:toplas:2014
    - - 'Herding cats: Modelling, simulation, testing, and data mining for weak memory'
      - alglave:toplas:2014
  - - papers/armstrong:cav:2021
    - - 'Isla: Integrating full-scale ISA semantics and axiomatic concurrency models'
      - armstrong:cav:2021
  - - papers/chong:asplos:2008
    - - Reasoning about the ARM weakly consistent memory model
      - chong:asplos:2008
  - - papers/li:tocs:1989
    - - Memory coherence in shared virtual memory systems
      - li:tocs:1989
  - - papers/lustig:asplos:2016
    - - 'COATCheck: Verifying memory ordering at the hardware-OS interface'
      - lustig:asplos:2016
  - - papers/pulte:popl:2017
    - - 'Simplifying ARM concurrency: Multicopy-atomic axiomatic and operational models
        for ARMv8'
      - pulte:popl:2017
  - - papers/sevcik:jacm:2013
    - - 'CompCertTSO: A verified compiler for relaxed-memory concurrency'
      - sevcik:jacm:2013
  - - papers/sewell:cacm:2010
    - - 'x86-TSO: A rigorous and usable programmer''s model for x86 multiprocessors'
      - sewell:cacm:2010
  - - papers/simner:pls:2020
    - - 'ARMv8-A system semantics: Instruction fetch in relaxed architectures'
      - simner:pls:2020
  - - papers/stewart:difts:2014
    - - 'Processor memory system verification using DOGReL: a language for specifying
        end-to-end properties'
      - stewart:difts:2014
  - - papers/tao:sosp:2021
    - - Formal verification of a multiprocessor hypervisor on Arm relaxed memory hardware
      - tao:sosp:2021
  - - papers/wickerson:popl:2017
    - - Automatically comparing memory consistency models
      - wickerson:popl:2017
  - - papers/zhang:fmcad:2018
    - - Integrating memory consistency models with instruction-level abstraction for
        heterogeneous system-on-chip verification
      - zhang:fmcad:2018
  notes/weakest-precondition:
  - - papers/mcmillan:sigcomm:2019
    - - Formal specification and testing of QUIC
      - mcmillan:sigcomm:2019
  notes/why3-verifier:
  - - papers/cuoq:sefm:2012
    - - 'Frama-C: A software analysis perspective'
      - cuoq:sefm:2012
  - - papers/filliatre:cav:2007
    - - The Why/Krakatoa/Caduceus platform for deductive program verification
      - filliatre:cav:2007
  - - papers/filliatre:esop:2013
    - - "Why3 \u2014 where programs meet provers"
      - filliatre:esop:2013
  - - papers/filliatre:fem:2004
    - - Multi-prover verification of C programs
      - filliatre:fem:2004
  notes/x86-architecture:
  - - papers/dasgupta:pldi:2019
    - - A complete formal semantics of x86-64 user-level instruction set architecture
      - dasgupta:pldi:2019
  - - papers/degenbaev:phd:2012
    - - Formal specification of the x86 instruction set architecture
      - degenbaev:phd:2012
  - - papers/goel:acl2:2013
    - - Abstract stobjs and their application to ISA modeling
      - goel:acl2:2013
  - - papers/goel:fmcad:2014
    - - Simulation and formal verification of x86 machine-code programs that make
        system calls
      - goel:fmcad:2014
  - - papers/goel:pcs:2017
    - - Engineering a formal, executable x86 ISA simulator for software verification
      - goel:pcs:2017
  - - papers/goel:phd:2016
    - - Formal verification of application and system programs based on a validated
        x86 ISA model
      - goel:phd:2016
  - - papers/goel:spisa:2019
    - - Using x86isa for microcode verification
      - goel:spisa:2019
  - - papers/hadjilambrou:ispass:2019
    - - 'GeST: An automatic framework for generating CPU stress-tests'
      - hadjilambrou:ispass:2019
  - - papers/heule:pldi:2016
    - - 'Stratified synthesis: Automatically learning the x86-64 instruction set'
      - heule:pldi:2016
  - - papers/jensen:popl:2013
    - - High-level separation logic for low-level code
      - jensen:popl:2013
  - - papers/kaufmann:utaustin:2012
    - - Towards a formal model of the x86 ISA
      - kaufmann:utaustin:2012
  - - papers/kirankumar:fmcad:2012
    - - 'Symbolic trajectory evaluation: The primary validation vehicle for next generation
        Intel processor graphics FPU'
      - kirankumar:fmcad:2012
  - - papers/martignoni:asplos:2012
    - - 'Path-exploration lifting: Hi-fi tests for lo-fi emulators'
      - martignoni:asplos:2012
  - - papers/maus:amast:2008
    - - 'Vx86: x86 assembler simulated in C powered by automated theorem proving'
      - maus:amast:2008
  - - papers/morrisett:pldi:2012
    - - 'RockSalt: Better, faster, stronger SFI for the x86'
      - morrisett:pldi:2012
  - - papers/morrisett:wcsss:1999
    - - 'TALx86: A realistic typed assembly language'
      - morrisett:wcsss:1999
  - - papers/myreen:tphols:2009
    - - Verified LISP Implementations on ARM, x86 and PowerPC
      - myreen:tphols:2009
  - - papers/peleg:micro:1996
    - - MMX technology extension to the Intel architecture
      - peleg:micro:1996
  - - papers/roessle:cpp:2019
    - - Formally verified big step semantics out of x86-64 binaries
      - roessle:cpp:2019
  - - papers/sarkar:popl:2009
    - - The semantics of x86-CC multiprocessor machine code
      - sarkar:popl:2009
  notes/xnnpack:
  - - papers/elsen:arxiv:2019
    - - Fast sparse ConvNets
      - elsen:arxiv:2019
  notes/z3-solver:
  - - papers/avgerinos:icse:2014
    - - Enhancing symbolic execution with veritesting
      - avgerinos:icse:2014
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/demoura:tacas:2008
    - - 'Z3: An efficient SMT solver'
      - demoura:tacas:2008
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  - - papers/rath:epiq:2018
    - - Interoperability-guided testing of QUIC implementations using symbolic execution
      - rath:epiq:2018
  papers/aagaard:charme:2001: []
  papers/aagaard:fmcad:2000: []
  papers/abadi:arxiv:2016: []
  papers/abadi:tcs:1991: []
  papers/abtahi:chi:2020: []
  papers/albin:cli:1995: []
  papers/alexopoulos:tps:2020: []
  papers/alglave:toplas:2014: []
  papers/alkassar:vstte:2010: []
  papers/alkassar:vstte:2012: []
  papers/almeida:security:2016: []
  papers/almohri:codaspy:2018: []
  papers/amadio:fpara:2014: []
  papers/amani:asplos:2016: []
  papers/ananda:osr:1992: []
  papers/anderson:icse:2016: []
  papers/andronick:icse:2012: []
  papers/angelini:vizsec:2019: []
  papers/armstrong:arw:2018: []
  papers/armstrong:cav:2021: []
  papers/armstrong:popl19:2019: []
  papers/armstrong:spisa:2019: []
  papers/asanovic:phd:1998: []
  papers/astrauskas:oopsla:2019:
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  papers/astrauskas:oopsla:2020:
  - - papers/evans:icse:2020
    - - Is Rust used safely by software developers?
      - evans:icse:2020
  - - papers/qin:pldi:2020
    - - Understanding memory and thread safety practices and issues in real-world
        Rust programs
      - qin:pldi:2020
  papers/avgerinos:cacm:2014:
  - - papers/heelan:msc:2009
    - - Automatic generation of control flow hijacking exploits for software vulnerabilities
      - heelan:msc:2009
  - - papers/heelan:sec:2018
    - - Automatic heap layout manipulation for exploitation
      - heelan:sec:2018
  papers/avgerinos:icse:2014:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  papers/azevedo:post:2018: []
  papers/babic:fse:2019:
  - - papers/sadowski:cacm:2018
    - - Lessons from building static analysis tools at Google
      - sadowski:cacm:2018
  papers/bader:vmcai:2018: []
  papers/balasubramanium:hotos:2017: []
  papers/baldoni:compsurv:2018:
  - - papers/cadar:cacm:2013
    - - 'Symbolic execution for software testing: Three decades later'
      - cadar:cacm:2013
  papers/ball:dsse:2015: []
  papers/ball:pldi:2001:
  - - papers/henzinger:spin:2003
    - - Software verification with BLAST
      - henzinger:spin:2003
  papers/bansal:asplos:2006: []
  papers/bansal:osdi:2008: []
  papers/baranova:atva:2017: []
  papers/baranowski:atva:2018:
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  papers/barbacci2:computer:1973: []
  papers/barbacci:afips:1977: []
  papers/barbacci:cmu:1972:
  - - papers/bell:afips:1970
    - - The PMS and ISP descriptive systems for computer structures
      - bell:afips:1970
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  papers/barbacci:computer:1973: []
  papers/barbacci:computer:1977: []
  papers/barbacci:computer:1978: []
  papers/barbacci:dac:1979: []
  papers/barbacci:icse:1988: []
  papers/barbacci:ieee:1981:
  - - papers/bell:afips:1970
    - - The PMS and ISP descriptive systems for computer structures
      - bell:afips:1970
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  papers/barbacci:ieeetc:1975: []
  papers/barbacci:ieeetc:1981: []
  papers/barbacci:isca:1973: []
  papers/barnett:cacm:2011:
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  papers/barnett:cassis:2004:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  papers/barnett:fmco:2005:
  - - papers/almeida:security:2016
    - - Verifying constant-time implementations
      - almeida:security:2016
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  papers/barnett:vstte:2005: []
  papers/barr:tse:2015: []
  papers/barrett:cade:2000: []
  papers/barrett:cav:2011: []
  papers/barrett:mlf:2015:
  - - papers/stump:fmsd:2013
    - - SMT proof checking using a logical framework
      - stump:fmsd:2013
  papers/barrett:smtlib:2016: []
  papers/barthe:csfw:2004: []
  papers/barthe:iacr:2007: []
  papers/barthe:mscs:2011: []
  papers/bastian:oopsla:2019: []
  papers/baudin:cacm:2021: []
  papers/bauereiss:ucam:2021: []
  papers/baumann:eucnc:2016: []
  papers/baumann:hotos:2017: []
  papers/becker:fm:2016:
  - - papers/claessen:icfp:2000
    - - 'QuickCheck: A lightweight tool for random testing of Haskell programs'
      - claessen:icfp:2000
  papers/becker:tacas:2019: []
  papers/beckmann:msc:2020: []
  papers/beingessner:msc:2015:
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  papers/bell:afips:1970:
  - - papers/barbacci:cmu:1972
    - - 'ISP: A language to describe instruction sets and other register transfer
        systems'
      - barbacci:cmu:1972
  - - papers/barbacci:ieee:1981
    - - 'Instruction set processor specifications (ISPS): The notation and its applications'
      - barbacci:ieee:1981
  - - papers/bell:book:1971
    - - 'Computer structures: Readings and examples'
      - bell:book:1971
  papers/bell:book:1971: []
  papers/bell:cacm:2008:
  - - papers/bell:procieee:2014
    - - 'STARS: Rise and fall of minicomputers [scanning our past]'
      - bell:procieee:2014
  papers/bell:procieee:2014: []
  papers/bembenek:oopsla:2020: []
  papers/berdine:aplas:2005:
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  papers/berdine:cav:2007: []
  papers/berdine:fmco:2005:
  - - papers/berdine:aplas:2005
    - - Symbolic execution with separation logic
      - berdine:aplas:2005
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  papers/bergan:oopsla:2014: []
  papers/bershad:cmpcon:1993: []
  papers/bevier:jar:1989: []
  papers/beyer:ase:2019: []
  papers/beyer:cav:2011: []
  papers/beyer:hvc:2017:
  - - papers/beyer:ase:2019
    - - 'TestCov: Robust test-suite execution and coverage measurement'
      - beyer:ase:2019
  papers/beyer:ijsttt:2006: []
  papers/beyer:ijsttt:2007:
  - - papers/beyer:cav:2011
    - - 'CPAchecker: A tool for configurable software verification'
      - beyer:cav:2011
  - - papers/beyer:sas:2004
    - - The BLAST query language for software verification
      - beyer:sas:2004
  papers/beyer:sas:2004:
  - - papers/beyer:ijsttt:2007
    - - 'The software model checker BLAST: Applications to software engineering'
      - beyer:ijsttt:2007
  papers/biere:tacas:1999: []
  papers/binder:cacm:1994: []
  papers/bird:sc:1993: []
  papers/birrell:tocs:1984: []
  papers/bishop:jacm:2019: []
  papers/blanchard:fmics:2015: []
  papers/blanqui:rapido:2011: []
  papers/blelloch:book:1990: []
  papers/blom:ijsttt:2015: []
  papers/blume:babel:2001:
  - - papers/fluet:jfp:2006
    - - Phantom types and subtyping
      - fluet:jfp:2006
  papers/bodin:popl:2014: []
  papers/boespflug:fdtc:2020: []
  papers/boettcher:date:2014: []
  papers/bohme2:fse:2020: []
  papers/bohme:fse:2020: []
  papers/bond:usenix:2017: []
  papers/boos:plos:2017: []
  papers/bornat:popl:2005:
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/heule:ftfjp:2011
    - - Fractional permissions without the fractions
      - heule:ftfjp:2011
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  papers/bornholt:oopsla:2018:
  - - papers/galea:arxiv:2018
    - - Evaluating manual intervention to address the challenges of bug finding with
        KLEE
      - galea:arxiv:2018
  papers/boulton:tpcd:1993: []
  papers/bowman:icfp:2015: []
  papers/braione:icse:2018: []
  papers/bridges:micro:2007: []
  papers/brookes:tcs:2006: []
  papers/brown:asplos:2016: []
  papers/brown:sec:2020: []
  papers/bruel:compsurv:2021: []
  papers/brumley:cav:2011: []
  papers/brummayer:sat:2010:
  - - papers/barrett:mlf:2015
    - - Proofs in satisfiability modulo theories
      - barrett:mlf:2015
  - - papers/mansur:arxiv:2020
    - - Detecting critical bugs in SMT solvers using blackbox mutational fuzzing
      - mansur:arxiv:2020
  - - papers/stump:fmsd:2013
    - - SMT proof checking using a logical framework
      - stump:fmsd:2013
  papers/bryant:cmu:2018: []
  papers/burch:cav:1994: []
  papers/burke:lacl:2005: []
  papers/burton:toplas:1990: []
  papers/bush:atlantic:1945: []
  papers/bush:spe:2000: []
  papers/busse:issta:2020: []
  papers/cadar:cacm:2013:
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/sen:fse:2005
    - - 'CUTE: A concolic unit testing engine for C'
      - sen:fse:2005
  papers/cadar:fse:2015:
  - - papers/wagner:hotos:2013
    - - '-Overify: Optimizing programs for fast verification'
      - wagner:hotos:2013
  papers/cadar:osdi:2008: []
  papers/cadar:tiss:2008: []
  papers/calcagno:popl:2009:
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  - - papers/engler:issta:2007
    - - 'Under-constrained execution: Making automatic code destruction easy and scalable'
      - engler:issta:2007
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  papers/calcagno:sas:2006:
  - - papers/distefano:tacas:2006
    - - A local shape analysis based on separation logic
      - distefano:tacas:2006
  papers/campbell:fmcad:2016: []
  papers/campbell:fmics:2014: []
  papers/cattell:phd:1978: []
  papers/cattell:toplas:1980: []
  papers/cha:sandp:2012:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  papers/chakravarty:haskffi:2003:
  - - papers/jones:hw:1997
    - - 'Green Card: a foreign-language interface for Haskell'
      - jones:hw:1997
  papers/chalupa:tacas:2021: []
  papers/chang:tocs:2012:
  - - papers/corbett:tocs:2013
    - - 'Spanner: Google''s globally distributed database'
      - corbett:tocs:2013
  papers/chatterjee:tacas:2007:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  papers/chen:arxiv:2021: []
  papers/chen:iiswc:2019: []
  papers/chen:sp:2020: []
  papers/chipounov:asplos:2011: []
  papers/chipounov:hotdep:2009: []
  papers/chipounov:tcs:2012: []
  papers/choi:icfp:2017: []
  papers/chong:asplos:2008: []
  papers/chong:icse:2020: []
  papers/chou:bugs:2005:
  - - papers/sadowski:cacm:2018
    - - Lessons from building static analysis tools at Google
      - sadowski:cacm:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  papers/chu:ieeedtc:1992: []
  papers/cifuentes:computer:2000: []
  papers/cifuentes:iwpc:1998: []
  papers/claessen:icfp:2000: []
  papers/claessen:sfm:2006: []
  papers/clark:entcs:2002: []
  papers/clarke:cacm:2009:
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  papers/clarke:cav:2000: []
  papers/clarke:oopsla:1998:
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  papers/clarke:tacas:2004: []
  papers/clarke:wlop:1982: []
  papers/clarkson:jcs:2010: []
  papers/coblenz:arxiv:2020: []
  papers/cock:ccs:2014: []
  papers/cohen:cav:2010:
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/cohen:entcs:2009
    - - A precise yet efficient memory model for C
      - cohen:entcs:2009
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/leino:informatics:2001
    - - 'Extended static checking: A ten-year perspective'
      - leino:informatics:2001
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  papers/cohen:entcs:2009: []
  papers/cok:bugs:2005: []
  papers/condit:esop:2007:
  - - papers/furr:pldi:2005
    - - Checking type safety of foreign function calls
      - furr:pldi:2005
  papers/condit:popl:2009: []
  papers/conway:cacm:1963: []
  papers/conway:datamation:1968: []
  papers/cook:cav:2018: []
  papers/coppa:ase:2017:
  - - papers/kapus:fse:2019
    - - A segmented memory model for symbolic execution
      - kapus:fse:2019
  papers/coquand:eurocal:1985: []
  papers/corbett:tocs:2013:
  - - papers/potvin:cacm:2016
    - - Why Google stores billions of lines of code in a single repository
      - potvin:cacm:2016
  papers/corteggiani:usenix:2018: []
  papers/costanzo:pldi:2016:
  - - papers/li:sandp:2021
    - - A secure and formally verified Linux KVM hypervisor
      - li:sandp:2021
  - - papers/murray:secpriv:2013
    - - 'seL4: from general purpose to a proof of information flow enforcement'
      - murray:secpriv:2013
  papers/cousot:oopsla:2012: []
  papers/cui:asplos:2013:
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  papers/cuoq:sefm:2012:
  - - papers/filliatre:fem:2004
    - - Multi-prover verification of C programs
      - filliatre:fem:2004
  - - papers/mangano:crisis:2016
    - - 'Formal verification of a memory allocation module of Contiki with Frama-C:
        a case study'
      - mangano:crisis:2016
  papers/curtsinger:cacm:2018: []
  papers/dabek:sigops:2002: []
  papers/dai:pldi:2005: []
  papers/dam:ieeetc:1981: []
  papers/dam:ted:2013: []
  papers/dam:trusted:2013: []
  papers/damm:fmoods:1999: []
  papers/daniel:sandp:2020: []
  papers/dasgupta:pldi:2019: []
  papers/dasgupta:pldi:2020:
  - - papers/hendrix:itp:2019
    - - Towards verified binary raising
      - hendrix:itp:2019
  papers/david:issta:2016:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  papers/dean:cacm:2013: []
  papers/degenbaev:phd:2012: []
  papers/deline:pldi:2001: []
  papers/demoura:cacm:2011:
  - - papers/malik:cacm:2009
    - - Boolean satisfiability from theoretical hardness to practical success
      - malik:cacm:2009
  papers/demoura:cade:2015:
  - - papers/ullrich:msc:2016
    - - Simple verification of Rust programs via functional purification
      - ullrich:msc:2016
  papers/demoura:tacas:2008:
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/deng:hasp:2019
    - - 'SecChisel: Language and tool for practical and scalable security verification
        of security-aware hardware architectures'
      - deng:hasp:2019
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/zhang:asplos:2015
    - - A hardware design language for timing-sensitive information flow security
      - zhang:asplos:2015
  papers/deng:hasp:2019: []
  papers/denis:hal:2020: []
  papers/denning:cacm:1976: []
  papers/dias:popl:2010: []
  papers/dimjasevic:ifm:2018: []
  papers/dinsdale-young:popl:2013: []
  papers/distefano:cacm:2019: []
  papers/distefano:tacas:2006: []
  papers/dixit:arxiv:2021:
  - - papers/hochschild:hotos:2021
    - - Cores that don't count
      - hochschild:hotos:2021
  papers/djordjevic:cj:1985: []
  papers/draves:sosp:1991: []
  papers/du:sc:2003: []
  papers/dunkels:enss:2006: []
  papers/dutra:icse:2018: []
  papers/edwards:icrs:1975: []
  papers/efstathopoulos:sosp:2005:
  - - papers/spencer:security:1999
    - - 'The Flask security architecture: System support for diverse security policies'
      - spencer:security:1999
  papers/eide:aspse:2001: []
  papers/eide:icse:2002: []
  papers/elsen:arxiv:2019: []
  papers/engler:issta:2007:
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  papers/erbsen:pldi:2021: []
  papers/ernst:icse:2016: []
  papers/evans:icse:2020:
  - - papers/astrauskas:oopsla:2020
    - - How do programmers use unsafe Rust?
      - astrauskas:oopsla:2020
  - - papers/qin:pldi:2020
    - - Understanding memory and thread safety practices and issues in real-world
        Rust programs
      - qin:pldi:2020
  papers/evci:arxiv:2021: []
  papers/evtyushkin:asplos:2021: []
  papers/fahndrich:foveoos:2010:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  papers/falkoff:ibm:1964: []
  papers/fauth:edtc:1995: []
  papers/fedus:arxiv:2021:
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  papers/fernandez:icse:1997: []
  papers/ferraiuolo:asplos:2017: []
  papers/ferraiuolo:ccs:2018:
  - - papers/gleissenthall:ccs:2021
    - - Solver-aided constant-time hardware verification
      - gleissenthall:ccs:2021
  papers/ferraiuolo:dac:2017: []
  papers/ferraiuolo:sosp:2017: []
  papers/filliatre:cav:2007: []
  papers/filliatre:esop:2013: []
  papers/filliatre:fem:2004:
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  papers/finne:icfp:1999:
  - - papers/fluet:jfp:2006
    - - Phantom types and subtyping
      - fluet:jfp:2006
  papers/fioraldi:arxiv:2020: []
  papers/fischer:ase:2013: []
  papers/fisher:isca:1983: []
  papers/fluet:jfp:2006:
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  papers/flur:popl:2016: []
  papers/flur:popl:2017: []
  papers/flynn:ieeeproc:1966: []
  papers/fonseca:ecs:2017: []
  papers/fox:cambridge:2001: []
  papers/fox:cpp:2017: []
  papers/fox:itp:2010: []
  papers/fox:itp:2012: []
  papers/fox:itps:2015: []
  papers/fox:tphols:2003: []
  papers/fox:ucam:2002: []
  papers/franklin:cmu:2008:
  - - papers/seshadri:sosp:2007
    - - 'SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for
        commodity OSes'
      - seshadri:sosp:2007
  papers/fraser:sigart:1977: []
  papers/freedman:tse:1991: []
  papers/frias:icse:2005: []
  papers/furr:pldi:2005:
  - - papers/condit:esop:2007
    - - Dependent types for low-level programming
      - condit:esop:2007
  papers/fuxman:isre:2001: []
  papers/gale:arxiv:2019: []
  papers/gale:arxiv:2020: []
  papers/galea:arxiv:2018:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  papers/garg:icse:2013:
  - - papers/dimjasevic:ifm:2018
    - - Study of integrating random and symbolic testing for object-oriented software
      - dimjasevic:ifm:2018
  papers/gay:pldi:2003: []
  papers/ge:jce:2016: []
  papers/gennari:vstte:2018: []
  papers/gleissenthall:ccs:2021: []
  papers/godefroid:acmq:2012: []
  papers/godefroid:bugs:2005:
  - - papers/ohearn:popl:2019
    - - Incorrectness logic
      - ohearn:popl:2019
  - - papers/xie:bugs:2005
    - - Soundness and its role in bug detection systems
      - xie:bugs:2005
  papers/godefroid:cacm:2020: []
  papers/godefroid:icse:2014: []
  papers/godefroid:pldi:2005: []
  papers/godefroid:pldi:2012: []
  papers/godefroid:popl:2010: []
  papers/goel:acl2:2013: []
  papers/goel:cav:2021: []
  papers/goel:cpp:2020: []
  papers/goel:fmcad:2014: []
  papers/goel:pcs:2017: []
  papers/goel:phd:2016: []
  papers/goel:spisa:2019: []
  papers/goguen:secpriv:1982:
  - - papers/rushby:sri:1992
    - - Noninterference, transitivity, and channel-control security policies
      - rushby:sri:1992
  papers/goguen:secpriv:1984: []
  papers/goodman:ndss:2018:
  - - papers/holzmann:ieeetse:2011
    - - Swarm verification techniques
      - holzmann:ieeetse:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  papers/gordon:asplos:2002: []
  papers/gordon:book:1993: []
  papers/gorse:msc:2020: []
  papers/gray:micro:2015: []
  papers/green:pandc:1990: []
  papers/green:tutorial:1998: []
  papers/greve:fmcad:1998: []
  papers/groce:issta:2012:
  - - papers/holzmann:ieeetse:2011
    - - Swarm verification techniques
      - holzmann:ieeetse:2011
  papers/groce:issta:2017: []
  papers/gross:micro:2016: []
  papers/grossman:esop:2002: []
  papers/grossman:pldi:2002:
  - - papers/jung:cacm:2021
    - - 'Safe systems programming in Rust: The promise and the challenge'
      - jung:cacm:2021
  papers/gu:osdi:2016:
  - - papers/costanzo:pldi:2016
    - - End-to-end verification of information flow security for C and assembly programs
      - costanzo:pldi:2016
  - - papers/li:sandp:2021
    - - A secure and formally verified Linux KVM hypervisor
      - li:sandp:2021
  papers/guanciale:ccs:2020: []
  papers/guarnieri:sandp:2020: []
  papers/gurfinkel:cav:2015:
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  papers/gurfinkel:fmcad:2017: []
  papers/guyer:dsl:1999: []
  papers/hadjilambrou:ispass:2019: []
  papers/hardin:acl2:2006: []
  papers/hatcliff:compsurv:2012: []
  papers/hawblitzel:osdi:2014: []
  papers/hedge:micro:2019:
  - - papers/qin:hpca:2020
    - - 'SIGMA: A sparse and irregular GEMM accelerator with flexible interconnects
        for DNN training'
      - qin:hpca:2020
  papers/heelan:msc:2009:
  - - papers/avgerinos:cacm:2014
    - - Automatic exploit generation
      - avgerinos:cacm:2014
  - - papers/heelan:sec:2018
    - - Automatic heap layout manipulation for exploitation
      - heelan:sec:2018
  papers/heelan:sec:2018:
  - - papers/avgerinos:cacm:2014
    - - Automatic exploit generation
      - avgerinos:cacm:2014
  - - papers/heelan:msc:2009
    - - Automatic generation of control flow hijacking exploits for software vulnerabilities
      - heelan:msc:2009
  papers/hehner:vstte:2008:
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  papers/hendrix:itp:2019: []
  papers/hennessy:book:2011: []
  papers/hennessy:micro:1982:
  - - papers/gross:micro:2016
    - - 'A retrospective on `MIPS: A microprocessor architecture'''
      - gross:micro:2016
  papers/henzinger:spin:2003:
  - - papers/ball:pldi:2001
    - - Automatic predicate abstraction of C programs
      - ball:pldi:2001
  papers/hertz:oopsla:2005: []
  papers/heule:ftfjp:2011:
  - - papers/heule:vmcai:2013
    - - 'Abstract read permissions: Fractional permissions without the fractions'
      - heule:vmcai:2013
  papers/heule:pldi:2016: []
  papers/heule:vmcai:2013: []
  papers/higgins:hldvt:2004: []
  papers/hobor:popl:2013: []
  papers/hochschild:hotos:2021:
  - - papers/dixit:arxiv:2021
    - - Silent data corruptions at scale
      - dixit:arxiv:2021
  papers/hohmuth:plos:2005: []
  papers/hohmuth:sigops:2002: []
  papers/holzer:cav:2008:
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/holzer:hvc:2010
    - - An introduction to test specification in FQL
      - holzer:hvc:2010
  papers/holzer:hvc:2010:
  - - papers/beyer:hvc:2017
    - - 'Software verification: Testing vs. model checking'
      - beyer:hvc:2017
  - - papers/holzer:cav:2008
    - - 'FShell: Systematic test case generation for dynamic analysis and measurement'
      - holzer:cav:2008
  papers/holzmann:ieeetse:2011:
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/groce:issta:2012
    - - Swarm testing
      - groce:issta:2012
  papers/hritcu:icfp:2013: []
  papers/hsiao:micro:2021: []
  papers/huang:todaes:2019: []
  papers/hunt:jar:1989: []
  papers/hunt:lncs:1994: []
  papers/hunt:micro:1999: []
  papers/ivankovic:fse:2019: []
  papers/jackson:tosem:2002: []
  papers/jacobs:nfm:2011:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  - - papers/smans:ecoop:2009
    - - 'Implicit dynamic frames: Combining dynamic frames and separation logic'
      - smans:ecoop:2009
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  papers/jacobs:vstte:2010:
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  papers/jaffar:arxiv:2020: []
  papers/jensen:popl:2013:
  - - papers/kennedy:ppdp:2013
    - - 'Coq: The world''s best macro assembler?'
      - kennedy:ppdp:2013
  papers/jhala:cav:2001: []
  papers/jhala:compsurv:2009:
  - - papers/mcmillan:ecs:2003
    - - Model checking
      - mcmillan:ecs:2003
  papers/jia:ieeetse:2010: []
  papers/jiang:arxiv:2021: []
  papers/jin:icst:2010: []
  papers/johnson:icse:2013: []
  papers/johnson:osr:1995: []
  papers/joloboff:dsetta:2015: []
  papers/jones:hasklang:1999: []
  papers/jones:hasklib:1999: []
  papers/jones:hw:1997:
  - - papers/chakravarty:haskffi:2003
    - - 'The Haskell 98 foreign function interface 1.0: An addendum to the Haskell
        98 report'
      - chakravarty:haskffi:2003
  - - papers/jones:hw:1997
    - - 'Green Card: a foreign-language interface for Haskell'
      - jones:hw:1997
  papers/jones:microsoft:2001: []
  papers/jones:pldi:1999: []
  papers/joshi:pldi:2002: []
  papers/jouppi:isca:2017:
  - - papers/jouppi:micro:2018
    - - Motivation for and evaluation of the first tensor processing unit
      - jouppi:micro:2018
  papers/jouppi:micro:2018:
  - - papers/jouppi:isca:2017
    - - In-datacenter performance analysis of a tensor processing unit
      - jouppi:isca:2017
  papers/jung:cacm:2021: []
  papers/jung:popl:2017:
  - - papers/anderson:icse:2016
    - - Engineering the Servo web browser engine using Rust
      - anderson:icse:2016
  - - papers/jung:cacm:2021
    - - 'Safe systems programming in Rust: The promise and the challenge'
      - jung:cacm:2021
  - - papers/jung:popl:2020
    - - 'Stacked borrows: An aliasing model for Rust'
      - jung:popl:2020
  - - papers/toman:ase:2015
    - - 'Crust: A bounded verifier for Rust'
      - toman:ase:2015
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  papers/jung:popl:2020:
  - - papers/anderson:icse:2016
    - - Engineering the Servo web browser engine using Rust
      - anderson:icse:2016
  - - papers/jung:cacm:2021
    - - 'Safe systems programming in Rust: The promise and the challenge'
      - jung:cacm:2021
  - - papers/yanovski:unknown:2021
    - - 'GhostCell: Separating permissions from data in Rust'
      - yanovski:unknown:2021
  papers/kaivola:cav:2009: []
  papers/kapus:fse:2019: []
  papers/kassios:fm:2006: []
  papers/kaufmann:ieeetse:1997: []
  papers/kaufmann:utaustin:2012: []
  papers/kennedy:ppdp:2013:
  - - papers/jensen:popl:2013
    - - High-level separation logic for low-level code
      - jensen:popl:2013
  papers/khakpour:cpp:2013: []
  papers/khurshid:tacas:2003:
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  - - papers/engler:issta:2007
    - - 'Under-constrained execution: Making automatic code destruction easy and scalable'
      - engler:issta:2007
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  papers/kiczales:iwoos:1991: []
  papers/kim:isca:2014: []
  papers/kirankumar:fmcad:2012: []
  papers/kjolstad:oopsla:2017: []
  papers/klabnik:book:2018: []
  papers/klein:sosp:2009:
  - - papers/murray:secpriv:2013
    - - 'seL4: from general purpose to a proof of information flow enforcement'
      - murray:secpriv:2013
  papers/kocher:arxiv:2018: []
  papers/kocher:crypto:1999: []
  papers/korencik:qrs:2020: []
  papers/kostyukov:pldi:2021: []
  papers/kozyrakis:phd:2002: []
  papers/krishnamurthi:fm:2019: []
  papers/krishnamurthi:snapl:2019: []
  papers/krishnaswami:tldi:2010:
  - - papers/hobor:popl:2013
    - - The ramifications of sharing in data structures
      - hobor:popl:2013
  papers/kroening:dac:2001: []
  papers/kroening:itg:2000: []
  papers/krohn:sosp:2007:
  - - papers/spencer:security:1999
    - - 'The Flask security architecture: System support for diverse security policies'
      - spencer:security:1999
  papers/kuhne:fmcad:2010: []
  papers/kumar:isca:2004: []
  papers/kumar:popl:2014: []
  papers/kupferman:concur:2006: []
  papers/kuznetsov:pldi:2012:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/jaffar:arxiv:2020
    - - 'TracerX: Dynamic symbolic execution with interpolation'
      - jaffar:arxiv:2020
  - - papers/zhang:apsec:2018
    - - Boost symbolic execution using dynamic state merging and forking
      - zhang:apsec:2018
  papers/lahiri:cav:2003: []
  papers/lahiri:hldvt:2001: []
  papers/lal:cav:2012: []
  papers/lal:fse:2014:
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  papers/lal:pldi:2015: []
  papers/lattner:cgo:2004: []
  papers/lauer:osr:1979: []
  papers/lauinger:trustcom:2020: []
  papers/lee:micro:1996: []
  papers/legoues:sefm:2011: []
  papers/leinenbach:fm:2009:
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  papers/leino:fosad:2007:
  - - papers/muller:vmcai:2016
    - - 'Viper: A verification infrastructure for permission-based reasoning'
      - muller:vmcai:2016
  papers/leino:icse:2013: []
  papers/leino:informatics:2001: []
  papers/leino:lpair:2010:
  - - papers/ferraiuolo:sosp:2017
    - - 'Komodo: Using verification to disentangle secure-enclave hardware from software'
      - ferraiuolo:sosp:2017
  - - papers/legoues:sefm:2011
    - - The Boogie verification debugger
      - legoues:sefm:2011
  - - papers/leino:icse:2013
    - - Developing verified programs with Dafny
      - leino:icse:2013
  - - papers/mai:asplos:2013
    - - Verifying security invariants in ExpressOS
      - mai:asplos:2013
  papers/leino:sac:2009: []
  papers/leino:tacas:2010:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  papers/lepikhin:arxiv:2020: []
  papers/leroy:cacm:2009: []
  papers/levy:apsys:2017: []
  papers/levy:plos:2015: []
  papers/levy:sosp:2017: []
  papers/li:sandp:2021: []
  papers/li:tocs:1989: []
  papers/li:usenix:2021: []
  papers/lie:secpri:2003: []
  papers/lie:sosp:2003: []
  papers/lietar:ismm:2019: []
  papers/liew:fse:2019: []
  papers/lim:toplas:2013: []
  papers/lin:sdr:2006: []
  papers/lin:sips:2006: []
  papers/lindner:indin:2018:
  - - papers/lindner:indin:2019
    - - 'Verification of safety functions implemented in Rust: A symbolic execution
        based approach'
      - lindner:indin:2019
  papers/lindner:indin:2019:
  - - papers/lindner:indin:2018
    - - No panic! Verification of Rust programs by symbolic execution
      - lindner:indin:2018
  papers/lipp:arxiv:2018: []
  papers/liu:arxiv:2021: []
  papers/liu:cpsspc:2018: []
  papers/liu:icse:2020: []
  papers/liu:sigcomm:2018: []
  papers/lockhart:ispass:2015: []
  papers/logozzo:vmcai:2011:
  - - papers/barnett:cacm:2011
    - - 'Specification and verification: The Spec# experience'
      - barnett:cacm:2011
  papers/loow:pldi:2019: []
  papers/lopes:pldi:2015:
  - - papers/lopes:pldi:2021
    - - 'Alive2: Bounded translation validation for LLVM'
      - lopes:pldi:2021
  papers/lopes:pldi:2021: []
  papers/lowe:csfw:2015: []
  papers/lustig:asplos:2016: []
  papers/ma:securecomm:2015: []
  papers/maas:asplos:2020: []
  papers/maciver:ecoop:2020: []
  papers/macvean:ppig:2016: []
  papers/mai:asplos:2013: []
  papers/majumdar:icse:2007: []
  papers/malik:cacm:2009:
  - - papers/demoura:cacm:2011
    - - 'Satisfiability modulo theories: Introduction and applications'
      - demoura:cacm:2011
  papers/manes:ieeetse:2019: []
  papers/mangano:crisis:2016: []
  papers/mansur:arxiv:2020:
  - - papers/barrett:mlf:2015
    - - Proofs in satisfiability modulo theories
      - barrett:mlf:2015
  - - papers/brummayer:sat:2010
    - - Automated testing and debugging of SAT and QBF solvers
      - brummayer:sat:2010
  - - papers/stump:fmsd:2013
    - - SMT proof checking using a logical framework
      - stump:fmsd:2013
  papers/mantel:pls:2007: []
  papers/mantel:sp:2001: []
  papers/marco:cav:2021: []
  papers/martignoni:asplos:2012: []
  papers/martin:isca:2012: []
  papers/massalin:asplos:1987: []
  papers/matsakis:hilt:2014: []
  papers/matsushita:esop:2020:
  - - papers/ullrich:msc:2016
    - - Simple verification of Rust programs via functional purification
      - ullrich:msc:2016
  papers/maus:amast:2008: []
  papers/mavin:isre:2009: []
  papers/mcbride:jfp:2002: []
  papers/mcilroy:arxiv:2019: []
  papers/mcmillan:cav:1998: []
  papers/mcmillan:ecs:2003: []
  papers/mcmillan:sigcomm:2019:
  - - papers/rath:epiq:2018
    - - Interoperability-guided testing of QUIC implementations using symbolic execution
      - rath:epiq:2018
  papers/mechtaev:fse:2018: []
  papers/merz:vstte:2012: []
  papers/miller:cacm:1990: []
  papers/milner:jcss:1978: []
  papers/milushev:forte:2012: []
  papers/mishra:book:2008: []
  papers/monteiro:arxiv:2019: []
  papers/morrisett:pldi:2012: []
  papers/morrisett:wcsss:1999:
  - - papers/smith:esop:2000
    - - Alias types
      - smith:esop:2000
  - - papers/walker:popl:2000
    - - A type system for expressive security policies
      - walker:popl:2000
  papers/mukherjee:oopsla:2020: []
  papers/muller:vmcai:2016:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  papers/mulligan:icfp:2014: []
  papers/murray:secdev:2018: []
  papers/murray:secpriv:2013: []
  papers/mycroft:esop:1999: []
  papers/myers:computer:2016: []
  papers/myers:csfw:2004: []
  papers/myreen:fse:2007: []
  papers/myreen:itp:2011: []
  papers/myreen:itp:2012: []
  papers/myreen:popl:2010: []
  papers/myreen:tphols:2009: []
  papers/naik:popl:2012: []
  papers/nanevski:icfp:2008: []
  papers/nanevski:oopsla:2019: []
  papers/narayanan:hotos:2019: []
  papers/naumann:fmco:2004: []
  papers/necula:cc:2002:
  - - papers/henzinger:spin:2003
    - - Software verification with BLAST
      - henzinger:spin:2003
  papers/necula:pldi:2000: []
  papers/necula:popl:1997: []
  papers/nelson:sosp:2017:
  - - papers/li:sandp:2021
    - - A secure and formally verified Linux KVM hypervisor
      - li:sandp:2021
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  papers/nelson:sosp:2019:
  - - papers/ferraiuolo:sosp:2017
    - - 'Komodo: Using verification to disentangle secure-enclave hardware from software'
      - ferraiuolo:sosp:2017
  - - papers/torlak:pldi:2014
    - - A lightweight symbolic virtual machine for solver-aided host languages
      - torlak:pldi:2014
  papers/nethercote:pldi:2007: []
  papers/nicole:arxiv:2020: []
  papers/niemetz:jsat:2015: []
  papers/nienhuis:secpriv:2020:
  - - papers/woodruff:isca:2014
    - - 'The CHERI capability model: Revisiting RISC in an age of risk'
      - woodruff:isca:2014
  papers/nipkow:book:2002: []
  papers/noonan:pldi:2016: []
  papers/nordholz:eurosys:2020: []
  papers/nyxbrain:sc2:2017: []
  papers/oberg:dac:2010: []
  papers/ohearn:cacm:2019:
  - - papers/astrauskas:oopsla:2019
    - - Leveraging Rust types for modular specification and verification
      - astrauskas:oopsla:2019
  - - papers/smans:ecoop:2009
    - - 'Implicit dynamic frames: Combining dynamic frames and separation logic'
      - smans:ecoop:2009
  papers/ohearn:popl:2019: []
  papers/ohearn:tcs:2007: []
  papers/ousterhout:usenix:1996: []
  papers/ozer:sbacpad:2007: []
  papers/padhye:issta:2019: []
  papers/padhye:oopsla:2019: []
  papers/palacharla:micro:1995: []
  papers/pandey:issta:2019: []
  papers/papadakis:advances:2019: []
  papers/papaevripides:acmtps:2021: []
  papers/parkinson:popl:2005:
  - - papers/berdine:fmco:2005
    - - 'Smallfoot: Modular automatic assertion checking with separation logic'
      - berdine:fmco:2005
  papers/patterson:cacm:1985: []
  papers/patterson:sigarch:1980: []
  papers/pdp11:book:1973: []
  papers/pearce:compsurv:2013: []
  papers/peleg:micro:1996: []
  papers/penninckx:nfm:2012:
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  papers/person:fse:2008:
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  papers/peterson:hw:1995: []
  papers/peterson:padl:2001: []
  papers/philippaerts:scp:2014:
  - - papers/jacobs:nfm:2011
    - - 'VeriFast: A powerful, sound, predictable, fast verifier for C and Java'
      - jacobs:nfm:2011
  papers/pierce:book:2016: []
  papers/pnueli:sfcs:1977: []
  papers/pnueli:tacas:1998:
  - - papers/necula:pldi:2000
    - - Translation validation for an optimizing compiler
      - necula:pldi:2000
  papers/poeplau:acsac:2019:
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  papers/poeplau:usenix:2020:
  - - papers/poeplau:acsac:2019
    - - 'Systematic comparison of symbolic execution systems: Intermediate representation
        and its generation'
      - poeplau:acsac:2019
  - - papers/yun:usenix:2018
    - - 'QSYM: A practical concolic execution engine tailored for hybrid fuzzing'
      - yun:usenix:2018
  papers/potvin:cacm:2016:
  - - papers/sadowski:cacm:2018
    - - Lessons from building static analysis tools at Google
      - sadowski:cacm:2018
  - - papers/sadowski:icse-seip:2018
    - - 'Modern code review: A case study at Google'
      - sadowski:icse-seip:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  - - papers/wright:icsm:2013
    - - Large-scale automated refactoring using ClangMR
      - wright:icsm:2013
  papers/pulte:popl:2017: []
  papers/qin:hpca:2020:
  - - papers/hedge:micro:2019
    - - 'ExTensor: An accelerator for sparse tensor algebra'
      - hedge:micro:2019
  papers/qin:pldi:2020:
  - - papers/astrauskas:oopsla:2020
    - - How do programmers use unsafe Rust?
      - astrauskas:oopsla:2020
  - - papers/evans:icse:2020
    - - Is Rust used safely by software developers?
      - evans:icse:2020
  papers/qiu:icse:2017:
  - - papers/qiu:nfm:2018
    - - Using test ranges to improve symbolic execution
      - qiu:nfm:2018
  - - papers/siddiqui:oopsla:2012
    - - Scaling symbolic execution using ranged analysis
      - siddiqui:oopsla:2012
  papers/qiu:nfm:2018:
  - - papers/qiu:icse:2017
    - - A synergistic approach for distributed symbolic execution using test ranges
      - qiu:icse:2017
  papers/rakamaric:cav:2014:
  - - papers/almeida:security:2016
    - - Verifying constant-time implementations
      - almeida:security:2016
  - - papers/baranowski:atva:2018
    - - Verifying Rust programs with SMACK
      - baranowski:atva:2018
  - - papers/barnett:fmco:2005
    - - 'Boogie: A modular reusable verifier for object-oriented programs'
      - barnett:fmco:2005
  papers/ramos:cav:2011:
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  papers/ramos:sec:2015:
  - - papers/cui:asplos:2013
    - - Verifying systems rules using rule-directed symbolic execution
      - cui:asplos:2013
  - - papers/engler:issta:2007
    - - 'Under-constrained execution: Making automatic code destruction easy and scalable'
      - engler:issta:2007
  - - papers/goodman:ndss:2018
    - - 'DeepState: Symbolic unit testing for C and C++'
      - goodman:ndss:2018
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/xie:popl:2005
    - - Scalable error detection using boolean satisfiability
      - xie:popl:2005
  papers/ramsey:lctes:1998: []
  papers/ramsey:toplas:1997: []
  papers/rath:epiq:2018:
  - - papers/mcmillan:sigcomm:2019
    - - Formal specification and testing of QUIC
      - mcmillan:sigcomm:2019
  papers/recoules:ase:2019: []
  papers/regehr:acp4is:2003: []
  papers/regehr:asplos:2004: []
  papers/regehr:emsoft:2003: []
  papers/regehr:lctes:2006: []
  papers/regehr:pldi:2012:
  - - papers/maciver:ecoop:2020
    - - 'Test-case reduction via test-case generation: Insights from the Hypothesis
        reducer'
      - maciver:ecoop:2020
  papers/regehr:rtss:2003: []
  papers/regehr:tecs:2005: []
  papers/reid:cases:2008:
  - - papers/lin:sdr:2006
    - - 'SPEX: A programming language for software defined radio'
      - lin:sdr:2006
  - - papers/lin:sips:2006
    - - Design and implementation of turbo decoders for software defined radio
      - lin:sips:2006
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  - - papers/woh:micro:2008
    - - 'From SODA to scotch: The evolution of a wireless baseband processor'
      - woh:micro:2008
  papers/reid:cav:2016:
  - - papers/bryant:cmu:2018
    - - Formal verification of pipelined Y86-64 microprocessors with UCLID5
      - bryant:cmu:2018
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  papers/reid:fmcad:2016:
  - - papers/jiang:arxiv:2021
    - - 'Examiner: Automatically locating inconsistent instructions between real devices
        and CPU emulators for Arm'
      - jiang:arxiv:2021
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:oopsla:2017
    - - Who guards the guards? Formal validation of the ARM v8-M architecture specification
      - reid:oopsla:2017
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  papers/reid:gfpw:1989: []
  papers/reid:gfpw:1993: []
  papers/reid:gfpw:1994: []
  papers/reid:hatra:2020: []
  papers/reid:hw:1995: []
  papers/reid:icse:1999: []
  papers/reid:ifl:1998: []
  papers/reid:msc:1993: []
  papers/reid:oopsla:2017:
  - - papers/jiang:arxiv:2021
    - - 'Examiner: Automatically locating inconsistent instructions between real devices
        and CPU emulators for Arm'
      - jiang:arxiv:2021
  - - papers/reid:cav:2016
    - - End-to-end verification of ARM processors with ISA-formal
      - reid:cav:2016
  - - papers/reid:fmcad:2016
    - - Trustworthy specifications of ARM v8-A and v8-M system level architecture
      - reid:fmcad:2016
  - - papers/reid:phd:2019
    - - 'Defining interfaces between hardware and software: Quality and performance'
      - reid:phd:2019
  papers/reid:osdi:2000:
  - - papers/eide:aspse:2001
    - - 'Aspect weaving as component knitting: Separating concerns with Knit'
      - eide:aspse:2001
  - - papers/eide:icse:2002
    - - Static and dynamic structure in design patterns
      - eide:icse:2002
  papers/reid:phd:2019: []
  papers/reid:yale:1998: []
  papers/reid:yale:2001: []
  papers/remy:popl:1989: []
  papers/reppy:att:1996:
  - - papers/fluet:jfp:2006
    - - Phantom types and subtyping
      - fluet:jfp:2006
  papers/reynolds:lics:2002:
  - - papers/jacobs:vstte:2010
    - - 'VeriFast: Imperative programs as proofs'
      - jacobs:vstte:2010
  - - papers/ohearn:cacm:2019
    - - Separation logic
      - ohearn:cacm:2019
  papers/rieman:chi:1995:
  - - papers/macvean:ppig:2016
    - - API usability at scale
      - macvean:ppig:2016
  papers/roessle:cpp:2019: []
  papers/romano:phd:2014: []
  papers/rondon:pldi:2008: []
  papers/roy:fse:2018: []
  papers/rozier:vstte:2016: []
  papers/rudra:sosp:2021: []
  papers/rushby:sri:1992: []
  papers/russell:cacm:1978: []
  papers/russinovich:acmq:2021: []
  papers/rutledge:icse:2019: []
  papers/rutledge:icse:2020: []
  papers/sabelfield:jcs:2009: []
  papers/sadowski:cacm:2018:
  - - papers/distefano:cacm:2019
    - - Scaling static analyses at Facebook
      - distefano:cacm:2019
  - - papers/potvin:cacm:2016
    - - Why Google stores billions of lines of code in a single repository
      - potvin:cacm:2016
  - - papers/sadowski:icse-seip:2018
    - - 'Modern code review: A case study at Google'
      - sadowski:icse-seip:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  papers/sadowski:icse-seip:2018:
  - - papers/potvin:cacm:2016
    - - Why Google stores billions of lines of code in a single repository
      - potvin:cacm:2016
  papers/sadowski:icse:2015:
  - - papers/distefano:cacm:2019
    - - Scaling static analyses at Facebook
      - distefano:cacm:2019
  - - papers/potvin:cacm:2016
    - - Why Google stores billions of lines of code in a single repository
      - potvin:cacm:2016
  - - papers/sadowski:cacm:2018
    - - Lessons from building static analysis tools at Google
      - sadowski:cacm:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  papers/samet:ieeetse:1977: []
  papers/samet:phd:1975: []
  papers/sammler:pldi:2021: []
  papers/sardar:access:2021: []
  papers/sarkar:pldi:2011: []
  papers/sarkar:popl:2009: []
  papers/schemmel:cav:2020: []
  papers/schmaltz:vstte:2012: []
  papers/schwartz:sp:2010: []
  papers/schwarz:sefm:2016: []
  papers/schwerhoff:ecoop:2015:
  - - papers/hehner:vstte:2008
    - - Specified blocks
      - hehner:vstte:2008
  - - papers/tuerk:vstte:2010
    - - Local reasoning about while-loops
      - tuerk:vstte:2010
  papers/seal:book:2000: []
  papers/segar:fmsd:1995:
  - - papers/kirankumar:fmcad:2012
    - - 'Symbolic trajectory evaluation: The primary validation vehicle for next generation
        Intel processor graphics FPU'
      - kirankumar:fmcad:2012
  papers/sen:fse:2005: []
  papers/seshadri:sosp:2007:
  - - papers/franklin:cmu:2008
    - - 'Attacking, repairing, and verifying SecVisor: A retrospective on the security
        of a hypervisor'
      - franklin:cmu:2008
  papers/sevcik:jacm:2013: []
  papers/sewell:cacm:2010: []
  papers/sewell:pldi:2013: []
  papers/shamis:arxiv:2021: []
  papers/sharma:oopsla:2012: []
  papers/sharma:pls:2013: []
  papers/shazeer:arxiv:2017:
  - - papers/fedus:arxiv:2021
    - - 'Switch transformers: Scaling to trillion parameter models with simple and
        efficient sparsity'
      - fedus:arxiv:2021
  - - papers/lepikhin:arxiv:2020
    - - 'GShard: Scaling giant models with conditional computation and automatic sharding'
      - lepikhin:arxiv:2020
  papers/sheeran:fmcad:2000:
  - - papers/gurfinkel:fmcad:2017
    - - K-induction without unrolling
      - gurfinkel:fmcad:2017
  papers/shi:phd:2013: []
  papers/shoshitaishvili:sandp:2016: []
  papers/shoshitaishvili:sp:2016: []
  papers/siddiqui:oopsla:2012:
  - - papers/qiu:icse:2017
    - - A synergistic approach for distributed symbolic execution using test ranges
      - qiu:icse:2017
  papers/siegel:sc:2015: []
  papers/sigurbjarnarson:osdi:2016:
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  papers/sigurbjarnarson:osdi:2018:
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  papers/silva:sbac:2016: []
  papers/simner:pls:2020: []
  papers/skorstengaard:esop:2018:
  - - papers/nienhuis:secpriv:2020
    - - 'Rigorous engineering for hardware security: Formal modelling and proof in
        the CHERI design and implementation process'
      - nienhuis:secpriv:2020
  - - papers/skorstengaard:popl:2019
    - - 'StkTokens: Enforcing well-bracketed control flow and stack encapsulation
        using linear capabilities'
      - skorstengaard:popl:2019
  - - papers/woodruff:isca:2014
    - - 'The CHERI capability model: Revisiting RISC in an age of risk'
      - woodruff:isca:2014
  papers/skorstengaard:popl:2019:
  - - papers/nienhuis:secpriv:2020
    - - 'Rigorous engineering for hardware security: Formal modelling and proof in
        the CHERI design and implementation process'
      - nienhuis:secpriv:2020
  - - papers/skorstengaard:esop:2018
    - - Reasoning about a machine with local capabilities
      - skorstengaard:esop:2018
  - - papers/woodruff:isca:2014
    - - 'The CHERI capability model: Revisiting RISC in an age of risk'
      - woodruff:isca:2014
  papers/slobodova:memocode:2011: []
  papers/smans:ecoop:2009: []
  papers/smans:fmood:2010: []
  papers/smetters:nspw:2002: []
  papers/smith:book:1996: []
  papers/smith:esop:2000: []
  papers/smith:fossacs:2009: []
  papers/smith:tocs:1984: []
  papers/spencer:security:1999: []
  papers/srinivasan:ieeetoc:2010: []
  papers/stephens:micro:2017: []
  papers/stephens:ndss:2016:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  papers/stewart:difts:2014: []
  papers/stojmenovic:tpds:2010: []
  papers/stump:fmsd:2013:
  - - papers/barrett:mlf:2015
    - - Proofs in satisfiability modulo theories
      - barrett:mlf:2015
  - - papers/brummayer:sat:2010
    - - Automated testing and debugging of SAT and QBF solvers
      - brummayer:sat:2010
  - - papers/mansur:arxiv:2020
    - - Detecting critical bugs in SMT solvers using blackbox mutational fuzzing
      - mansur:arxiv:2020
  papers/su:computer:1974: []
  papers/subhlok:ppopp:1993: []
  papers/sutcliffe:ai:2001: []
  papers/syeda:itp:2018: []
  papers/systemverilog:ieee:2013: []
  papers/szekeres:sandp:2013: []
  papers/tahat:fmcad:2019: []
  papers/tan:icfp:2016: []
  papers/tang:sec:2017: []
  papers/tanter:aosd:2010: []
  papers/tao:sosp:2021: []
  papers/thies:micro:2007: []
  papers/thies:ppopp:2005: []
  papers/tillmann:fse:2005: []
  papers/tiwari:asplos:2009: []
  papers/tiwari:isca:2009: []
  papers/tiwari:isca:2011: []
  papers/tofte:inco:1997:
  - - papers/jung:cacm:2021
    - - 'Safe systems programming in Rust: The promise and the challenge'
      - jung:cacm:2021
  papers/toman:ase:2015: []
  papers/torlak:onward:2013: []
  papers/torlak:pldi:2014:
  - - papers/bornholt:oopsla:2018
    - - Finding code that explodes under symbolic evaluation
      - bornholt:oopsla:2018
  - - papers/nelson:sosp:2019
    - - Scaling symbolic evaluation for automated verification of systems code with
        Serval
      - nelson:sosp:2019
  - - papers/weitz:icfp:2017
    - - 'SpaceSearch: A library for building and verifying solver-aided tools'
      - weitz:icfp:2017
  papers/trabish:icse:2018: []
  papers/trabish:issta:2020: []
  papers/tremblay:micro:1996: []
  papers/trtik:atva:2014:
  - - papers/coppa:ase:2017
    - - Rethinking pointer reasoning in symbolic execution
      - coppa:ase:2017
  papers/tschantz:fm:2009: []
  papers/tuerk:vstte:2010:
  - - papers/hehner:vstte:2008
    - - Specified blocks
      - hehner:vstte:2008
  - - papers/leino:lpair:2010
    - - 'Dafny: An automatic program verifier for functional correctness'
      - leino:lpair:2010
  papers/ullrich:msc:2016:
  - - papers/matsushita:esop:2020
    - - 'RustHorn: CHC-based verification for Rust programs'
      - matsushita:esop:2020
  papers/vanegue:sandp:2013: []
  papers/vanhattum:asplos:2021: []
  papers/vantonder:icse:2018: []
  papers/vasudevan:secpriv:2013: []
  papers/vasudevan:usenix:2016: []
  papers/vaswani:arxiv:2017: []
  papers/vega:pldi:2021: []
  papers/veldhuizen:oo:1998: []
  papers/velev:dac:2000: []
  papers/verbeek:fmmsd:2019: []
  papers/vila:pldi:2020: []
  papers/visser:tacas:2020: []
  papers/vogels:fmoods:2011:
  - - papers/philippaerts:scp:2014
    - - 'Software verification with VeriFast: Industrial case studies'
      - philippaerts:scp:2014
  papers/vonbehren:hotos:2003: []
  papers/votipka:sp:2018: []
  papers/wagner:hotos:2013:
  - - papers/cadar:fse:2015
    - - Targeted program transformations for symbolic execution
      - cadar:fse:2015
  papers/walker:popl:2000: []
  papers/walker:tic:2001: []
  papers/wand:lfp:1980: []
  papers/wand:lics:1987: []
  papers/wang:pldi:2007: []
  papers/wang:sosp:2013: []
  papers/wang:tase:2018: []
  papers/watson:sandp:2015:
  - - papers/woodruff:isca:2014
    - - 'The CHERI capability model: Revisiting RISC in an age of risk'
      - woodruff:isca:2014
  papers/weigl:arxiv:2019: []
  papers/weiss:arxiv:2018: []
  papers/weitz:icfp:2017: []
  papers/wickerson:popl:2017: []
  papers/willsey:popl:2021: []
  papers/windley:ieeetoc:1995: []
  papers/woh:micro:2008:
  - - papers/reid:cases:2008
    - - 'SoC-C: efficient programming abstractions for heterogeneous multicore systems
        on chip'
      - reid:cases:2008
  papers/wolf:codes:2004: []
  papers/wolff:draft:2021: []
  papers/woodruff:isca:2014:
  - - papers/nienhuis:secpriv:2020
    - - 'Rigorous engineering for hardware security: Formal modelling and proof in
        the CHERI design and implementation process'
      - nienhuis:secpriv:2020
  - - papers/watson:sandp:2015
    - - 'CHERI: A hybrid capability-system architecture for scalable software compartmentalization'
      - watson:sandp:2015
  - - papers/woodruff:tocs:2019
    - - 'CHERI concentrate: Practical compressed capabilities'
      - woodruff:tocs:2019
  papers/woodruff:tocs:2019: []
  papers/wright:icsm:2013:
  - - papers/sadowski:cacm:2018
    - - Lessons from building static analysis tools at Google
      - sadowski:cacm:2018
  - - papers/sadowski:icse:2015
    - - 'Tricorder: Building a program analysis ecosystem'
      - sadowski:icse:2015
  papers/wu:arxiv:2017: []
  papers/xi:icfp:2001: []
  papers/xi:jfp:2007: []
  papers/xie:bugs:2005:
  - - papers/godefroid:bugs:2005
    - - The soundness of bugs is what matters (position statement)
      - godefroid:bugs:2005
  papers/xie:popl:2005:
  - - papers/calcagno:popl:2009
    - - Compositional shape analysis by means of bi-abduction
      - calcagno:popl:2009
  - - papers/engler:issta:2007
    - - 'Under-constrained execution: Making automatic code destruction easy and scalable'
      - engler:issta:2007
  - - papers/khurshid:tacas:2003
    - - Generalized symbolic execution for model checking and testing
      - khurshid:tacas:2003
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  - - papers/ramos:sec:2015
    - - 'Under-constrained symbolic execution: Correctness checking for real code'
      - ramos:sec:2015
  papers/xu:arxiv:2021: []
  papers/xu:cav:2021: []
  papers/yang:issta:2012: []
  papers/yang:pldi:2010: []
  papers/yang:pldi:2011:
  - - papers/ramos:cav:2011
    - - Practical, low-effort equivalence verification of real code
      - ramos:cav:2011
  papers/yanovski:unknown:2021: []
  papers/yun:usenix:2018:
  - - papers/poeplau:usenix:2020
    - - 'Symbolic execution with SymCC: Don''t interpret, compile!'
      - poeplau:usenix:2020
  papers/zaostrovnykh:sosp:2019: []
  papers/zdancewic:csfw:2001: []
  papers/zdancewic:csfw:2003: []
  papers/zeldovich:osdi:2006:
  - - papers/spencer:security:1999
    - - 'The Flask security architecture: System support for diverse security policies'
      - spencer:security:1999
  papers/zeller:bugs:2005: []
  papers/zhang:apsec:2018: []
  papers/zhang:asplos:2015: []
  papers/zhang:ccs:2020: []
  papers/zhang:fmcad:2018: []
  papers/zhang:issta:2014: []
  papers/zhang:toplas:2017: []
  papers/zhao:ndss:2019: []
  papers/zhuang:pldi:2006: []
  papers/zivojnovic:vlsi:1996: []
  papers/zorn:iscawddd:2017: []
